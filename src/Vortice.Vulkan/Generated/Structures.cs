// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;

namespace Vortice.Vulkan
{
	public unsafe partial struct VkOffset2D
	{
		public int X;
		public int Y;
	}

	public unsafe partial struct VkOffset3D
	{
		public int X;
		public int Y;
		public int Z;
	}

	public unsafe partial struct VkExtent2D
	{
		public uint Width;
		public uint Height;
	}

	public unsafe partial struct VkExtent3D
	{
		public uint Width;
		public uint Height;
		public uint Depth;
	}

	public unsafe partial struct VkViewport
	{
		public float X;
		public float Y;
		public float Width;
		public float Height;
		public float MinDepth;
		public float MaxDepth;
	}

	public unsafe partial struct VkRect2D
	{
		public VkOffset2D Offset;
		public VkExtent2D Extent;
	}

	public unsafe partial struct VkClearRect
	{
		public VkRect2D Rect;
		public uint BaseArrayLayer;
		public uint LayerCount;
	}

	public unsafe partial struct VkComponentMapping
	{
		public VkComponentSwizzle R;
		public VkComponentSwizzle G;
		public VkComponentSwizzle B;
		public VkComponentSwizzle A;
	}

	public unsafe partial struct VkPhysicalDeviceProperties
	{
		public uint apiVersion;
		public uint driverVersion;
		public uint vendorID;
		public uint deviceID;
		public VkPhysicalDeviceType deviceType;
		public fixed byte deviceName[(int)Vulkan.MaxPhysicalDeviceNameSize];
		public fixed byte pipelineCacheUUID[(int)Vulkan.UuidSize];
		public VkPhysicalDeviceLimits limits;
		public VkPhysicalDeviceSparseProperties sparseProperties;
	}

	public unsafe partial struct VkExtensionProperties
	{
		public fixed byte extensionName[(int)Vulkan.MaxExtensionNameSize];
		public uint specVersion;
	}

	public unsafe partial struct VkLayerProperties
	{
		public fixed byte layerName[(int)Vulkan.MaxExtensionNameSize];
		public uint specVersion;
		public uint implementationVersion;
		public fixed byte description[(int)Vulkan.MaxDescriptionSize];
	}

	public unsafe partial struct VkApplicationInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public IntPtr pApplicationName;
		public uint applicationVersion;
		public IntPtr pEngineName;
		public uint engineVersion;
		public uint apiVersion;
	}

	public unsafe partial struct VkDeviceQueueCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkDeviceQueueCreateFlags flags;
		public uint queueFamilyIndex;
		public uint queueCount;
		public IntPtr pQueuePriorities;
	}

	public unsafe partial struct VkDeviceCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public uint queueCreateInfoCount;
		public VkDeviceQueueCreateInfo* pQueueCreateInfos;
		public uint enabledLayerCount;
		public IntPtr* ppEnabledLayerNames;
		public uint enabledExtensionCount;
		public IntPtr* ppEnabledExtensionNames;
		public IntPtr pEnabledFeatures;
	}

	public unsafe partial struct VkInstanceCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public VkApplicationInfo* pApplicationInfo;
		public uint enabledLayerCount;
		public IntPtr* ppEnabledLayerNames;
		public uint enabledExtensionCount;
		public IntPtr* ppEnabledExtensionNames;
	}

	public unsafe partial struct VkQueueFamilyProperties
	{
		/// <summary>
		/// Queue flags
		/// </summary>
		public VkQueueFlags QueueFlags;
		public uint QueueCount;
		public uint TimestampValidBits;
		/// <summary>
		/// Minimum alignment requirement for image transfers
		/// </summary>
		public VkExtent3D MinImageTransferGranularity;
	}

	public unsafe partial struct VkPhysicalDeviceMemoryProperties
	{
		public uint memoryTypeCount;
		public VkMemoryType memoryTypes_0;
		public VkMemoryType memoryTypes_1;
		public VkMemoryType memoryTypes_2;
		public VkMemoryType memoryTypes_3;
		public VkMemoryType memoryTypes_4;
		public VkMemoryType memoryTypes_5;
		public VkMemoryType memoryTypes_6;
		public VkMemoryType memoryTypes_7;
		public VkMemoryType memoryTypes_8;
		public VkMemoryType memoryTypes_9;
		public VkMemoryType memoryTypes_10;
		public VkMemoryType memoryTypes_11;
		public VkMemoryType memoryTypes_12;
		public VkMemoryType memoryTypes_13;
		public VkMemoryType memoryTypes_14;
		public VkMemoryType memoryTypes_15;
		public VkMemoryType memoryTypes_16;
		public VkMemoryType memoryTypes_17;
		public VkMemoryType memoryTypes_18;
		public VkMemoryType memoryTypes_19;
		public VkMemoryType memoryTypes_20;
		public VkMemoryType memoryTypes_21;
		public VkMemoryType memoryTypes_22;
		public VkMemoryType memoryTypes_23;
		public VkMemoryType memoryTypes_24;
		public VkMemoryType memoryTypes_25;
		public VkMemoryType memoryTypes_26;
		public VkMemoryType memoryTypes_27;
		public VkMemoryType memoryTypes_28;
		public VkMemoryType memoryTypes_29;
		public VkMemoryType memoryTypes_30;
		public VkMemoryType memoryTypes_31;
		public uint memoryHeapCount;
		public VkMemoryHeap memoryHeaps_0;
		public VkMemoryHeap memoryHeaps_1;
		public VkMemoryHeap memoryHeaps_2;
		public VkMemoryHeap memoryHeaps_3;
		public VkMemoryHeap memoryHeaps_4;
		public VkMemoryHeap memoryHeaps_5;
		public VkMemoryHeap memoryHeaps_6;
		public VkMemoryHeap memoryHeaps_7;
		public VkMemoryHeap memoryHeaps_8;
		public VkMemoryHeap memoryHeaps_9;
		public VkMemoryHeap memoryHeaps_10;
		public VkMemoryHeap memoryHeaps_11;
		public VkMemoryHeap memoryHeaps_12;
		public VkMemoryHeap memoryHeaps_13;
		public VkMemoryHeap memoryHeaps_14;
		public VkMemoryHeap memoryHeaps_15;
	}

	public unsafe partial struct VkMemoryAllocateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong allocationSize;
		public uint memoryTypeIndex;
	}

	public unsafe partial struct VkMemoryRequirements
	{
		/// <summary>
		/// Specified in bytes
		/// </summary>
		public ulong Size;
		/// <summary>
		/// Specified in bytes
		/// </summary>
		public ulong Alignment;
		/// <summary>
		/// Bitmask of the allowed memory type indices into memoryTypes[] for this object
		/// </summary>
		public uint MemoryTypeBits;
	}

	public unsafe partial struct VkSparseImageFormatProperties
	{
		public VkImageAspectFlags AspectMask;
		public VkExtent3D ImageGranularity;
		public VkSparseImageFormatFlags Flags;
	}

	public unsafe partial struct VkSparseImageMemoryRequirements
	{
		public VkSparseImageFormatProperties FormatProperties;
		public uint ImageMipTailFirstLod;
		/// <summary>
		/// Specified in bytes, must be a multiple of sparse block size in bytes / alignment
		/// </summary>
		public ulong ImageMipTailSize;
		/// <summary>
		/// Specified in bytes, must be a multiple of sparse block size in bytes / alignment
		/// </summary>
		public ulong ImageMipTailOffset;
		/// <summary>
		/// Specified in bytes, must be a multiple of sparse block size in bytes / alignment
		/// </summary>
		public ulong ImageMipTailStride;
	}

	public unsafe partial struct VkMemoryType
	{
		/// <summary>
		/// Memory properties of this memory type
		/// </summary>
		public VkMemoryPropertyFlags PropertyFlags;
		/// <summary>
		/// Index of the memory heap allocations of this memory type are taken from
		/// </summary>
		public uint HeapIndex;
	}

	public unsafe partial struct VkMemoryHeap
	{
		/// <summary>
		/// Available memory in the heap
		/// </summary>
		public ulong Size;
		/// <summary>
		/// Flags for the heap
		/// </summary>
		public VkMemoryHeapFlags Flags;
	}

	public unsafe partial struct VkMappedMemoryRange
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong memory;
		public ulong offset;
		public ulong size;
	}

	public unsafe partial struct VkFormatProperties
	{
		/// <summary>
		/// Format features in case of linear tiling
		/// </summary>
		public VkFormatFeatureFlags LinearTilingFeatures;
		/// <summary>
		/// Format features in case of optimal tiling
		/// </summary>
		public VkFormatFeatureFlags OptimalTilingFeatures;
		/// <summary>
		/// Format features supported by buffers
		/// </summary>
		public VkFormatFeatureFlags BufferFeatures;
	}

	public unsafe partial struct VkImageFormatProperties
	{
		/// <summary>
		/// max image dimensions for this resource type
		/// </summary>
		public VkExtent3D MaxExtent;
		/// <summary>
		/// max number of mipmap levels for this resource type
		/// </summary>
		public uint MaxMipLevels;
		/// <summary>
		/// max array size for this resource type
		/// </summary>
		public uint MaxArrayLayers;
		/// <summary>
		/// supported sample counts for this resource type
		/// </summary>
		public VkSampleCountFlags SampleCounts;
		/// <summary>
		/// max size (in bytes) of this resource type
		/// </summary>
		public ulong MaxResourceSize;
	}

	public unsafe partial struct VkDescriptorBufferInfo
	{
		/// <summary>
		/// Buffer used for this descriptor slot.
		/// </summary>
		public VkBuffer Buffer;
		/// <summary>
		/// Base offset from buffer start in bytes to update in the descriptor set.
		/// </summary>
		public ulong Offset;
		/// <summary>
		/// Size in bytes of the buffer resource for this descriptor update.
		/// </summary>
		public ulong Range;
	}

	public unsafe partial struct VkDescriptorImageInfo
	{
		/// <summary>
		/// Sampler to write to the descriptor in case it is a SAMPLER or COMBINED_IMAGE_SAMPLER descriptor. Ignored otherwise.
		/// </summary>
		public VkSampler Sampler;
		/// <summary>
		/// Image view to write to the descriptor in case it is a SAMPLED_IMAGE, STORAGE_IMAGE, COMBINED_IMAGE_SAMPLER, or INPUT_ATTACHMENT descriptor. Ignored otherwise.
		/// </summary>
		public VkImageView ImageView;
		/// <summary>
		/// Layout the image is expected to be in when accessed using this descriptor (only used if imageView is not VK_NULL_HANDLE).
		/// </summary>
		public VkImageLayout ImageLayout;
	}

	public unsafe partial struct VkWriteDescriptorSet
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong dstSet;
		public uint dstBinding;
		public uint dstArrayElement;
		public uint descriptorCount;
		public VkDescriptorType descriptorType;
		public IntPtr pImageInfo;
		public IntPtr pBufferInfo;
		public IntPtr pTexelBufferView;
	}

	public unsafe partial struct VkCopyDescriptorSet
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong srcSet;
		public uint srcBinding;
		public uint srcArrayElement;
		public ulong dstSet;
		public uint dstBinding;
		public uint dstArrayElement;
		public uint descriptorCount;
	}

	public unsafe partial struct VkBufferCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkBufferCreateFlags flags;
		public ulong size;
		public VkBufferUsageFlags usage;
		public VkSharingMode sharingMode;
		public uint queueFamilyIndexCount;
		public uint* pQueueFamilyIndices;
	}

	public unsafe partial struct VkBufferViewCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public ulong buffer;
		public VkFormat format;
		public ulong offset;
		public ulong range;
	}

	public unsafe partial struct VkImageSubresource
	{
		public VkImageAspectFlags AspectMask;
		public uint MipLevel;
		public uint ArrayLayer;
	}

	public unsafe partial struct VkImageSubresourceLayers
	{
		public VkImageAspectFlags AspectMask;
		public uint MipLevel;
		public uint BaseArrayLayer;
		public uint LayerCount;
	}

	public unsafe partial struct VkImageSubresourceRange
	{
		public VkImageAspectFlags AspectMask;
		public uint BaseMipLevel;
		public uint LevelCount;
		public uint BaseArrayLayer;
		public uint LayerCount;
	}

	public unsafe partial struct VkMemoryBarrier
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkAccessFlags srcAccessMask;
		public VkAccessFlags dstAccessMask;
	}

	public unsafe partial struct VkBufferMemoryBarrier
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkAccessFlags srcAccessMask;
		public VkAccessFlags dstAccessMask;
		public uint srcQueueFamilyIndex;
		public uint dstQueueFamilyIndex;
		public ulong buffer;
		public ulong offset;
		public ulong size;
	}

	public unsafe partial struct VkImageMemoryBarrier
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkAccessFlags srcAccessMask;
		public VkAccessFlags dstAccessMask;
		public VkImageLayout oldLayout;
		public VkImageLayout newLayout;
		public uint srcQueueFamilyIndex;
		public uint dstQueueFamilyIndex;
		public ulong image;
		public VkImageSubresourceRange subresourceRange;
	}

	public unsafe partial struct VkImageCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkImageCreateFlags flags;
		public VkImageType imageType;
		public VkFormat format;
		public VkExtent3D extent;
		public uint mipLevels;
		public uint arrayLayers;
		public VkSampleCountFlags samples;
		public VkImageTiling tiling;
		public VkImageUsageFlags usage;
		public VkSharingMode sharingMode;
		public uint queueFamilyIndexCount;
		public uint* pQueueFamilyIndices;
		public VkImageLayout initialLayout;
	}

	public unsafe partial struct VkSubresourceLayout
	{
		/// <summary>
		/// Specified in bytes
		/// </summary>
		public ulong Offset;
		/// <summary>
		/// Specified in bytes
		/// </summary>
		public ulong Size;
		/// <summary>
		/// Specified in bytes
		/// </summary>
		public ulong RowPitch;
		/// <summary>
		/// Specified in bytes
		/// </summary>
		public ulong ArrayPitch;
		/// <summary>
		/// Specified in bytes
		/// </summary>
		public ulong DepthPitch;
	}

	public unsafe partial struct VkImageViewCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkImageViewCreateFlags flags;
		public ulong image;
		public VkImageViewType viewType;
		public VkFormat format;
		public VkComponentMapping components;
		public VkImageSubresourceRange subresourceRange;
	}

	public unsafe partial struct VkBufferCopy
	{
		/// <summary>
		/// Specified in bytes
		/// </summary>
		public ulong SrcOffset;
		/// <summary>
		/// Specified in bytes
		/// </summary>
		public ulong DstOffset;
		/// <summary>
		/// Specified in bytes
		/// </summary>
		public ulong Size;
	}

	public unsafe partial struct VkSparseMemoryBind
	{
		/// <summary>
		/// Specified in bytes
		/// </summary>
		public ulong ResourceOffset;
		/// <summary>
		/// Specified in bytes
		/// </summary>
		public ulong Size;
		public VkDeviceMemory Memory;
		/// <summary>
		/// Specified in bytes
		/// </summary>
		public ulong MemoryOffset;
		public VkSparseMemoryBindFlags Flags;
	}

	public unsafe partial struct VkSparseImageMemoryBind
	{
		public VkImageSubresource Subresource;
		public VkOffset3D Offset;
		public VkExtent3D Extent;
		public VkDeviceMemory Memory;
		/// <summary>
		/// Specified in bytes
		/// </summary>
		public ulong MemoryOffset;
		public VkSparseMemoryBindFlags Flags;
	}

	public unsafe partial struct VkSparseBufferMemoryBindInfo
	{
		public ulong buffer;
		public uint bindCount;
		public IntPtr pBinds;
	}

	public unsafe partial struct VkSparseImageOpaqueMemoryBindInfo
	{
		public ulong image;
		public uint bindCount;
		public IntPtr pBinds;
	}

	public unsafe partial struct VkSparseImageMemoryBindInfo
	{
		public ulong image;
		public uint bindCount;
		public IntPtr pBinds;
	}

	public unsafe partial struct VkBindSparseInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint waitSemaphoreCount;
		public IntPtr pWaitSemaphores;
		public uint bufferBindCount;
		public VkSparseBufferMemoryBindInfo* pBufferBinds;
		public uint imageOpaqueBindCount;
		public VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds;
		public uint imageBindCount;
		public VkSparseImageMemoryBindInfo* pImageBinds;
		public uint signalSemaphoreCount;
		public IntPtr pSignalSemaphores;
	}

	public unsafe partial struct VkImageCopy
	{
		public VkImageSubresourceLayers SrcSubresource;
		/// <summary>
		/// Specified in pixels for both compressed and uncompressed images
		/// </summary>
		public VkOffset3D SrcOffset;
		public VkImageSubresourceLayers DstSubresource;
		/// <summary>
		/// Specified in pixels for both compressed and uncompressed images
		/// </summary>
		public VkOffset3D DstOffset;
		/// <summary>
		/// Specified in pixels for both compressed and uncompressed images
		/// </summary>
		public VkExtent3D Extent;
	}

	public unsafe partial struct VkImageBlit
	{
		public VkImageSubresourceLayers srcSubresource;
		public VkOffset3D srcOffsets;
		public VkImageSubresourceLayers dstSubresource;
		public VkOffset3D dstOffsets;
	}

	public unsafe partial struct VkBufferImageCopy
	{
		/// <summary>
		/// Specified in bytes
		/// </summary>
		public ulong BufferOffset;
		/// <summary>
		/// Specified in texels
		/// </summary>
		public uint BufferRowLength;
		public uint BufferImageHeight;
		public VkImageSubresourceLayers ImageSubresource;
		/// <summary>
		/// Specified in pixels for both compressed and uncompressed images
		/// </summary>
		public VkOffset3D ImageOffset;
		/// <summary>
		/// Specified in pixels for both compressed and uncompressed images
		/// </summary>
		public VkExtent3D ImageExtent;
	}

	public unsafe partial struct VkImageResolve
	{
		public VkImageSubresourceLayers SrcSubresource;
		public VkOffset3D SrcOffset;
		public VkImageSubresourceLayers DstSubresource;
		public VkOffset3D DstOffset;
		public VkExtent3D Extent;
	}

	public unsafe partial struct VkShaderModuleCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkShaderModuleCreateFlags flags;
		public UIntPtr codeSize;
		public uint* pCode;
	}

	public unsafe partial struct VkDescriptorSetLayoutBinding
	{
		public uint binding;
		public VkDescriptorType descriptorType;
		public uint descriptorCount;
		public VkShaderStageFlags stageFlags;
		public IntPtr pImmutableSamplers;
	}

	public unsafe partial struct VkDescriptorSetLayoutCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkDescriptorSetLayoutCreateFlags flags;
		public uint bindingCount;
		public VkDescriptorSetLayoutBinding* pBindings;
	}

	public unsafe partial struct VkDescriptorPoolSize
	{
		public VkDescriptorType Type;
		public uint DescriptorCount;
	}

	public unsafe partial struct VkDescriptorPoolCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkDescriptorPoolCreateFlags flags;
		public uint maxSets;
		public uint poolSizeCount;
		public IntPtr pPoolSizes;
	}

	public unsafe partial struct VkDescriptorSetAllocateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong descriptorPool;
		public uint descriptorSetCount;
		public IntPtr pSetLayouts;
	}

	public unsafe partial struct VkSpecializationMapEntry
	{
		/// <summary>
		/// The SpecConstant ID specified in the BIL
		/// </summary>
		public uint ConstantID;
		/// <summary>
		/// Offset of the value in the data block
		/// </summary>
		public uint Offset;
		/// <summary>
		/// Size in bytes of the SpecConstant
		/// </summary>
		public UIntPtr Size;
	}

	public unsafe partial struct VkSpecializationInfo
	{
		public uint mapEntryCount;
		public IntPtr pMapEntries;
		public UIntPtr dataSize;
		public IntPtr pData;
	}

	public unsafe partial struct VkPipelineShaderStageCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkPipelineShaderStageCreateFlags flags;
		public VkShaderStageFlags stage;
		public ulong module;
		public IntPtr pName;
		public VkSpecializationInfo* pSpecializationInfo;
	}

	public unsafe partial struct VkComputePipelineCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkPipelineCreateFlags flags;
		public VkPipelineShaderStageCreateInfo stage;
		public ulong layout;
		public ulong basePipelineHandle;
		public int basePipelineIndex;
	}

	public unsafe partial struct VkVertexInputBindingDescription
	{
		/// <summary>
		/// Vertex buffer binding id
		/// </summary>
		public uint Binding;
		/// <summary>
		/// Distance between vertices in bytes (0 = no advancement)
		/// </summary>
		public uint Stride;
		/// <summary>
		/// The rate at which the vertex data is consumed
		/// </summary>
		public VkVertexInputRate InputRate;
	}

	public unsafe partial struct VkVertexInputAttributeDescription
	{
		/// <summary>
		/// location of the shader vertex attrib
		/// </summary>
		public uint Location;
		/// <summary>
		/// Vertex buffer binding id
		/// </summary>
		public uint Binding;
		/// <summary>
		/// format of source data
		/// </summary>
		public VkFormat Format;
		/// <summary>
		/// Offset of first element in bytes from base of vertex
		/// </summary>
		public uint Offset;
	}

	public unsafe partial struct VkPipelineVertexInputStateCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public uint vertexBindingDescriptionCount;
		public IntPtr pVertexBindingDescriptions;
		public uint vertexAttributeDescriptionCount;
		public IntPtr pVertexAttributeDescriptions;
	}

	public unsafe partial struct VkPipelineInputAssemblyStateCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public VkPrimitiveTopology topology;
		public RawBool primitiveRestartEnable;
	}

	public unsafe partial struct VkPipelineTessellationStateCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public uint patchControlPoints;
	}

	public unsafe partial struct VkPipelineViewportStateCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public uint viewportCount;
		public IntPtr pViewports;
		public uint scissorCount;
		public IntPtr pScissors;
	}

	public unsafe partial struct VkPipelineRasterizationStateCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public RawBool depthClampEnable;
		public RawBool rasterizerDiscardEnable;
		public VkPolygonMode polygonMode;
		public VkCullModeFlags cullMode;
		public VkFrontFace frontFace;
		public RawBool depthBiasEnable;
		public float depthBiasConstantFactor;
		public float depthBiasClamp;
		public float depthBiasSlopeFactor;
		public float lineWidth;
	}

	public unsafe partial struct VkPipelineMultisampleStateCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public VkSampleCountFlags rasterizationSamples;
		public RawBool sampleShadingEnable;
		public float minSampleShading;
		public uint* pSampleMask;
		public RawBool alphaToCoverageEnable;
		public RawBool alphaToOneEnable;
	}

	public unsafe partial struct VkPipelineColorBlendAttachmentState
	{
		public RawBool BlendEnable;
		public VkBlendFactor SrcColorBlendFactor;
		public VkBlendFactor DstColorBlendFactor;
		public VkBlendOp ColorBlendOp;
		public VkBlendFactor SrcAlphaBlendFactor;
		public VkBlendFactor DstAlphaBlendFactor;
		public VkBlendOp AlphaBlendOp;
		public VkColorComponentFlags ColorWriteMask;
	}

	public unsafe partial struct VkPipelineColorBlendStateCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public RawBool logicOpEnable;
		public VkLogicOp logicOp;
		public uint attachmentCount;
		public IntPtr pAttachments;
		public float blendConstants;
	}

	public unsafe partial struct VkPipelineDynamicStateCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public uint dynamicStateCount;
		public VkDynamicState* pDynamicStates;
	}

	public unsafe partial struct VkStencilOpState
	{
		public VkStencilOp FailOp;
		public VkStencilOp PassOp;
		public VkStencilOp DepthFailOp;
		public VkCompareOp CompareOp;
		public uint CompareMask;
		public uint WriteMask;
		public uint Reference;
	}

	public unsafe partial struct VkPipelineDepthStencilStateCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public RawBool depthTestEnable;
		public RawBool depthWriteEnable;
		public VkCompareOp depthCompareOp;
		public RawBool depthBoundsTestEnable;
		public RawBool stencilTestEnable;
		public VkStencilOpState front;
		public VkStencilOpState back;
		public float minDepthBounds;
		public float maxDepthBounds;
	}

	public unsafe partial struct VkGraphicsPipelineCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkPipelineCreateFlags flags;
		public uint stageCount;
		public VkPipelineShaderStageCreateInfo* pStages;
		public VkPipelineVertexInputStateCreateInfo* pVertexInputState;
		public VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState;
		public VkPipelineTessellationStateCreateInfo* pTessellationState;
		public VkPipelineViewportStateCreateInfo* pViewportState;
		public VkPipelineRasterizationStateCreateInfo* pRasterizationState;
		public VkPipelineMultisampleStateCreateInfo* pMultisampleState;
		public VkPipelineDepthStencilStateCreateInfo* pDepthStencilState;
		public VkPipelineColorBlendStateCreateInfo* pColorBlendState;
		public VkPipelineDynamicStateCreateInfo* pDynamicState;
		public ulong layout;
		public ulong renderPass;
		public uint subpass;
		public ulong basePipelineHandle;
		public int basePipelineIndex;
	}

	public unsafe partial struct VkPipelineCacheCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public UIntPtr initialDataSize;
		public IntPtr pInitialData;
	}

	public unsafe partial struct VkPushConstantRange
	{
		/// <summary>
		/// Which stages use the range
		/// </summary>
		public VkShaderStageFlags StageFlags;
		/// <summary>
		/// Start of the range, in bytes
		/// </summary>
		public uint Offset;
		/// <summary>
		/// Size of the range, in bytes
		/// </summary>
		public uint Size;
	}

	public unsafe partial struct VkPipelineLayoutCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public uint setLayoutCount;
		public IntPtr pSetLayouts;
		public uint pushConstantRangeCount;
		public IntPtr pPushConstantRanges;
	}

	public unsafe partial struct VkSamplerCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkSamplerCreateFlags flags;
		public VkFilter magFilter;
		public VkFilter minFilter;
		public VkSamplerMipmapMode mipmapMode;
		public VkSamplerAddressMode addressModeU;
		public VkSamplerAddressMode addressModeV;
		public VkSamplerAddressMode addressModeW;
		public float mipLodBias;
		public RawBool anisotropyEnable;
		public float maxAnisotropy;
		public RawBool compareEnable;
		public VkCompareOp compareOp;
		public float minLod;
		public float maxLod;
		public VkBorderColor borderColor;
		public RawBool unnormalizedCoordinates;
	}

	public unsafe partial struct VkCommandPoolCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkCommandPoolCreateFlags flags;
		public uint queueFamilyIndex;
	}

	public unsafe partial struct VkCommandBufferAllocateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong commandPool;
		public VkCommandBufferLevel level;
		public uint commandBufferCount;
	}

	public unsafe partial struct VkCommandBufferInheritanceInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong renderPass;
		public uint subpass;
		public ulong framebuffer;
		public RawBool occlusionQueryEnable;
		public VkQueryControlFlags queryFlags;
		public VkQueryPipelineStatisticFlags pipelineStatistics;
	}

	public unsafe partial struct VkCommandBufferBeginInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkCommandBufferUsageFlags flags;
		public VkCommandBufferInheritanceInfo* pInheritanceInfo;
	}

	public unsafe partial struct VkRenderPassBeginInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong renderPass;
		public ulong framebuffer;
		public VkRect2D renderArea;
		public uint clearValueCount;
		public VkClearValue* pClearValues;
	}

	public unsafe partial struct VkClearDepthStencilValue
	{
		public float Depth;
		public uint Stencil;
	}

	public unsafe partial struct VkClearAttachment
	{
		public VkImageAspectFlags AspectMask;
		public uint ColorAttachment;
		public VkClearValue ClearValue;
	}

	public unsafe partial struct VkAttachmentDescription
	{
		public VkAttachmentDescriptionFlags Flags;
		public VkFormat Format;
		public VkSampleCountFlags Samples;
		/// <summary>
		/// Load operation for color or depth data
		/// </summary>
		public VkAttachmentLoadOp LoadOp;
		/// <summary>
		/// Store operation for color or depth data
		/// </summary>
		public VkAttachmentStoreOp StoreOp;
		/// <summary>
		/// Load operation for stencil data
		/// </summary>
		public VkAttachmentLoadOp StencilLoadOp;
		/// <summary>
		/// Store operation for stencil data
		/// </summary>
		public VkAttachmentStoreOp StencilStoreOp;
		public VkImageLayout InitialLayout;
		public VkImageLayout FinalLayout;
	}

	public unsafe partial struct VkAttachmentReference
	{
		public uint Attachment;
		public VkImageLayout Layout;
	}

	public unsafe partial struct VkSubpassDescription
	{
		public VkSubpassDescriptionFlags flags;
		public VkPipelineBindPoint pipelineBindPoint;
		public uint inputAttachmentCount;
		public IntPtr pInputAttachments;
		public uint colorAttachmentCount;
		public IntPtr pColorAttachments;
		public IntPtr pResolveAttachments;
		public IntPtr pDepthStencilAttachment;
		public uint preserveAttachmentCount;
		public uint* pPreserveAttachments;
	}

	public unsafe partial struct VkSubpassDependency
	{
		public uint SrcSubpass;
		public uint DstSubpass;
		public VkPipelineStageFlags SrcStageMask;
		public VkPipelineStageFlags DstStageMask;
		/// <summary>
		/// Memory accesses from the source of the dependency to synchronize
		/// </summary>
		public VkAccessFlags SrcAccessMask;
		/// <summary>
		/// Memory accesses from the destination of the dependency to synchronize
		/// </summary>
		public VkAccessFlags DstAccessMask;
		public VkDependencyFlags DependencyFlags;
	}

	public unsafe partial struct VkRenderPassCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkRenderPassCreateFlags flags;
		public uint attachmentCount;
		public IntPtr pAttachments;
		public uint subpassCount;
		public VkSubpassDescription* pSubpasses;
		public uint dependencyCount;
		public IntPtr pDependencies;
	}

	public unsafe partial struct VkEventCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
	}

	public unsafe partial struct VkFenceCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkFenceCreateFlags flags;
	}

	public unsafe partial struct VkPhysicalDeviceFeatures
	{
		/// <summary>
		/// out of bounds buffer accesses are well defined
		/// </summary>
		public RawBool RobustBufferAccess;
		/// <summary>
		/// full 32-bit range of indices for indexed draw calls
		/// </summary>
		public RawBool FullDrawIndexUint32;
		/// <summary>
		/// image views which are arrays of cube maps
		/// </summary>
		public RawBool ImageCubeArray;
		/// <summary>
		/// blending operations are controlled per-attachment
		/// </summary>
		public RawBool IndependentBlend;
		/// <summary>
		/// geometry stage
		/// </summary>
		public RawBool GeometryShader;
		/// <summary>
		/// tessellation control and evaluation stage
		/// </summary>
		public RawBool TessellationShader;
		/// <summary>
		/// per-sample shading and interpolation
		/// </summary>
		public RawBool SampleRateShading;
		/// <summary>
		/// blend operations which take two sources
		/// </summary>
		public RawBool DualSrcBlend;
		/// <summary>
		/// logic operations
		/// </summary>
		public RawBool LogicOp;
		/// <summary>
		/// multi draw indirect
		/// </summary>
		public RawBool MultiDrawIndirect;
		/// <summary>
		/// indirect draws can use non-zero firstInstance
		/// </summary>
		public RawBool DrawIndirectFirstInstance;
		/// <summary>
		/// depth clamping
		/// </summary>
		public RawBool DepthClamp;
		/// <summary>
		/// depth bias clamping
		/// </summary>
		public RawBool DepthBiasClamp;
		/// <summary>
		/// point and wireframe fill modes
		/// </summary>
		public RawBool FillModeNonSolid;
		/// <summary>
		/// depth bounds test
		/// </summary>
		public RawBool DepthBounds;
		/// <summary>
		/// lines with width greater than 1
		/// </summary>
		public RawBool WideLines;
		/// <summary>
		/// points with size greater than 1
		/// </summary>
		public RawBool LargePoints;
		/// <summary>
		/// the fragment alpha component can be forced to maximum representable alpha value
		/// </summary>
		public RawBool AlphaToOne;
		/// <summary>
		/// viewport arrays
		/// </summary>
		public RawBool MultiViewport;
		/// <summary>
		/// anisotropic sampler filtering
		/// </summary>
		public RawBool SamplerAnisotropy;
		/// <summary>
		/// ETC texture compression formats
		/// </summary>
		public RawBool TextureCompressionETC2;
		/// <summary>
		/// ASTC LDR texture compression formats
		/// </summary>
		public RawBool TextureCompressionASTC_LDR;
		/// <summary>
		/// BC1-7 texture compressed formats
		/// </summary>
		public RawBool TextureCompressionBC;
		/// <summary>
		/// precise occlusion queries returning actual sample counts
		/// </summary>
		public RawBool OcclusionQueryPrecise;
		/// <summary>
		/// pipeline statistics query
		/// </summary>
		public RawBool PipelineStatisticsQuery;
		/// <summary>
		/// stores and atomic ops on storage buffers and images are supported in vertex, tessellation, and geometry stages
		/// </summary>
		public RawBool VertexPipelineStoresAndAtomics;
		/// <summary>
		/// stores and atomic ops on storage buffers and images are supported in the fragment stage
		/// </summary>
		public RawBool FragmentStoresAndAtomics;
		/// <summary>
		/// tessellation and geometry stages can export point size
		/// </summary>
		public RawBool ShaderTessellationAndGeometryPointSize;
		/// <summary>
		/// image gather with run-time values and independent offsets
		/// </summary>
		public RawBool ShaderImageGatherExtended;
		/// <summary>
		/// the extended set of formats can be used for storage images
		/// </summary>
		public RawBool ShaderStorageImageExtendedFormats;
		/// <summary>
		/// multisample images can be used for storage images
		/// </summary>
		public RawBool ShaderStorageImageMultisample;
		/// <summary>
		/// read from storage image does not require format qualifier
		/// </summary>
		public RawBool ShaderStorageImageReadWithoutFormat;
		/// <summary>
		/// write to storage image does not require format qualifier
		/// </summary>
		public RawBool ShaderStorageImageWriteWithoutFormat;
		/// <summary>
		/// arrays of uniform buffers can be accessed with dynamically uniform indices
		/// </summary>
		public RawBool ShaderUniformBufferArrayDynamicIndexing;
		/// <summary>
		/// arrays of sampled images can be accessed with dynamically uniform indices
		/// </summary>
		public RawBool ShaderSampledImageArrayDynamicIndexing;
		/// <summary>
		/// arrays of storage buffers can be accessed with dynamically uniform indices
		/// </summary>
		public RawBool ShaderStorageBufferArrayDynamicIndexing;
		/// <summary>
		/// arrays of storage images can be accessed with dynamically uniform indices
		/// </summary>
		public RawBool ShaderStorageImageArrayDynamicIndexing;
		/// <summary>
		/// clip distance in shaders
		/// </summary>
		public RawBool ShaderClipDistance;
		/// <summary>
		/// cull distance in shaders
		/// </summary>
		public RawBool ShaderCullDistance;
		/// <summary>
		/// 64-bit floats (doubles) in shaders
		/// </summary>
		public RawBool ShaderFloat64;
		/// <summary>
		/// 64-bit integers in shaders
		/// </summary>
		public RawBool ShaderInt64;
		/// <summary>
		/// 16-bit integers in shaders
		/// </summary>
		public RawBool ShaderInt16;
		/// <summary>
		/// shader can use texture operations that return resource residency information (requires sparseNonResident support)
		/// </summary>
		public RawBool ShaderResourceResidency;
		/// <summary>
		/// shader can use texture operations that specify minimum resource LOD
		/// </summary>
		public RawBool ShaderResourceMinLod;
		/// <summary>
		/// Sparse resources support: Resource memory can be managed at opaque page level rather than object level
		/// </summary>
		public RawBool SparseBinding;
		/// <summary>
		/// Sparse resources support: GPU can access partially resident buffers 
		/// </summary>
		public RawBool SparseResidencyBuffer;
		/// <summary>
		/// Sparse resources support: GPU can access partially resident 2D (non-MSAA non-depth/stencil) images 
		/// </summary>
		public RawBool SparseResidencyImage2D;
		/// <summary>
		/// Sparse resources support: GPU can access partially resident 3D images 
		/// </summary>
		public RawBool SparseResidencyImage3D;
		/// <summary>
		/// Sparse resources support: GPU can access partially resident MSAA 2D images with 2 samples
		/// </summary>
		public RawBool SparseResidency2Samples;
		/// <summary>
		/// Sparse resources support: GPU can access partially resident MSAA 2D images with 4 samples
		/// </summary>
		public RawBool SparseResidency4Samples;
		/// <summary>
		/// Sparse resources support: GPU can access partially resident MSAA 2D images with 8 samples
		/// </summary>
		public RawBool SparseResidency8Samples;
		/// <summary>
		/// Sparse resources support: GPU can access partially resident MSAA 2D images with 16 samples
		/// </summary>
		public RawBool SparseResidency16Samples;
		/// <summary>
		/// Sparse resources support: GPU can correctly access data aliased into multiple locations (opt-in)
		/// </summary>
		public RawBool SparseResidencyAliased;
		/// <summary>
		/// multisample rate must be the same for all pipelines in a subpass
		/// </summary>
		public RawBool VariableMultisampleRate;
		/// <summary>
		/// Queries may be inherited from primary to secondary command buffers
		/// </summary>
		public RawBool InheritedQueries;
	}

	public unsafe partial struct VkPhysicalDeviceSparseProperties
	{
		/// <summary>
		/// Sparse resources support: GPU will access all 2D (single sample) sparse resources using the standard sparse image block shapes (based on pixel format)
		/// </summary>
		public RawBool ResidencyStandard2DBlockShape;
		/// <summary>
		/// Sparse resources support: GPU will access all 2D (multisample) sparse resources using the standard sparse image block shapes (based on pixel format)
		/// </summary>
		public RawBool ResidencyStandard2DMultisampleBlockShape;
		/// <summary>
		/// Sparse resources support: GPU will access all 3D sparse resources using the standard sparse image block shapes (based on pixel format)
		/// </summary>
		public RawBool ResidencyStandard3DBlockShape;
		/// <summary>
		/// Sparse resources support: Images with mip level dimensions that are NOT a multiple of the sparse image block dimensions will be placed in the mip tail
		/// </summary>
		public RawBool ResidencyAlignedMipSize;
		/// <summary>
		/// Sparse resources support: GPU can consistently access non-resident regions of a resource, all reads return as if data is 0, writes are discarded
		/// </summary>
		public RawBool ResidencyNonResidentStrict;
	}

	public unsafe partial struct VkPhysicalDeviceLimits
	{
		public uint maxImageDimension1D;
		public uint maxImageDimension2D;
		public uint maxImageDimension3D;
		public uint maxImageDimensionCube;
		public uint maxImageArrayLayers;
		public uint maxTexelBufferElements;
		public uint maxUniformBufferRange;
		public uint maxStorageBufferRange;
		public uint maxPushConstantsSize;
		public uint maxMemoryAllocationCount;
		public uint maxSamplerAllocationCount;
		public ulong bufferImageGranularity;
		public ulong sparseAddressSpaceSize;
		public uint maxBoundDescriptorSets;
		public uint maxPerStageDescriptorSamplers;
		public uint maxPerStageDescriptorUniformBuffers;
		public uint maxPerStageDescriptorStorageBuffers;
		public uint maxPerStageDescriptorSampledImages;
		public uint maxPerStageDescriptorStorageImages;
		public uint maxPerStageDescriptorInputAttachments;
		public uint maxPerStageResources;
		public uint maxDescriptorSetSamplers;
		public uint maxDescriptorSetUniformBuffers;
		public uint maxDescriptorSetUniformBuffersDynamic;
		public uint maxDescriptorSetStorageBuffers;
		public uint maxDescriptorSetStorageBuffersDynamic;
		public uint maxDescriptorSetSampledImages;
		public uint maxDescriptorSetStorageImages;
		public uint maxDescriptorSetInputAttachments;
		public uint maxVertexInputAttributes;
		public uint maxVertexInputBindings;
		public uint maxVertexInputAttributeOffset;
		public uint maxVertexInputBindingStride;
		public uint maxVertexOutputComponents;
		public uint maxTessellationGenerationLevel;
		public uint maxTessellationPatchSize;
		public uint maxTessellationControlPerVertexInputComponents;
		public uint maxTessellationControlPerVertexOutputComponents;
		public uint maxTessellationControlPerPatchOutputComponents;
		public uint maxTessellationControlTotalOutputComponents;
		public uint maxTessellationEvaluationInputComponents;
		public uint maxTessellationEvaluationOutputComponents;
		public uint maxGeometryShaderInvocations;
		public uint maxGeometryInputComponents;
		public uint maxGeometryOutputComponents;
		public uint maxGeometryOutputVertices;
		public uint maxGeometryTotalOutputComponents;
		public uint maxFragmentInputComponents;
		public uint maxFragmentOutputAttachments;
		public uint maxFragmentDualSrcAttachments;
		public uint maxFragmentCombinedOutputResources;
		public uint maxComputeSharedMemorySize;
		public uint maxComputeWorkGroupCount;
		public uint maxComputeWorkGroupInvocations;
		public uint maxComputeWorkGroupSize;
		public uint subPixelPrecisionBits;
		public uint subTexelPrecisionBits;
		public uint mipmapPrecisionBits;
		public uint maxDrawIndexedIndexValue;
		public uint maxDrawIndirectCount;
		public float maxSamplerLodBias;
		public float maxSamplerAnisotropy;
		public uint maxViewports;
		public uint maxViewportDimensions;
		public float viewportBoundsRange;
		public uint viewportSubPixelBits;
		public UIntPtr minMemoryMapAlignment;
		public ulong minTexelBufferOffsetAlignment;
		public ulong minUniformBufferOffsetAlignment;
		public ulong minStorageBufferOffsetAlignment;
		public int minTexelOffset;
		public uint maxTexelOffset;
		public int minTexelGatherOffset;
		public uint maxTexelGatherOffset;
		public float minInterpolationOffset;
		public float maxInterpolationOffset;
		public uint subPixelInterpolationOffsetBits;
		public uint maxFramebufferWidth;
		public uint maxFramebufferHeight;
		public uint maxFramebufferLayers;
		public VkSampleCountFlags framebufferColorSampleCounts;
		public VkSampleCountFlags framebufferDepthSampleCounts;
		public VkSampleCountFlags framebufferStencilSampleCounts;
		public VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
		public uint maxColorAttachments;
		public VkSampleCountFlags sampledImageColorSampleCounts;
		public VkSampleCountFlags sampledImageIntegerSampleCounts;
		public VkSampleCountFlags sampledImageDepthSampleCounts;
		public VkSampleCountFlags sampledImageStencilSampleCounts;
		public VkSampleCountFlags storageImageSampleCounts;
		public uint maxSampleMaskWords;
		public RawBool timestampComputeAndGraphics;
		public float timestampPeriod;
		public uint maxClipDistances;
		public uint maxCullDistances;
		public uint maxCombinedClipAndCullDistances;
		public uint discreteQueuePriorities;
		public float pointSizeRange;
		public float lineWidthRange;
		public float pointSizeGranularity;
		public float lineWidthGranularity;
		public RawBool strictLines;
		public RawBool standardSampleLocations;
		public ulong optimalBufferCopyOffsetAlignment;
		public ulong optimalBufferCopyRowPitchAlignment;
		public ulong nonCoherentAtomSize;
	}

	public unsafe partial struct VkSemaphoreCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
	}

	public unsafe partial struct VkQueryPoolCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public VkQueryType queryType;
		public uint queryCount;
		public VkQueryPipelineStatisticFlags pipelineStatistics;
	}

	public unsafe partial struct VkFramebufferCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkFramebufferCreateFlags flags;
		public ulong renderPass;
		public uint attachmentCount;
		public IntPtr pAttachments;
		public uint width;
		public uint height;
		public uint layers;
	}

	public unsafe partial struct VkDrawIndirectCommand
	{
		public uint VertexCount;
		public uint InstanceCount;
		public uint FirstVertex;
		public uint FirstInstance;
	}

	public unsafe partial struct VkDrawIndexedIndirectCommand
	{
		public uint IndexCount;
		public uint InstanceCount;
		public uint FirstIndex;
		public int VertexOffset;
		public uint FirstInstance;
	}

	public unsafe partial struct VkDispatchIndirectCommand
	{
		public uint X;
		public uint Y;
		public uint Z;
	}

	public unsafe partial struct VkSubmitInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint waitSemaphoreCount;
		public IntPtr pWaitSemaphores;
		public VkPipelineStageFlags* pWaitDstStageMask;
		public uint commandBufferCount;
		public IntPtr pCommandBuffers;
		public uint signalSemaphoreCount;
		public IntPtr pSignalSemaphores;
	}

	public unsafe partial struct VkDisplayPropertiesKHR
	{
		public ulong display;
		public IntPtr displayName;
		public VkExtent2D physicalDimensions;
		public VkExtent2D physicalResolution;
		public VkSurfaceTransformFlagsKHR supportedTransforms;
		public RawBool planeReorderPossible;
		public RawBool persistentContent;
	}

	public unsafe partial struct VkDisplayPlanePropertiesKHR
	{
		/// <summary>
		/// Display the plane is currently associated with.  Will be VK_NULL_HANDLE if the plane is not in use.
		/// </summary>
		public VkDisplayKHR CurrentDisplay;
		/// <summary>
		/// Current z-order of the plane.
		/// </summary>
		public uint CurrentStackIndex;
	}

	public unsafe partial struct VkDisplayModeParametersKHR
	{
		/// <summary>
		/// Visible scanout region.
		/// </summary>
		public VkExtent2D VisibleRegion;
		/// <summary>
		/// Number of times per second the display is updated.
		/// </summary>
		public uint RefreshRate;
	}

	public unsafe partial struct VkDisplayModePropertiesKHR
	{
		/// <summary>
		/// Handle of this display mode.
		/// </summary>
		public VkDisplayModeKHR DisplayMode;
		/// <summary>
		/// The parameters this mode uses.
		/// </summary>
		public VkDisplayModeParametersKHR Parameters;
	}

	public unsafe partial struct VkDisplayModeCreateInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public VkDisplayModeParametersKHR parameters;
	}

	public unsafe partial struct VkDisplayPlaneCapabilitiesKHR
	{
		/// <summary>
		/// Types of alpha blending supported, if any.
		/// </summary>
		public VkDisplayPlaneAlphaFlagsKHR SupportedAlpha;
		/// <summary>
		/// Does the plane have any position and extent restrictions?
		/// </summary>
		public VkOffset2D MinSrcPosition;
		public VkOffset2D MaxSrcPosition;
		public VkExtent2D MinSrcExtent;
		public VkExtent2D MaxSrcExtent;
		public VkOffset2D MinDstPosition;
		public VkOffset2D MaxDstPosition;
		public VkExtent2D MinDstExtent;
		public VkExtent2D MaxDstExtent;
	}

	public unsafe partial struct VkDisplaySurfaceCreateInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public ulong displayMode;
		public uint planeIndex;
		public uint planeStackIndex;
		public VkSurfaceTransformFlagsKHR transform;
		public float globalAlpha;
		public VkDisplayPlaneAlphaFlagsKHR alphaMode;
		public VkExtent2D imageExtent;
	}

	public unsafe partial struct VkDisplayPresentInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkRect2D srcRect;
		public VkRect2D dstRect;
		public RawBool persistent;
	}

	public unsafe partial struct VkSurfaceCapabilitiesKHR
	{
		/// <summary>
		/// Supported minimum number of images for the surface
		/// </summary>
		public uint MinImageCount;
		/// <summary>
		/// Supported maximum number of images for the surface, 0 for unlimited
		/// </summary>
		public uint MaxImageCount;
		/// <summary>
		/// Current image width and height for the surface, (0, 0) if undefined
		/// </summary>
		public VkExtent2D CurrentExtent;
		/// <summary>
		/// Supported minimum image width and height for the surface
		/// </summary>
		public VkExtent2D MinImageExtent;
		/// <summary>
		/// Supported maximum image width and height for the surface
		/// </summary>
		public VkExtent2D MaxImageExtent;
		/// <summary>
		/// Supported maximum number of image layers for the surface
		/// </summary>
		public uint MaxImageArrayLayers;
		/// <summary>
		/// 1 or more bits representing the transforms supported
		/// </summary>
		public VkSurfaceTransformFlagsKHR SupportedTransforms;
		/// <summary>
		/// The surface's current transform relative to the device's natural orientation
		/// </summary>
		public VkSurfaceTransformFlagsKHR CurrentTransform;
		/// <summary>
		/// 1 or more bits representing the alpha compositing modes supported
		/// </summary>
		public VkCompositeAlphaFlagsKHR SupportedCompositeAlpha;
		/// <summary>
		/// Supported image usage flags for the surface
		/// </summary>
		public VkImageUsageFlags SupportedUsageFlags;
	}

	public unsafe partial struct VkAndroidSurfaceCreateInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public IntPtr* window;
	}

	public unsafe partial struct VkWaylandSurfaceCreateInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public IntPtr* display;
		public IntPtr* surface;
	}

	public unsafe partial struct VkWin32SurfaceCreateInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public IntPtr hinstance;
		public IntPtr hwnd;
	}

	public unsafe partial struct VkXlibSurfaceCreateInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public IntPtr* dpy;
		public IntPtr window;
	}

	public unsafe partial struct VkXcbSurfaceCreateInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public IntPtr* connection;
		public IntPtr window;
	}

	public unsafe partial struct VkStreamDescriptorSurfaceCreateInfoGGP
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public IntPtr streamDescriptor;
	}

	public unsafe partial struct VkSurfaceFormatKHR
	{
		/// <summary>
		/// Supported pair of rendering format
		/// </summary>
		public VkFormat Format;
		/// <summary>
		/// and color space for the surface
		/// </summary>
		public VkColorSpaceKHR ColorSpace;
	}

	public unsafe partial struct VkSwapchainCreateInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkSwapchainCreateFlagsKHR flags;
		public ulong surface;
		public uint minImageCount;
		public VkFormat imageFormat;
		public VkColorSpaceKHR imageColorSpace;
		public VkExtent2D imageExtent;
		public uint imageArrayLayers;
		public VkImageUsageFlags imageUsage;
		public VkSharingMode imageSharingMode;
		public uint queueFamilyIndexCount;
		public uint* pQueueFamilyIndices;
		public VkSurfaceTransformFlagsKHR preTransform;
		public VkCompositeAlphaFlagsKHR compositeAlpha;
		public VkPresentModeKHR presentMode;
		public RawBool clipped;
		public ulong oldSwapchain;
	}

	public unsafe partial struct VkPresentInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint waitSemaphoreCount;
		public IntPtr pWaitSemaphores;
		public uint swapchainCount;
		public IntPtr pSwapchains;
		public uint* pImageIndices;
		public VkResult* pResults;
	}

	public unsafe partial struct VkDebugReportCallbackCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkDebugReportFlagsEXT flags;
		public IntPtr pfnCallback;
		public IntPtr pUserData;
	}

	public unsafe partial struct VkValidationFlagsEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint disabledValidationCheckCount;
		public VkValidationCheckEXT* pDisabledValidationChecks;
	}

	public unsafe partial struct VkValidationFeaturesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint enabledValidationFeatureCount;
		public VkValidationFeatureEnableEXT* pEnabledValidationFeatures;
		public uint disabledValidationFeatureCount;
		public VkValidationFeatureDisableEXT* pDisabledValidationFeatures;
	}

	public unsafe partial struct VkPipelineRasterizationStateRasterizationOrderAMD
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkRasterizationOrderAMD rasterizationOrder;
	}

	public unsafe partial struct VkDebugMarkerObjectNameInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkDebugReportObjectTypeEXT objectType;
		public ulong @object;
		public IntPtr pObjectName;
	}

	public unsafe partial struct VkDebugMarkerObjectTagInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkDebugReportObjectTypeEXT objectType;
		public ulong @object;
		public ulong tagName;
		public UIntPtr tagSize;
		public IntPtr pTag;
	}

	public unsafe partial struct VkDebugMarkerMarkerInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public IntPtr pMarkerName;
		public float color;
	}

	public unsafe partial struct VkDedicatedAllocationImageCreateInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool dedicatedAllocation;
	}

	public unsafe partial struct VkDedicatedAllocationBufferCreateInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool dedicatedAllocation;
	}

	public unsafe partial struct VkDedicatedAllocationMemoryAllocateInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong image;
		public ulong buffer;
	}

	public unsafe partial struct VkExternalImageFormatPropertiesNV
	{
		public VkImageFormatProperties ImageFormatProperties;
		public VkExternalMemoryFeatureFlagsNV ExternalMemoryFeatures;
		public VkExternalMemoryHandleTypeFlagsNV ExportFromImportedHandleTypes;
		public VkExternalMemoryHandleTypeFlagsNV CompatibleHandleTypes;
	}

	public unsafe partial struct VkExternalMemoryImageCreateInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExternalMemoryHandleTypeFlagsNV handleTypes;
	}

	public unsafe partial struct VkExportMemoryAllocateInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExternalMemoryHandleTypeFlagsNV handleTypes;
	}

	public unsafe partial struct VkImportMemoryWin32HandleInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExternalMemoryHandleTypeFlagsNV handleType;
		public IntPtr handle;
	}

	public unsafe partial struct VkExportMemoryWin32HandleInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public IntPtr* pAttributes;
		public uint dwAccess;
	}

	public unsafe partial struct VkWin32KeyedMutexAcquireReleaseInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint acquireCount;
		public IntPtr pAcquireSyncs;
		public ulong* pAcquireKeys;
		public uint* pAcquireTimeoutMilliseconds;
		public uint releaseCount;
		public IntPtr pReleaseSyncs;
		public ulong* pReleaseKeys;
	}

	public unsafe partial struct VkDeviceGeneratedCommandsFeaturesNVX
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool computeBindingPointSupport;
	}

	public unsafe partial struct VkDeviceGeneratedCommandsLimitsNVX
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint maxIndirectCommandsLayoutTokenCount;
		public uint maxObjectEntryCounts;
		public uint minSequenceCountBufferOffsetAlignment;
		public uint minSequenceIndexBufferOffsetAlignment;
		public uint minCommandsTokenBufferOffsetAlignment;
	}

	public unsafe partial struct VkIndirectCommandsTokenNVX
	{
		public VkIndirectCommandsTokenTypeNVX TokenType;
		/// <summary>
		/// buffer containing tableEntries and additional data for indirectCommands
		/// </summary>
		public VkBuffer Buffer;
		/// <summary>
		/// offset from the base address of the buffer
		/// </summary>
		public ulong Offset;
	}

	public unsafe partial struct VkIndirectCommandsLayoutTokenNVX
	{
		public VkIndirectCommandsTokenTypeNVX TokenType;
		/// <summary>
		/// Binding unit for vertex attribute / descriptor set, offset for pushconstants
		/// </summary>
		public uint BindingUnit;
		/// <summary>
		/// Number of variable dynamic values for descriptor set / push constants
		/// </summary>
		public uint DynamicCount;
		/// <summary>
		/// Rate the which the array is advanced per element (must be power of 2, minimum 1)
		/// </summary>
		public uint Divisor;
	}

	public unsafe partial struct VkIndirectCommandsLayoutCreateInfoNVX
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkPipelineBindPoint pipelineBindPoint;
		public VkIndirectCommandsLayoutUsageFlagsNVX flags;
		public uint tokenCount;
		public IntPtr pTokens;
	}

	public unsafe partial struct VkCmdProcessCommandsInfoNVX
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong objectTable;
		public ulong indirectCommandsLayout;
		public uint indirectCommandsTokenCount;
		public IntPtr pIndirectCommandsTokens;
		public uint maxSequencesCount;
		public IntPtr targetCommandBuffer;
		public ulong sequencesCountBuffer;
		public ulong sequencesCountOffset;
		public ulong sequencesIndexBuffer;
		public ulong sequencesIndexOffset;
	}

	public unsafe partial struct VkCmdReserveSpaceForCommandsInfoNVX
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong objectTable;
		public ulong indirectCommandsLayout;
		public uint maxSequencesCount;
	}

	public unsafe partial struct VkObjectTableCreateInfoNVX
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint objectCount;
		public VkObjectEntryTypeNVX* pObjectEntryTypes;
		public uint* pObjectEntryCounts;
		public VkObjectEntryUsageFlagsNVX* pObjectEntryUsageFlags;
		public uint maxUniformBuffersPerDescriptor;
		public uint maxStorageBuffersPerDescriptor;
		public uint maxStorageImagesPerDescriptor;
		public uint maxSampledImagesPerDescriptor;
		public uint maxPipelineLayouts;
	}

	public unsafe partial struct VkObjectTableEntryNVX
	{
		public VkObjectEntryTypeNVX Type;
		public VkObjectEntryUsageFlagsNVX Flags;
	}

	public unsafe partial struct VkObjectTablePipelineEntryNVX
	{
		public VkObjectEntryTypeNVX Type;
		public VkObjectEntryUsageFlagsNVX Flags;
		public VkPipeline Pipeline;
	}

	public unsafe partial struct VkObjectTableDescriptorSetEntryNVX
	{
		public VkObjectEntryTypeNVX Type;
		public VkObjectEntryUsageFlagsNVX Flags;
		public VkPipelineLayout PipelineLayout;
		public VkDescriptorSet DescriptorSet;
	}

	public unsafe partial struct VkObjectTableVertexBufferEntryNVX
	{
		public VkObjectEntryTypeNVX Type;
		public VkObjectEntryUsageFlagsNVX Flags;
		public VkBuffer Buffer;
	}

	public unsafe partial struct VkObjectTableIndexBufferEntryNVX
	{
		public VkObjectEntryTypeNVX Type;
		public VkObjectEntryUsageFlagsNVX Flags;
		public VkBuffer Buffer;
		public VkIndexType IndexType;
	}

	public unsafe partial struct VkObjectTablePushConstantEntryNVX
	{
		public VkObjectEntryTypeNVX Type;
		public VkObjectEntryUsageFlagsNVX Flags;
		public VkPipelineLayout PipelineLayout;
		public VkShaderStageFlags StageFlags;
	}

	public unsafe partial struct VkPhysicalDeviceFeatures2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkPhysicalDeviceFeatures features;
	}

	public unsafe partial struct VkPhysicalDeviceProperties2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkPhysicalDeviceProperties properties;
	}

	public unsafe partial struct VkFormatProperties2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkFormatProperties formatProperties;
	}

	public unsafe partial struct VkImageFormatProperties2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkImageFormatProperties imageFormatProperties;
	}

	public unsafe partial struct VkPhysicalDeviceImageFormatInfo2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkFormat format;
		public VkImageType type;
		public VkImageTiling tiling;
		public VkImageUsageFlags usage;
		public VkImageCreateFlags flags;
	}

	public unsafe partial struct VkQueueFamilyProperties2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkQueueFamilyProperties queueFamilyProperties;
	}

	public unsafe partial struct VkPhysicalDeviceMemoryProperties2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkPhysicalDeviceMemoryProperties memoryProperties;
	}

	public unsafe partial struct VkSparseImageFormatProperties2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkSparseImageFormatProperties properties;
	}

	public unsafe partial struct VkPhysicalDeviceSparseImageFormatInfo2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkFormat format;
		public VkImageType type;
		public VkSampleCountFlags samples;
		public VkImageUsageFlags usage;
		public VkImageTiling tiling;
	}

	public unsafe partial struct VkPhysicalDevicePushDescriptorPropertiesKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint maxPushDescriptors;
	}

	public unsafe partial struct VkConformanceVersion
	{
		public byte Major;
		public byte Minor;
		public byte Subminor;
		public byte Patch;
	}

	public unsafe partial struct VkPhysicalDeviceDriverProperties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkDriverId driverID;
		public fixed byte driverName[(int)Vulkan.MaxDriverNameSize];
		public fixed byte driverInfo[(int)Vulkan.MaxDriverInfoSize];
		public VkConformanceVersion conformanceVersion;
	}

	public unsafe partial struct VkPresentRegionsKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint swapchainCount;
		public VkPresentRegionKHR* pRegions;
	}

	public unsafe partial struct VkPresentRegionKHR
	{
		public uint rectangleCount;
		public IntPtr pRectangles;
	}

	public unsafe partial struct VkRectLayerKHR
	{
		/// <summary>
		/// upper-left corner of a rectangle that has not changed, in pixels of a presentation images
		/// </summary>
		public VkOffset2D Offset;
		/// <summary>
		/// Dimensions of a rectangle that has not changed, in pixels of a presentation images
		/// </summary>
		public VkExtent2D Extent;
		/// <summary>
		/// Layer of a swapchain's image(s), for stereoscopic-3D images
		/// </summary>
		public uint Layer;
	}

	public unsafe partial struct VkPhysicalDeviceVariablePointersFeatures
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool variablePointersStorageBuffer;
		public RawBool variablePointers;
	}

	public unsafe partial struct VkExternalMemoryProperties
	{
		public VkExternalMemoryFeatureFlags ExternalMemoryFeatures;
		public VkExternalMemoryHandleTypeFlags ExportFromImportedHandleTypes;
		public VkExternalMemoryHandleTypeFlags CompatibleHandleTypes;
	}

	public unsafe partial struct VkPhysicalDeviceExternalImageFormatInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExternalMemoryHandleTypeFlags handleType;
	}

	public unsafe partial struct VkExternalImageFormatProperties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExternalMemoryProperties externalMemoryProperties;
	}

	public unsafe partial struct VkPhysicalDeviceExternalBufferInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkBufferCreateFlags flags;
		public VkBufferUsageFlags usage;
		public VkExternalMemoryHandleTypeFlags handleType;
	}

	public unsafe partial struct VkExternalBufferProperties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExternalMemoryProperties externalMemoryProperties;
	}

	public unsafe partial struct VkPhysicalDeviceIDProperties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public fixed byte deviceUUID[(int)Vulkan.UuidSize];
		public fixed byte driverUUID[(int)Vulkan.UuidSize];
		public fixed byte deviceLUID[(int)Vulkan.LuidSize];
		public uint deviceNodeMask;
		public RawBool deviceLUIDValid;
	}

	public unsafe partial struct VkExternalMemoryImageCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExternalMemoryHandleTypeFlags handleTypes;
	}

	public unsafe partial struct VkExternalMemoryBufferCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExternalMemoryHandleTypeFlags handleTypes;
	}

	public unsafe partial struct VkExportMemoryAllocateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExternalMemoryHandleTypeFlags handleTypes;
	}

	public unsafe partial struct VkImportMemoryWin32HandleInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExternalMemoryHandleTypeFlags handleType;
		public IntPtr handle;
		public IntPtr name;
	}

	public unsafe partial struct VkExportMemoryWin32HandleInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public IntPtr* pAttributes;
		public uint dwAccess;
		public IntPtr name;
	}

	public unsafe partial struct VkMemoryWin32HandlePropertiesKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint memoryTypeBits;
	}

	public unsafe partial struct VkMemoryGetWin32HandleInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong memory;
		public VkExternalMemoryHandleTypeFlags handleType;
	}

	public unsafe partial struct VkImportMemoryFdInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExternalMemoryHandleTypeFlags handleType;
		public int fd;
	}

	public unsafe partial struct VkMemoryFdPropertiesKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint memoryTypeBits;
	}

	public unsafe partial struct VkMemoryGetFdInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong memory;
		public VkExternalMemoryHandleTypeFlags handleType;
	}

	public unsafe partial struct VkWin32KeyedMutexAcquireReleaseInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint acquireCount;
		public IntPtr pAcquireSyncs;
		public ulong* pAcquireKeys;
		public uint* pAcquireTimeouts;
		public uint releaseCount;
		public IntPtr pReleaseSyncs;
		public ulong* pReleaseKeys;
	}

	public unsafe partial struct VkPhysicalDeviceExternalSemaphoreInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExternalSemaphoreHandleTypeFlags handleType;
	}

	public unsafe partial struct VkExternalSemaphoreProperties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExternalSemaphoreHandleTypeFlags exportFromImportedHandleTypes;
		public VkExternalSemaphoreHandleTypeFlags compatibleHandleTypes;
		public VkExternalSemaphoreFeatureFlags externalSemaphoreFeatures;
	}

	public unsafe partial struct VkExportSemaphoreCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExternalSemaphoreHandleTypeFlags handleTypes;
	}

	public unsafe partial struct VkImportSemaphoreWin32HandleInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong semaphore;
		public VkSemaphoreImportFlags flags;
		public VkExternalSemaphoreHandleTypeFlags handleType;
		public IntPtr handle;
		public IntPtr name;
	}

	public unsafe partial struct VkExportSemaphoreWin32HandleInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public IntPtr* pAttributes;
		public uint dwAccess;
		public IntPtr name;
	}

	public unsafe partial struct VkD3D12FenceSubmitInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint waitSemaphoreValuesCount;
		public ulong* pWaitSemaphoreValues;
		public uint signalSemaphoreValuesCount;
		public ulong* pSignalSemaphoreValues;
	}

	public unsafe partial struct VkSemaphoreGetWin32HandleInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong semaphore;
		public VkExternalSemaphoreHandleTypeFlags handleType;
	}

	public unsafe partial struct VkImportSemaphoreFdInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong semaphore;
		public VkSemaphoreImportFlags flags;
		public VkExternalSemaphoreHandleTypeFlags handleType;
		public int fd;
	}

	public unsafe partial struct VkSemaphoreGetFdInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong semaphore;
		public VkExternalSemaphoreHandleTypeFlags handleType;
	}

	public unsafe partial struct VkPhysicalDeviceExternalFenceInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExternalFenceHandleTypeFlags handleType;
	}

	public unsafe partial struct VkExternalFenceProperties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExternalFenceHandleTypeFlags exportFromImportedHandleTypes;
		public VkExternalFenceHandleTypeFlags compatibleHandleTypes;
		public VkExternalFenceFeatureFlags externalFenceFeatures;
	}

	public unsafe partial struct VkExportFenceCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExternalFenceHandleTypeFlags handleTypes;
	}

	public unsafe partial struct VkImportFenceWin32HandleInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong fence;
		public VkFenceImportFlags flags;
		public VkExternalFenceHandleTypeFlags handleType;
		public IntPtr handle;
		public IntPtr name;
	}

	public unsafe partial struct VkExportFenceWin32HandleInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public IntPtr* pAttributes;
		public uint dwAccess;
		public IntPtr name;
	}

	public unsafe partial struct VkFenceGetWin32HandleInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong fence;
		public VkExternalFenceHandleTypeFlags handleType;
	}

	public unsafe partial struct VkImportFenceFdInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong fence;
		public VkFenceImportFlags flags;
		public VkExternalFenceHandleTypeFlags handleType;
		public int fd;
	}

	public unsafe partial struct VkFenceGetFdInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong fence;
		public VkExternalFenceHandleTypeFlags handleType;
	}

	public unsafe partial struct VkPhysicalDeviceMultiviewFeatures
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool multiview;
		public RawBool multiviewGeometryShader;
		public RawBool multiviewTessellationShader;
	}

	public unsafe partial struct VkPhysicalDeviceMultiviewProperties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint maxMultiviewViewCount;
		public uint maxMultiviewInstanceIndex;
	}

	public unsafe partial struct VkRenderPassMultiviewCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint subpassCount;
		public uint* pViewMasks;
		public uint dependencyCount;
		public int* pViewOffsets;
		public uint correlationMaskCount;
		public uint* pCorrelationMasks;
	}

	public unsafe partial struct VkSurfaceCapabilities2EXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint minImageCount;
		public uint maxImageCount;
		public VkExtent2D currentExtent;
		public VkExtent2D minImageExtent;
		public VkExtent2D maxImageExtent;
		public uint maxImageArrayLayers;
		public VkSurfaceTransformFlagsKHR supportedTransforms;
		public VkSurfaceTransformFlagsKHR currentTransform;
		public VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
		public VkImageUsageFlags supportedUsageFlags;
		public VkSurfaceCounterFlagsEXT supportedSurfaceCounters;
	}

	public unsafe partial struct VkDisplayPowerInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkDisplayPowerStateEXT powerState;
	}

	public unsafe partial struct VkDeviceEventInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkDeviceEventTypeEXT deviceEvent;
	}

	public unsafe partial struct VkDisplayEventInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkDisplayEventTypeEXT displayEvent;
	}

	public unsafe partial struct VkSwapchainCounterCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkSurfaceCounterFlagsEXT surfaceCounters;
	}

	public unsafe partial struct VkPhysicalDeviceGroupProperties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint physicalDeviceCount;
		public IntPtr physicalDevices_0;
		public IntPtr physicalDevices_1;
		public IntPtr physicalDevices_2;
		public IntPtr physicalDevices_3;
		public IntPtr physicalDevices_4;
		public IntPtr physicalDevices_5;
		public IntPtr physicalDevices_6;
		public IntPtr physicalDevices_7;
		public IntPtr physicalDevices_8;
		public IntPtr physicalDevices_9;
		public IntPtr physicalDevices_10;
		public IntPtr physicalDevices_11;
		public IntPtr physicalDevices_12;
		public IntPtr physicalDevices_13;
		public IntPtr physicalDevices_14;
		public IntPtr physicalDevices_15;
		public IntPtr physicalDevices_16;
		public IntPtr physicalDevices_17;
		public IntPtr physicalDevices_18;
		public IntPtr physicalDevices_19;
		public IntPtr physicalDevices_20;
		public IntPtr physicalDevices_21;
		public IntPtr physicalDevices_22;
		public IntPtr physicalDevices_23;
		public IntPtr physicalDevices_24;
		public IntPtr physicalDevices_25;
		public IntPtr physicalDevices_26;
		public IntPtr physicalDevices_27;
		public IntPtr physicalDevices_28;
		public IntPtr physicalDevices_29;
		public IntPtr physicalDevices_30;
		public IntPtr physicalDevices_31;
		public RawBool subsetAllocation;
	}

	public unsafe partial struct VkMemoryAllocateFlagsInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkMemoryAllocateFlags flags;
		public uint deviceMask;
	}

	public unsafe partial struct VkBindBufferMemoryInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong buffer;
		public ulong memory;
		public ulong memoryOffset;
	}

	public unsafe partial struct VkBindBufferMemoryDeviceGroupInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint deviceIndexCount;
		public uint* pDeviceIndices;
	}

	public unsafe partial struct VkBindImageMemoryInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong image;
		public ulong memory;
		public ulong memoryOffset;
	}

	public unsafe partial struct VkBindImageMemoryDeviceGroupInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint deviceIndexCount;
		public uint* pDeviceIndices;
		public uint splitInstanceBindRegionCount;
		public IntPtr pSplitInstanceBindRegions;
	}

	public unsafe partial struct VkDeviceGroupRenderPassBeginInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint deviceMask;
		public uint deviceRenderAreaCount;
		public IntPtr pDeviceRenderAreas;
	}

	public unsafe partial struct VkDeviceGroupCommandBufferBeginInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint deviceMask;
	}

	public unsafe partial struct VkDeviceGroupSubmitInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint waitSemaphoreCount;
		public uint* pWaitSemaphoreDeviceIndices;
		public uint commandBufferCount;
		public uint* pCommandBufferDeviceMasks;
		public uint signalSemaphoreCount;
		public uint* pSignalSemaphoreDeviceIndices;
	}

	public unsafe partial struct VkDeviceGroupBindSparseInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint resourceDeviceIndex;
		public uint memoryDeviceIndex;
	}

	public unsafe partial struct VkDeviceGroupPresentCapabilitiesKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public fixed uint presentMask[(int)Vulkan.MaxDeviceGroupSize];
		public VkDeviceGroupPresentModeFlagsKHR modes;
	}

	public unsafe partial struct VkImageSwapchainCreateInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong swapchain;
	}

	public unsafe partial struct VkBindImageMemorySwapchainInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong swapchain;
		public uint imageIndex;
	}

	public unsafe partial struct VkAcquireNextImageInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong swapchain;
		public ulong timeout;
		public ulong semaphore;
		public ulong fence;
		public uint deviceMask;
	}

	public unsafe partial struct VkDeviceGroupPresentInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint swapchainCount;
		public uint* pDeviceMasks;
		public VkDeviceGroupPresentModeFlagsKHR mode;
	}

	public unsafe partial struct VkDeviceGroupDeviceCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint physicalDeviceCount;
		public IntPtr pPhysicalDevices;
	}

	public unsafe partial struct VkDeviceGroupSwapchainCreateInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkDeviceGroupPresentModeFlagsKHR modes;
	}

	public unsafe partial struct VkDescriptorUpdateTemplateEntry
	{
		/// <summary>
		/// Binding within the destination descriptor set to write
		/// </summary>
		public uint DstBinding;
		/// <summary>
		/// Array element within the destination binding to write
		/// </summary>
		public uint DstArrayElement;
		/// <summary>
		/// Number of descriptors to write
		/// </summary>
		public uint DescriptorCount;
		/// <summary>
		/// Descriptor type to write
		/// </summary>
		public VkDescriptorType DescriptorType;
		/// <summary>
		/// Offset into pData where the descriptors to update are stored
		/// </summary>
		public UIntPtr Offset;
		/// <summary>
		/// Stride between two descriptors in pData when writing more than one descriptor
		/// </summary>
		public UIntPtr Stride;
	}

	public unsafe partial struct VkDescriptorUpdateTemplateCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public uint descriptorUpdateEntryCount;
		public IntPtr pDescriptorUpdateEntries;
		public VkDescriptorUpdateTemplateType templateType;
		public ulong descriptorSetLayout;
		public VkPipelineBindPoint pipelineBindPoint;
		public ulong pipelineLayout;
		public uint set;
	}

	public unsafe partial struct VkXYColorEXT
	{
		public float X;
		public float Y;
	}

	public unsafe partial struct VkHdrMetadataEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkXYColorEXT displayPrimaryRed;
		public VkXYColorEXT displayPrimaryGreen;
		public VkXYColorEXT displayPrimaryBlue;
		public VkXYColorEXT whitePoint;
		public float maxLuminance;
		public float minLuminance;
		public float maxContentLightLevel;
		public float maxFrameAverageLightLevel;
	}

	public unsafe partial struct VkDisplayNativeHdrSurfaceCapabilitiesAMD
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool localDimmingSupport;
	}

	public unsafe partial struct VkSwapchainDisplayNativeHdrCreateInfoAMD
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool localDimmingEnable;
	}

	public unsafe partial struct VkRefreshCycleDurationGOOGLE
	{
		/// <summary>
		/// Number of nanoseconds from the start of one refresh cycle to the next
		/// </summary>
		public ulong RefreshDuration;
	}

	public unsafe partial struct VkPastPresentationTimingGOOGLE
	{
		/// <summary>
		/// Application-provided identifier, previously given to vkQueuePresentKHR
		/// </summary>
		public uint PresentID;
		/// <summary>
		/// Earliest time an image should have been presented, previously given to vkQueuePresentKHR
		/// </summary>
		public ulong DesiredPresentTime;
		/// <summary>
		/// Time the image was actually displayed
		/// </summary>
		public ulong ActualPresentTime;
		/// <summary>
		/// Earliest time the image could have been displayed
		/// </summary>
		public ulong EarliestPresentTime;
		/// <summary>
		/// How early vkQueuePresentKHR was processed vs. how soon it needed to be and make earliestPresentTime
		/// </summary>
		public ulong PresentMargin;
	}

	public unsafe partial struct VkPresentTimesInfoGOOGLE
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint swapchainCount;
		public IntPtr pTimes;
	}

	public unsafe partial struct VkPresentTimeGOOGLE
	{
		/// <summary>
		/// Application-provided identifier
		/// </summary>
		public uint PresentID;
		/// <summary>
		/// Earliest time an image should be presented
		/// </summary>
		public ulong DesiredPresentTime;
	}

	public unsafe partial struct VkIOSSurfaceCreateInfoMVK
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public IntPtr pView;
	}

	public unsafe partial struct VkMacOSSurfaceCreateInfoMVK
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public IntPtr pView;
	}

	public unsafe partial struct VkMetalSurfaceCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public IntPtr* pLayer;
	}

	public unsafe partial struct VkViewportWScalingNV
	{
		public float Xcoeff;
		public float Ycoeff;
	}

	public unsafe partial struct VkPipelineViewportWScalingStateCreateInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool viewportWScalingEnable;
		public uint viewportCount;
		public IntPtr pViewportWScalings;
	}

	public unsafe partial struct VkViewportSwizzleNV
	{
		public VkViewportCoordinateSwizzleNV X;
		public VkViewportCoordinateSwizzleNV Y;
		public VkViewportCoordinateSwizzleNV Z;
		public VkViewportCoordinateSwizzleNV W;
	}

	public unsafe partial struct VkPipelineViewportSwizzleStateCreateInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public uint viewportCount;
		public IntPtr pViewportSwizzles;
	}

	public unsafe partial struct VkPhysicalDeviceDiscardRectanglePropertiesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint maxDiscardRectangles;
	}

	public unsafe partial struct VkPipelineDiscardRectangleStateCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public VkDiscardRectangleModeEXT discardRectangleMode;
		public uint discardRectangleCount;
		public IntPtr pDiscardRectangles;
	}

	public unsafe partial struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool perViewPositionAllComponents;
	}

	public unsafe partial struct VkInputAttachmentAspectReference
	{
		public uint Subpass;
		public uint InputAttachmentIndex;
		public VkImageAspectFlags AspectMask;
	}

	public unsafe partial struct VkRenderPassInputAttachmentAspectCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint aspectReferenceCount;
		public IntPtr pAspectReferences;
	}

	public unsafe partial struct VkPhysicalDeviceSurfaceInfo2KHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong surface;
	}

	public unsafe partial struct VkSurfaceCapabilities2KHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkSurfaceCapabilitiesKHR surfaceCapabilities;
	}

	public unsafe partial struct VkSurfaceFormat2KHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkSurfaceFormatKHR surfaceFormat;
	}

	public unsafe partial struct VkDisplayProperties2KHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkDisplayPropertiesKHR displayProperties;
	}

	public unsafe partial struct VkDisplayPlaneProperties2KHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkDisplayPlanePropertiesKHR displayPlaneProperties;
	}

	public unsafe partial struct VkDisplayModeProperties2KHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkDisplayModePropertiesKHR displayModeProperties;
	}

	public unsafe partial struct VkDisplayPlaneInfo2KHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong mode;
		public uint planeIndex;
	}

	public unsafe partial struct VkDisplayPlaneCapabilities2KHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkDisplayPlaneCapabilitiesKHR capabilities;
	}

	public unsafe partial struct VkSharedPresentSurfaceCapabilitiesKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkImageUsageFlags sharedPresentSupportedUsageFlags;
	}

	public unsafe partial struct VkPhysicalDevice16BitStorageFeatures
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool storageBuffer16BitAccess;
		public RawBool uniformAndStorageBuffer16BitAccess;
		public RawBool storagePushConstant16;
		public RawBool storageInputOutput16;
	}

	public unsafe partial struct VkPhysicalDeviceSubgroupProperties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint subgroupSize;
		public VkShaderStageFlags supportedStages;
		public VkSubgroupFeatureFlags supportedOperations;
		public RawBool quadOperationsInAllStages;
	}

	public unsafe partial struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool shaderSubgroupExtendedTypes;
	}

	public unsafe partial struct VkBufferMemoryRequirementsInfo2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong buffer;
	}

	public unsafe partial struct VkImageMemoryRequirementsInfo2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong image;
	}

	public unsafe partial struct VkImageSparseMemoryRequirementsInfo2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong image;
	}

	public unsafe partial struct VkMemoryRequirements2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkMemoryRequirements memoryRequirements;
	}

	public unsafe partial struct VkSparseImageMemoryRequirements2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkSparseImageMemoryRequirements memoryRequirements;
	}

	public unsafe partial struct VkPhysicalDevicePointClippingProperties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkPointClippingBehavior pointClippingBehavior;
	}

	public unsafe partial struct VkMemoryDedicatedRequirements
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool prefersDedicatedAllocation;
		public RawBool requiresDedicatedAllocation;
	}

	public unsafe partial struct VkMemoryDedicatedAllocateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong image;
		public ulong buffer;
	}

	public unsafe partial struct VkImageViewUsageCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkImageUsageFlags usage;
	}

	public unsafe partial struct VkPipelineTessellationDomainOriginStateCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkTessellationDomainOrigin domainOrigin;
	}

	public unsafe partial struct VkSamplerYcbcrConversionInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong conversion;
	}

	public unsafe partial struct VkSamplerYcbcrConversionCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkFormat format;
		public VkSamplerYcbcrModelConversion ycbcrModel;
		public VkSamplerYcbcrRange ycbcrRange;
		public VkComponentMapping components;
		public VkChromaLocation xChromaOffset;
		public VkChromaLocation yChromaOffset;
		public VkFilter chromaFilter;
		public RawBool forceExplicitReconstruction;
	}

	public unsafe partial struct VkBindImagePlaneMemoryInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkImageAspectFlags planeAspect;
	}

	public unsafe partial struct VkImagePlaneMemoryRequirementsInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkImageAspectFlags planeAspect;
	}

	public unsafe partial struct VkPhysicalDeviceSamplerYcbcrConversionFeatures
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool samplerYcbcrConversion;
	}

	public unsafe partial struct VkSamplerYcbcrConversionImageFormatProperties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint combinedImageSamplerDescriptorCount;
	}

	public unsafe partial struct VkTextureLODGatherFormatPropertiesAMD
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool supportsTextureGatherLODBiasAMD;
	}

	public unsafe partial struct VkConditionalRenderingBeginInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong buffer;
		public ulong offset;
		public VkConditionalRenderingFlagsEXT flags;
	}

	public unsafe partial struct VkProtectedSubmitInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool protectedSubmit;
	}

	public unsafe partial struct VkPhysicalDeviceProtectedMemoryFeatures
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool protectedMemory;
	}

	public unsafe partial struct VkPhysicalDeviceProtectedMemoryProperties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool protectedNoFault;
	}

	public unsafe partial struct VkDeviceQueueInfo2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkDeviceQueueCreateFlags flags;
		public uint queueFamilyIndex;
		public uint queueIndex;
	}

	public unsafe partial struct VkPipelineCoverageToColorStateCreateInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public RawBool coverageToColorEnable;
		public uint coverageToColorLocation;
	}

	public unsafe partial struct VkPhysicalDeviceSamplerFilterMinmaxProperties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool filterMinmaxSingleComponentFormats;
		public RawBool filterMinmaxImageComponentMapping;
	}

	public unsafe partial struct VkSampleLocationEXT
	{
		public float X;
		public float Y;
	}

	public unsafe partial struct VkSampleLocationsInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkSampleCountFlags sampleLocationsPerPixel;
		public VkExtent2D sampleLocationGridSize;
		public uint sampleLocationsCount;
		public IntPtr pSampleLocations;
	}

	public unsafe partial struct VkAttachmentSampleLocationsEXT
	{
		public uint attachmentIndex;
		public VkSampleLocationsInfoEXT sampleLocationsInfo;
	}

	public unsafe partial struct VkSubpassSampleLocationsEXT
	{
		public uint subpassIndex;
		public VkSampleLocationsInfoEXT sampleLocationsInfo;
	}

	public unsafe partial struct VkRenderPassSampleLocationsBeginInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint attachmentInitialSampleLocationsCount;
		public VkAttachmentSampleLocationsEXT* pAttachmentInitialSampleLocations;
		public uint postSubpassSampleLocationsCount;
		public VkSubpassSampleLocationsEXT* pPostSubpassSampleLocations;
	}

	public unsafe partial struct VkPipelineSampleLocationsStateCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool sampleLocationsEnable;
		public VkSampleLocationsInfoEXT sampleLocationsInfo;
	}

	public unsafe partial struct VkPhysicalDeviceSampleLocationsPropertiesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkSampleCountFlags sampleLocationSampleCounts;
		public VkExtent2D maxSampleLocationGridSize;
		public float sampleLocationCoordinateRange;
		public uint sampleLocationSubPixelBits;
		public RawBool variableSampleLocations;
	}

	public unsafe partial struct VkMultisamplePropertiesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExtent2D maxSampleLocationGridSize;
	}

	public unsafe partial struct VkSamplerReductionModeCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkSamplerReductionMode reductionMode;
	}

	public unsafe partial struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool advancedBlendCoherentOperations;
	}

	public unsafe partial struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint advancedBlendMaxColorAttachments;
		public RawBool advancedBlendIndependentBlend;
		public RawBool advancedBlendNonPremultipliedSrcColor;
		public RawBool advancedBlendNonPremultipliedDstColor;
		public RawBool advancedBlendCorrelatedOverlap;
		public RawBool advancedBlendAllOperations;
	}

	public unsafe partial struct VkPipelineColorBlendAdvancedStateCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool srcPremultiplied;
		public RawBool dstPremultiplied;
		public VkBlendOverlapEXT blendOverlap;
	}

	public unsafe partial struct VkPhysicalDeviceInlineUniformBlockFeaturesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool inlineUniformBlock;
		public RawBool descriptorBindingInlineUniformBlockUpdateAfterBind;
	}

	public unsafe partial struct VkPhysicalDeviceInlineUniformBlockPropertiesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint maxInlineUniformBlockSize;
		public uint maxPerStageDescriptorInlineUniformBlocks;
		public uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
		public uint maxDescriptorSetInlineUniformBlocks;
		public uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
	}

	public unsafe partial struct VkWriteDescriptorSetInlineUniformBlockEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint dataSize;
		public IntPtr pData;
	}

	public unsafe partial struct VkDescriptorPoolInlineUniformBlockCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint maxInlineUniformBlockBindings;
	}

	public unsafe partial struct VkPipelineCoverageModulationStateCreateInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public VkCoverageModulationModeNV coverageModulationMode;
		public RawBool coverageModulationTableEnable;
		public uint coverageModulationTableCount;
		public IntPtr pCoverageModulationTable;
	}

	public unsafe partial struct VkImageFormatListCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint viewFormatCount;
		public VkFormat* pViewFormats;
	}

	public unsafe partial struct VkValidationCacheCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public UIntPtr initialDataSize;
		public IntPtr pInitialData;
	}

	public unsafe partial struct VkShaderModuleValidationCacheCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong validationCache;
	}

	public unsafe partial struct VkPhysicalDeviceMaintenance3Properties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint maxPerSetDescriptors;
		public ulong maxMemoryAllocationSize;
	}

	public unsafe partial struct VkDescriptorSetLayoutSupport
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool supported;
	}

	public unsafe partial struct VkPhysicalDeviceShaderDrawParametersFeatures
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool shaderDrawParameters;
	}

	public unsafe partial struct VkPhysicalDeviceShaderFloat16Int8Features
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool shaderFloat16;
		public RawBool shaderInt8;
	}

	public unsafe partial struct VkPhysicalDeviceFloatControlsProperties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkShaderFloatControlsIndependence denormBehaviorIndependence;
		public VkShaderFloatControlsIndependence roundingModeIndependence;
		public RawBool shaderSignedZeroInfNanPreserveFloat16;
		public RawBool shaderSignedZeroInfNanPreserveFloat32;
		public RawBool shaderSignedZeroInfNanPreserveFloat64;
		public RawBool shaderDenormPreserveFloat16;
		public RawBool shaderDenormPreserveFloat32;
		public RawBool shaderDenormPreserveFloat64;
		public RawBool shaderDenormFlushToZeroFloat16;
		public RawBool shaderDenormFlushToZeroFloat32;
		public RawBool shaderDenormFlushToZeroFloat64;
		public RawBool shaderRoundingModeRTEFloat16;
		public RawBool shaderRoundingModeRTEFloat32;
		public RawBool shaderRoundingModeRTEFloat64;
		public RawBool shaderRoundingModeRTZFloat16;
		public RawBool shaderRoundingModeRTZFloat32;
		public RawBool shaderRoundingModeRTZFloat64;
	}

	public unsafe partial struct VkPhysicalDeviceHostQueryResetFeatures
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool hostQueryReset;
	}

	public unsafe partial struct VkNativeBufferUsage2ANDROID
	{
		public ulong Consumer;
		public ulong Producer;
	}

	public unsafe partial struct VkSwapchainImageCreateInfoANDROID
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkSwapchainImageUsageFlagsANDROID usage;
	}

	public unsafe partial struct VkPhysicalDevicePresentationPropertiesANDROID
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool sharedImage;
	}

	public unsafe partial struct VkShaderResourceUsageAMD
	{
		public uint NumUsedVgprs;
		public uint NumUsedSgprs;
		public uint LdsSizePerLocalWorkGroup;
		public UIntPtr LdsUsageSizeInBytes;
		public UIntPtr ScratchMemUsageInBytes;
	}

	public unsafe partial struct VkShaderStatisticsInfoAMD
	{
		public VkShaderStageFlags shaderStageMask;
		public VkShaderResourceUsageAMD resourceUsage;
		public uint numPhysicalVgprs;
		public uint numPhysicalSgprs;
		public uint numAvailableVgprs;
		public uint numAvailableSgprs;
		public uint computeWorkGroupSize;
	}

	public unsafe partial struct VkDeviceQueueGlobalPriorityCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkQueueGlobalPriorityEXT globalPriority;
	}

	public unsafe partial struct VkDebugUtilsObjectNameInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkObjectType objectType;
		public ulong objectHandle;
		public IntPtr pObjectName;
	}

	public unsafe partial struct VkDebugUtilsObjectTagInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkObjectType objectType;
		public ulong objectHandle;
		public ulong tagName;
		public UIntPtr tagSize;
		public IntPtr pTag;
	}

	public unsafe partial struct VkDebugUtilsLabelEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public IntPtr pLabelName;
		public float color;
	}

	public unsafe partial struct VkDebugUtilsMessengerCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public VkDebugUtilsMessageSeverityFlagsEXT messageSeverity;
		public VkDebugUtilsMessageTypeFlagsEXT messageType;
		public IntPtr pfnUserCallback;
		public IntPtr pUserData;
	}

	public unsafe partial struct VkDebugUtilsMessengerCallbackDataEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public IntPtr pMessageIdName;
		public int messageIdNumber;
		public IntPtr pMessage;
		public uint queueLabelCount;
		public VkDebugUtilsLabelEXT* pQueueLabels;
		public uint cmdBufLabelCount;
		public VkDebugUtilsLabelEXT* pCmdBufLabels;
		public uint objectCount;
		public VkDebugUtilsObjectNameInfoEXT* pObjects;
	}

	public unsafe partial struct VkImportMemoryHostPointerInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExternalMemoryHandleTypeFlags handleType;
		public IntPtr pHostPointer;
	}

	public unsafe partial struct VkMemoryHostPointerPropertiesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint memoryTypeBits;
	}

	public unsafe partial struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong minImportedHostPointerAlignment;
	}

	public unsafe partial struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public float primitiveOverestimationSize;
		public float maxExtraPrimitiveOverestimationSize;
		public float extraPrimitiveOverestimationSizeGranularity;
		public RawBool primitiveUnderestimation;
		public RawBool conservativePointAndLineRasterization;
		public RawBool degenerateTrianglesRasterized;
		public RawBool degenerateLinesRasterized;
		public RawBool fullyCoveredFragmentShaderInputVariable;
		public RawBool conservativeRasterizationPostDepthCoverage;
	}

	public unsafe partial struct VkCalibratedTimestampInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkTimeDomainEXT timeDomain;
	}

	public unsafe partial struct VkPhysicalDeviceShaderCorePropertiesAMD
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint shaderEngineCount;
		public uint shaderArraysPerEngineCount;
		public uint computeUnitsPerShaderArray;
		public uint simdPerComputeUnit;
		public uint wavefrontsPerSimd;
		public uint wavefrontSize;
		public uint sgprsPerSimd;
		public uint minSgprAllocation;
		public uint maxSgprAllocation;
		public uint sgprAllocationGranularity;
		public uint vgprsPerSimd;
		public uint minVgprAllocation;
		public uint maxVgprAllocation;
		public uint vgprAllocationGranularity;
	}

	public unsafe partial struct VkPhysicalDeviceShaderCoreProperties2AMD
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkShaderCorePropertiesFlagsAMD shaderCoreFeatures;
		public uint activeComputeUnitCount;
	}

	public unsafe partial struct VkPipelineRasterizationConservativeStateCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public VkConservativeRasterizationModeEXT conservativeRasterizationMode;
		public float extraPrimitiveOverestimationSize;
	}

	public unsafe partial struct VkPhysicalDeviceDescriptorIndexingFeatures
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool shaderInputAttachmentArrayDynamicIndexing;
		public RawBool shaderUniformTexelBufferArrayDynamicIndexing;
		public RawBool shaderStorageTexelBufferArrayDynamicIndexing;
		public RawBool shaderUniformBufferArrayNonUniformIndexing;
		public RawBool shaderSampledImageArrayNonUniformIndexing;
		public RawBool shaderStorageBufferArrayNonUniformIndexing;
		public RawBool shaderStorageImageArrayNonUniformIndexing;
		public RawBool shaderInputAttachmentArrayNonUniformIndexing;
		public RawBool shaderUniformTexelBufferArrayNonUniformIndexing;
		public RawBool shaderStorageTexelBufferArrayNonUniformIndexing;
		public RawBool descriptorBindingUniformBufferUpdateAfterBind;
		public RawBool descriptorBindingSampledImageUpdateAfterBind;
		public RawBool descriptorBindingStorageImageUpdateAfterBind;
		public RawBool descriptorBindingStorageBufferUpdateAfterBind;
		public RawBool descriptorBindingUniformTexelBufferUpdateAfterBind;
		public RawBool descriptorBindingStorageTexelBufferUpdateAfterBind;
		public RawBool descriptorBindingUpdateUnusedWhilePending;
		public RawBool descriptorBindingPartiallyBound;
		public RawBool descriptorBindingVariableDescriptorCount;
		public RawBool runtimeDescriptorArray;
	}

	public unsafe partial struct VkPhysicalDeviceDescriptorIndexingProperties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint maxUpdateAfterBindDescriptorsInAllPools;
		public RawBool shaderUniformBufferArrayNonUniformIndexingNative;
		public RawBool shaderSampledImageArrayNonUniformIndexingNative;
		public RawBool shaderStorageBufferArrayNonUniformIndexingNative;
		public RawBool shaderStorageImageArrayNonUniformIndexingNative;
		public RawBool shaderInputAttachmentArrayNonUniformIndexingNative;
		public RawBool robustBufferAccessUpdateAfterBind;
		public RawBool quadDivergentImplicitLod;
		public uint maxPerStageDescriptorUpdateAfterBindSamplers;
		public uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
		public uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
		public uint maxPerStageDescriptorUpdateAfterBindSampledImages;
		public uint maxPerStageDescriptorUpdateAfterBindStorageImages;
		public uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
		public uint maxPerStageUpdateAfterBindResources;
		public uint maxDescriptorSetUpdateAfterBindSamplers;
		public uint maxDescriptorSetUpdateAfterBindUniformBuffers;
		public uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
		public uint maxDescriptorSetUpdateAfterBindStorageBuffers;
		public uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
		public uint maxDescriptorSetUpdateAfterBindSampledImages;
		public uint maxDescriptorSetUpdateAfterBindStorageImages;
		public uint maxDescriptorSetUpdateAfterBindInputAttachments;
	}

	public unsafe partial struct VkDescriptorSetLayoutBindingFlagsCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint bindingCount;
		public VkDescriptorBindingFlags* pBindingFlags;
	}

	public unsafe partial struct VkDescriptorSetVariableDescriptorCountAllocateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint descriptorSetCount;
		public uint* pDescriptorCounts;
	}

	public unsafe partial struct VkDescriptorSetVariableDescriptorCountLayoutSupport
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint maxVariableDescriptorCount;
	}

	public unsafe partial struct VkAttachmentDescription2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkAttachmentDescriptionFlags flags;
		public VkFormat format;
		public VkSampleCountFlags samples;
		public VkAttachmentLoadOp loadOp;
		public VkAttachmentStoreOp storeOp;
		public VkAttachmentLoadOp stencilLoadOp;
		public VkAttachmentStoreOp stencilStoreOp;
		public VkImageLayout initialLayout;
		public VkImageLayout finalLayout;
	}

	public unsafe partial struct VkAttachmentReference2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint attachment;
		public VkImageLayout layout;
		public VkImageAspectFlags aspectMask;
	}

	public unsafe partial struct VkSubpassDescription2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkSubpassDescriptionFlags flags;
		public VkPipelineBindPoint pipelineBindPoint;
		public uint viewMask;
		public uint inputAttachmentCount;
		public VkAttachmentReference2* pInputAttachments;
		public uint colorAttachmentCount;
		public VkAttachmentReference2* pColorAttachments;
		public VkAttachmentReference2* pResolveAttachments;
		public VkAttachmentReference2* pDepthStencilAttachment;
		public uint preserveAttachmentCount;
		public uint* pPreserveAttachments;
	}

	public unsafe partial struct VkSubpassDependency2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint srcSubpass;
		public uint dstSubpass;
		public VkPipelineStageFlags srcStageMask;
		public VkPipelineStageFlags dstStageMask;
		public VkAccessFlags srcAccessMask;
		public VkAccessFlags dstAccessMask;
		public VkDependencyFlags dependencyFlags;
		public int viewOffset;
	}

	public unsafe partial struct VkRenderPassCreateInfo2
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkRenderPassCreateFlags flags;
		public uint attachmentCount;
		public VkAttachmentDescription2* pAttachments;
		public uint subpassCount;
		public VkSubpassDescription2* pSubpasses;
		public uint dependencyCount;
		public VkSubpassDependency2* pDependencies;
		public uint correlatedViewMaskCount;
		public uint* pCorrelatedViewMasks;
	}

	public unsafe partial struct VkSubpassBeginInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkSubpassContents contents;
	}

	public unsafe partial struct VkSubpassEndInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
	}

	public unsafe partial struct VkPhysicalDeviceTimelineSemaphoreFeatures
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool timelineSemaphore;
	}

	public unsafe partial struct VkPhysicalDeviceTimelineSemaphoreProperties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong maxTimelineSemaphoreValueDifference;
	}

	public unsafe partial struct VkSemaphoreTypeCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkSemaphoreType semaphoreType;
		public ulong initialValue;
	}

	public unsafe partial struct VkTimelineSemaphoreSubmitInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint waitSemaphoreValueCount;
		public ulong* pWaitSemaphoreValues;
		public uint signalSemaphoreValueCount;
		public ulong* pSignalSemaphoreValues;
	}

	public unsafe partial struct VkSemaphoreWaitInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkSemaphoreWaitFlags flags;
		public uint semaphoreCount;
		public IntPtr pSemaphores;
		public ulong* pValues;
	}

	public unsafe partial struct VkSemaphoreSignalInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong semaphore;
		public ulong value;
	}

	public unsafe partial struct VkVertexInputBindingDivisorDescriptionEXT
	{
		public uint Binding;
		public uint Divisor;
	}

	public unsafe partial struct VkPipelineVertexInputDivisorStateCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint vertexBindingDivisorCount;
		public IntPtr pVertexBindingDivisors;
	}

	public unsafe partial struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint maxVertexAttribDivisor;
	}

	public unsafe partial struct VkPhysicalDevicePCIBusInfoPropertiesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint pciDomain;
		public uint pciBus;
		public uint pciDevice;
		public uint pciFunction;
	}

	public unsafe partial struct VkImportAndroidHardwareBufferInfoANDROID
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public IntPtr* buffer;
	}

	public unsafe partial struct VkAndroidHardwareBufferUsageANDROID
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong androidHardwareBufferUsage;
	}

	public unsafe partial struct VkAndroidHardwareBufferPropertiesANDROID
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong allocationSize;
		public uint memoryTypeBits;
	}

	public unsafe partial struct VkMemoryGetAndroidHardwareBufferInfoANDROID
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong memory;
	}

	public unsafe partial struct VkAndroidHardwareBufferFormatPropertiesANDROID
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkFormat format;
		public ulong externalFormat;
		public VkFormatFeatureFlags formatFeatures;
		public VkComponentMapping samplerYcbcrConversionComponents;
		public VkSamplerYcbcrModelConversion suggestedYcbcrModel;
		public VkSamplerYcbcrRange suggestedYcbcrRange;
		public VkChromaLocation suggestedXChromaOffset;
		public VkChromaLocation suggestedYChromaOffset;
	}

	public unsafe partial struct VkCommandBufferInheritanceConditionalRenderingInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool conditionalRenderingEnable;
	}

	public unsafe partial struct VkExternalFormatANDROID
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong externalFormat;
	}

	public unsafe partial struct VkPhysicalDevice8BitStorageFeatures
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool storageBuffer8BitAccess;
		public RawBool uniformAndStorageBuffer8BitAccess;
		public RawBool storagePushConstant8;
	}

	public unsafe partial struct VkPhysicalDeviceConditionalRenderingFeaturesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool conditionalRendering;
		public RawBool inheritedConditionalRendering;
	}

	public unsafe partial struct VkPhysicalDeviceVulkanMemoryModelFeatures
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool vulkanMemoryModel;
		public RawBool vulkanMemoryModelDeviceScope;
		public RawBool vulkanMemoryModelAvailabilityVisibilityChains;
	}

	public unsafe partial struct VkPhysicalDeviceShaderAtomicInt64Features
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool shaderBufferInt64Atomics;
		public RawBool shaderSharedInt64Atomics;
	}

	public unsafe partial struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool vertexAttributeInstanceRateDivisor;
		public RawBool vertexAttributeInstanceRateZeroDivisor;
	}

	public unsafe partial struct VkQueueFamilyCheckpointPropertiesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkPipelineStageFlags checkpointExecutionStageMask;
	}

	public unsafe partial struct VkCheckpointDataNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkPipelineStageFlags stage;
		public IntPtr pCheckpointMarker;
	}

	public unsafe partial struct VkPhysicalDeviceDepthStencilResolveProperties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkResolveModeFlags supportedDepthResolveModes;
		public VkResolveModeFlags supportedStencilResolveModes;
		public RawBool independentResolveNone;
		public RawBool independentResolve;
	}

	public unsafe partial struct VkSubpassDescriptionDepthStencilResolve
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkResolveModeFlags depthResolveMode;
		public VkResolveModeFlags stencilResolveMode;
		public VkAttachmentReference2* pDepthStencilResolveAttachment;
	}

	public unsafe partial struct VkImageViewASTCDecodeModeEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkFormat decodeMode;
	}

	public unsafe partial struct VkPhysicalDeviceASTCDecodeFeaturesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool decodeModeSharedExponent;
	}

	public unsafe partial struct VkPhysicalDeviceTransformFeedbackFeaturesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool transformFeedback;
		public RawBool geometryStreams;
	}

	public unsafe partial struct VkPhysicalDeviceTransformFeedbackPropertiesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint maxTransformFeedbackStreams;
		public uint maxTransformFeedbackBuffers;
		public ulong maxTransformFeedbackBufferSize;
		public uint maxTransformFeedbackStreamDataSize;
		public uint maxTransformFeedbackBufferDataSize;
		public uint maxTransformFeedbackBufferDataStride;
		public RawBool transformFeedbackQueries;
		public RawBool transformFeedbackStreamsLinesTriangles;
		public RawBool transformFeedbackRasterizationStreamSelect;
		public RawBool transformFeedbackDraw;
	}

	public unsafe partial struct VkPipelineRasterizationStateStreamCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public uint rasterizationStream;
	}

	public unsafe partial struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool representativeFragmentTest;
	}

	public unsafe partial struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool representativeFragmentTestEnable;
	}

	public unsafe partial struct VkPhysicalDeviceExclusiveScissorFeaturesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool exclusiveScissor;
	}

	public unsafe partial struct VkPipelineViewportExclusiveScissorStateCreateInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint exclusiveScissorCount;
		public IntPtr pExclusiveScissors;
	}

	public unsafe partial struct VkPhysicalDeviceCornerSampledImageFeaturesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool cornerSampledImage;
	}

	public unsafe partial struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool computeDerivativeGroupQuads;
		public RawBool computeDerivativeGroupLinear;
	}

	public unsafe partial struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool fragmentShaderBarycentric;
	}

	public unsafe partial struct VkPhysicalDeviceShaderImageFootprintFeaturesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool imageFootprint;
	}

	public unsafe partial struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool dedicatedAllocationImageAliasing;
	}

	public unsafe partial struct VkShadingRatePaletteNV
	{
		public uint shadingRatePaletteEntryCount;
		public VkShadingRatePaletteEntryNV* pShadingRatePaletteEntries;
	}

	public unsafe partial struct VkPipelineViewportShadingRateImageStateCreateInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool shadingRateImageEnable;
		public uint viewportCount;
		public VkShadingRatePaletteNV* pShadingRatePalettes;
	}

	public unsafe partial struct VkPhysicalDeviceShadingRateImageFeaturesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool shadingRateImage;
		public RawBool shadingRateCoarseSampleOrder;
	}

	public unsafe partial struct VkPhysicalDeviceShadingRateImagePropertiesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExtent2D shadingRateTexelSize;
		public uint shadingRatePaletteSize;
		public uint shadingRateMaxCoarseSamples;
	}

	public unsafe partial struct VkCoarseSampleLocationNV
	{
		public uint PixelX;
		public uint PixelY;
		public uint Sample;
	}

	public unsafe partial struct VkCoarseSampleOrderCustomNV
	{
		public VkShadingRatePaletteEntryNV shadingRate;
		public uint sampleCount;
		public uint sampleLocationCount;
		public IntPtr pSampleLocations;
	}

	public unsafe partial struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkCoarseSampleOrderTypeNV sampleOrderType;
		public uint customSampleOrderCount;
		public VkCoarseSampleOrderCustomNV* pCustomSampleOrders;
	}

	public unsafe partial struct VkPhysicalDeviceMeshShaderFeaturesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool taskShader;
		public RawBool meshShader;
	}

	public unsafe partial struct VkPhysicalDeviceMeshShaderPropertiesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint maxDrawMeshTasksCount;
		public uint maxTaskWorkGroupInvocations;
		public uint maxTaskWorkGroupSize;
		public uint maxTaskTotalMemorySize;
		public uint maxTaskOutputCount;
		public uint maxMeshWorkGroupInvocations;
		public uint maxMeshWorkGroupSize;
		public uint maxMeshTotalMemorySize;
		public uint maxMeshOutputVertices;
		public uint maxMeshOutputPrimitives;
		public uint maxMeshMultiviewViewCount;
		public uint meshOutputPerVertexGranularity;
		public uint meshOutputPerPrimitiveGranularity;
	}

	public unsafe partial struct VkDrawMeshTasksIndirectCommandNV
	{
		public uint TaskCount;
		public uint FirstTask;
	}

	public unsafe partial struct VkRayTracingShaderGroupCreateInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkRayTracingShaderGroupTypeNV type;
		public uint generalShader;
		public uint closestHitShader;
		public uint anyHitShader;
		public uint intersectionShader;
	}

	public unsafe partial struct VkRayTracingPipelineCreateInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkPipelineCreateFlags flags;
		public uint stageCount;
		public VkPipelineShaderStageCreateInfo* pStages;
		public uint groupCount;
		public VkRayTracingShaderGroupCreateInfoNV* pGroups;
		public uint maxRecursionDepth;
		public ulong layout;
		public ulong basePipelineHandle;
		public int basePipelineIndex;
	}

	public unsafe partial struct VkGeometryTrianglesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong vertexData;
		public ulong vertexOffset;
		public uint vertexCount;
		public ulong vertexStride;
		public VkFormat vertexFormat;
		public ulong indexData;
		public ulong indexOffset;
		public uint indexCount;
		public VkIndexType indexType;
		public ulong transformData;
		public ulong transformOffset;
	}

	public unsafe partial struct VkGeometryAABBNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong aabbData;
		public uint numAABBs;
		public uint stride;
		public ulong offset;
	}

	public unsafe partial struct VkGeometryDataNV
	{
		public VkGeometryTrianglesNV triangles;
		public VkGeometryAABBNV aabbs;
	}

	public unsafe partial struct VkGeometryNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkGeometryTypeNV geometryType;
		public VkGeometryDataNV geometry;
		public VkGeometryFlagsNV flags;
	}

	public unsafe partial struct VkAccelerationStructureInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkAccelerationStructureTypeNV type;
		public VkBuildAccelerationStructureFlagsNV flags;
		public uint instanceCount;
		public uint geometryCount;
		public VkGeometryNV* pGeometries;
	}

	public unsafe partial struct VkAccelerationStructureCreateInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong compactedSize;
		public VkAccelerationStructureInfoNV info;
	}

	public unsafe partial struct VkBindAccelerationStructureMemoryInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong accelerationStructure;
		public ulong memory;
		public ulong memoryOffset;
		public uint deviceIndexCount;
		public uint* pDeviceIndices;
	}

	public unsafe partial struct VkWriteDescriptorSetAccelerationStructureNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint accelerationStructureCount;
		public IntPtr pAccelerationStructures;
	}

	public unsafe partial struct VkAccelerationStructureMemoryRequirementsInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkAccelerationStructureMemoryRequirementsTypeNV type;
		public ulong accelerationStructure;
	}

	public unsafe partial struct VkPhysicalDeviceRayTracingPropertiesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint shaderGroupHandleSize;
		public uint maxRecursionDepth;
		public uint maxShaderGroupStride;
		public uint shaderGroupBaseAlignment;
		public ulong maxGeometryCount;
		public ulong maxInstanceCount;
		public ulong maxTriangleCount;
		public uint maxDescriptorSetAccelerationStructures;
	}

	public unsafe partial struct VkDrmFormatModifierPropertiesListEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint drmFormatModifierCount;
		public IntPtr pDrmFormatModifierProperties;
	}

	public unsafe partial struct VkDrmFormatModifierPropertiesEXT
	{
		public ulong DrmFormatModifier;
		public uint DrmFormatModifierPlaneCount;
		public VkFormatFeatureFlags DrmFormatModifierTilingFeatures;
	}

	public unsafe partial struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong drmFormatModifier;
		public VkSharingMode sharingMode;
		public uint queueFamilyIndexCount;
		public uint* pQueueFamilyIndices;
	}

	public unsafe partial struct VkImageDrmFormatModifierListCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint drmFormatModifierCount;
		public ulong* pDrmFormatModifiers;
	}

	public unsafe partial struct VkImageDrmFormatModifierExplicitCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong drmFormatModifier;
		public uint drmFormatModifierPlaneCount;
		public IntPtr pPlaneLayouts;
	}

	public unsafe partial struct VkImageDrmFormatModifierPropertiesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong drmFormatModifier;
	}

	public unsafe partial struct VkImageStencilUsageCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkImageUsageFlags stencilUsage;
	}

	public unsafe partial struct VkDeviceMemoryOverallocationCreateInfoAMD
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkMemoryOverallocationBehaviorAMD overallocationBehavior;
	}

	public unsafe partial struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool fragmentDensityMap;
		public RawBool fragmentDensityMapDynamic;
		public RawBool fragmentDensityMapNonSubsampledImages;
	}

	public unsafe partial struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkExtent2D minFragmentDensityTexelSize;
		public VkExtent2D maxFragmentDensityTexelSize;
		public RawBool fragmentDensityInvocations;
	}

	public unsafe partial struct VkRenderPassFragmentDensityMapCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkAttachmentReference fragmentDensityMapAttachment;
	}

	public unsafe partial struct VkPhysicalDeviceScalarBlockLayoutFeatures
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool scalarBlockLayout;
	}

	public unsafe partial struct VkSurfaceProtectedCapabilitiesKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool supportsProtected;
	}

	public unsafe partial struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool uniformBufferStandardLayout;
	}

	public unsafe partial struct VkPhysicalDeviceDepthClipEnableFeaturesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool depthClipEnable;
	}

	public unsafe partial struct VkPipelineRasterizationDepthClipStateCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public RawBool depthClipEnable;
	}

	public unsafe partial struct VkPhysicalDeviceMemoryBudgetPropertiesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public fixed ulong heapBudget[(int)Vulkan.MaxMemoryHeaps];
		public fixed ulong heapUsage[(int)Vulkan.MaxMemoryHeaps];
	}

	public unsafe partial struct VkPhysicalDeviceMemoryPriorityFeaturesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool memoryPriority;
	}

	public unsafe partial struct VkMemoryPriorityAllocateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public float priority;
	}

	public unsafe partial struct VkPhysicalDeviceBufferDeviceAddressFeatures
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool bufferDeviceAddress;
		public RawBool bufferDeviceAddressCaptureReplay;
		public RawBool bufferDeviceAddressMultiDevice;
	}

	public unsafe partial struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool bufferDeviceAddress;
		public RawBool bufferDeviceAddressCaptureReplay;
		public RawBool bufferDeviceAddressMultiDevice;
	}

	public unsafe partial struct VkBufferDeviceAddressInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong buffer;
	}

	public unsafe partial struct VkBufferOpaqueCaptureAddressCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong opaqueCaptureAddress;
	}

	public unsafe partial struct VkBufferDeviceAddressCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public IntPtr deviceAddress;
	}

	public unsafe partial struct VkPhysicalDeviceImageViewImageFormatInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkImageViewType imageViewType;
	}

	public unsafe partial struct VkFilterCubicImageViewImageFormatPropertiesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool filterCubic;
		public RawBool filterCubicMinmax;
	}

	public unsafe partial struct VkPhysicalDeviceImagelessFramebufferFeatures
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool imagelessFramebuffer;
	}

	public unsafe partial struct VkFramebufferAttachmentsCreateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint attachmentImageInfoCount;
		public VkFramebufferAttachmentImageInfo* pAttachmentImageInfos;
	}

	public unsafe partial struct VkFramebufferAttachmentImageInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkImageCreateFlags flags;
		public VkImageUsageFlags usage;
		public uint width;
		public uint height;
		public uint layerCount;
		public uint viewFormatCount;
		public VkFormat* pViewFormats;
	}

	public unsafe partial struct VkRenderPassAttachmentBeginInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint attachmentCount;
		public IntPtr pAttachments;
	}

	public unsafe partial struct VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool textureCompressionASTC_HDR;
	}

	public unsafe partial struct VkPhysicalDeviceCooperativeMatrixFeaturesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool cooperativeMatrix;
		public RawBool cooperativeMatrixRobustBufferAccess;
	}

	public unsafe partial struct VkPhysicalDeviceCooperativeMatrixPropertiesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkShaderStageFlags cooperativeMatrixSupportedStages;
	}

	public unsafe partial struct VkCooperativeMatrixPropertiesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint MSize;
		public uint NSize;
		public uint KSize;
		public VkComponentTypeNV AType;
		public VkComponentTypeNV BType;
		public VkComponentTypeNV CType;
		public VkComponentTypeNV DType;
		public VkScopeNV scope;
	}

	public unsafe partial struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool ycbcrImageArrays;
	}

	public unsafe partial struct VkImageViewHandleInfoNVX
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong imageView;
		public VkDescriptorType descriptorType;
		public ulong sampler;
	}

	public unsafe partial struct VkPresentFrameTokenGGP
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public IntPtr frameToken;
	}

	public unsafe partial struct VkPipelineCreationFeedbackEXT
	{
		public VkPipelineCreationFeedbackFlagsEXT Flags;
		public ulong Duration;
	}

	public unsafe partial struct VkPipelineCreationFeedbackCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public IntPtr pPipelineCreationFeedback;
		public uint pipelineStageCreationFeedbackCount;
		public IntPtr pPipelineStageCreationFeedbacks;
	}

	public unsafe partial struct VkSurfaceFullScreenExclusiveInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkFullScreenExclusiveEXT fullScreenExclusive;
	}

	public unsafe partial struct VkSurfaceFullScreenExclusiveWin32InfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public IntPtr hmonitor;
	}

	public unsafe partial struct VkSurfaceCapabilitiesFullScreenExclusiveEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool fullScreenExclusiveSupported;
	}

	public unsafe partial struct VkPhysicalDevicePerformanceQueryFeaturesKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool performanceCounterQueryPools;
		public RawBool performanceCounterMultipleQueryPools;
	}

	public unsafe partial struct VkPhysicalDevicePerformanceQueryPropertiesKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool allowCommandBufferQueryCopies;
	}

	public unsafe partial struct VkPerformanceCounterKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkPerformanceCounterUnitKHR unit;
		public VkPerformanceCounterScopeKHR scope;
		public VkPerformanceCounterStorageKHR storage;
		public fixed byte uuid[(int)Vulkan.UuidSize];
	}

	public unsafe partial struct VkPerformanceCounterDescriptionKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkPerformanceCounterDescriptionFlagsKHR flags;
		public fixed byte name[(int)Vulkan.MaxDescriptionSize];
		public fixed byte category[(int)Vulkan.MaxDescriptionSize];
		public fixed byte description[(int)Vulkan.MaxDescriptionSize];
	}

	public unsafe partial struct VkQueryPoolPerformanceCreateInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint queueFamilyIndex;
		public uint counterIndexCount;
		public uint* pCounterIndices;
	}

	public unsafe partial struct VkAcquireProfilingLockInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkAcquireProfilingLockFlagsKHR flags;
		public ulong timeout;
	}

	public unsafe partial struct VkPerformanceQuerySubmitInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint counterPassIndex;
	}

	public unsafe partial struct VkHeadlessSurfaceCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
	}

	public unsafe partial struct VkPhysicalDeviceCoverageReductionModeFeaturesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool coverageReductionMode;
	}

	public unsafe partial struct VkPipelineCoverageReductionStateCreateInfoNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint flags;
		public VkCoverageReductionModeNV coverageReductionMode;
	}

	public unsafe partial struct VkFramebufferMixedSamplesCombinationNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkCoverageReductionModeNV coverageReductionMode;
		public VkSampleCountFlags rasterizationSamples;
		public VkSampleCountFlags depthStencilSamples;
		public VkSampleCountFlags colorSamples;
	}

	public unsafe partial struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool shaderIntegerFunctions2;
	}

	public unsafe partial struct VkPerformanceValueINTEL
	{
		public VkPerformanceValueTypeINTEL Type;
		public VkPerformanceValueDataINTEL Data;
	}

	public unsafe partial struct VkInitializePerformanceApiInfoINTEL
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public IntPtr pUserData;
	}

	public unsafe partial struct VkQueryPoolCreateInfoINTEL
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkQueryPoolSamplingModeINTEL performanceCountersSampling;
	}

	public unsafe partial struct VkPerformanceMarkerInfoINTEL
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong marker;
	}

	public unsafe partial struct VkPerformanceStreamMarkerInfoINTEL
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint marker;
	}

	public unsafe partial struct VkPerformanceOverrideInfoINTEL
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkPerformanceOverrideTypeINTEL type;
		public RawBool enable;
		public ulong parameter;
	}

	public unsafe partial struct VkPerformanceConfigurationAcquireInfoINTEL
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkPerformanceConfigurationTypeINTEL type;
	}

	public unsafe partial struct VkPhysicalDeviceShaderClockFeaturesKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool shaderSubgroupClock;
		public RawBool shaderDeviceClock;
	}

	public unsafe partial struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool indexTypeUint8;
	}

	public unsafe partial struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint shaderSMCount;
		public uint shaderWarpsPerSM;
	}

	public unsafe partial struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool shaderSMBuiltins;
	}

	public unsafe partial struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool fragmentShaderSampleInterlock;
		public RawBool fragmentShaderPixelInterlock;
		public RawBool fragmentShaderShadingRateInterlock;
	}

	public unsafe partial struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool separateDepthStencilLayouts;
	}

	public unsafe partial struct VkAttachmentReferenceStencilLayout
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkImageLayout stencilLayout;
	}

	public unsafe partial struct VkAttachmentDescriptionStencilLayout
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkImageLayout stencilInitialLayout;
		public VkImageLayout stencilFinalLayout;
	}

	public unsafe partial struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool pipelineExecutableInfo;
	}

	public unsafe partial struct VkPipelineInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong pipeline;
	}

	public unsafe partial struct VkPipelineExecutablePropertiesKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkShaderStageFlags stages;
		public fixed byte name[(int)Vulkan.MaxDescriptionSize];
		public fixed byte description[(int)Vulkan.MaxDescriptionSize];
		public uint subgroupSize;
	}

	public unsafe partial struct VkPipelineExecutableInfoKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong pipeline;
		public uint executableIndex;
	}

	public unsafe partial struct VkPipelineExecutableStatisticKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public fixed byte name[(int)Vulkan.MaxDescriptionSize];
		public fixed byte description[(int)Vulkan.MaxDescriptionSize];
		public VkPipelineExecutableStatisticFormatKHR format;
		public VkPipelineExecutableStatisticValueKHR value;
	}

	public unsafe partial struct VkPipelineExecutableInternalRepresentationKHR
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public fixed byte name[(int)Vulkan.MaxDescriptionSize];
		public fixed byte description[(int)Vulkan.MaxDescriptionSize];
		public RawBool isText;
		public UIntPtr dataSize;
		public IntPtr pData;
	}

	public unsafe partial struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool shaderDemoteToHelperInvocation;
	}

	public unsafe partial struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool texelBufferAlignment;
	}

	public unsafe partial struct VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong storageTexelBufferOffsetAlignmentBytes;
		public RawBool storageTexelBufferOffsetSingleTexelAlignment;
		public ulong uniformTexelBufferOffsetAlignmentBytes;
		public RawBool uniformTexelBufferOffsetSingleTexelAlignment;
	}

	public unsafe partial struct VkPhysicalDeviceSubgroupSizeControlFeaturesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool subgroupSizeControl;
		public RawBool computeFullSubgroups;
	}

	public unsafe partial struct VkPhysicalDeviceSubgroupSizeControlPropertiesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint minSubgroupSize;
		public uint maxSubgroupSize;
		public uint maxComputeWorkgroupSubgroups;
		public VkShaderStageFlags requiredSubgroupSizeStages;
	}

	public unsafe partial struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint requiredSubgroupSize;
	}

	public unsafe partial struct VkMemoryOpaqueCaptureAddressAllocateInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong opaqueCaptureAddress;
	}

	public unsafe partial struct VkDeviceMemoryOpaqueCaptureAddressInfo
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public ulong memory;
	}

	public unsafe partial struct VkPhysicalDeviceLineRasterizationFeaturesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool rectangularLines;
		public RawBool bresenhamLines;
		public RawBool smoothLines;
		public RawBool stippledRectangularLines;
		public RawBool stippledBresenhamLines;
		public RawBool stippledSmoothLines;
	}

	public unsafe partial struct VkPhysicalDeviceLineRasterizationPropertiesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public uint lineSubPixelPrecisionBits;
	}

	public unsafe partial struct VkPipelineRasterizationLineStateCreateInfoEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkLineRasterizationModeEXT lineRasterizationMode;
		public RawBool stippledLineEnable;
		public uint lineStippleFactor;
		public ushort lineStipplePattern;
	}

	public unsafe partial struct VkPhysicalDeviceVulkan11Features
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool storageBuffer16BitAccess;
		public RawBool uniformAndStorageBuffer16BitAccess;
		public RawBool storagePushConstant16;
		public RawBool storageInputOutput16;
		public RawBool multiview;
		public RawBool multiviewGeometryShader;
		public RawBool multiviewTessellationShader;
		public RawBool variablePointersStorageBuffer;
		public RawBool variablePointers;
		public RawBool protectedMemory;
		public RawBool samplerYcbcrConversion;
		public RawBool shaderDrawParameters;
	}

	public unsafe partial struct VkPhysicalDeviceVulkan11Properties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public fixed byte deviceUUID[(int)Vulkan.UuidSize];
		public fixed byte driverUUID[(int)Vulkan.UuidSize];
		public fixed byte deviceLUID[(int)Vulkan.LuidSize];
		public uint deviceNodeMask;
		public RawBool deviceLUIDValid;
		public uint subgroupSize;
		public VkShaderStageFlags subgroupSupportedStages;
		public VkSubgroupFeatureFlags subgroupSupportedOperations;
		public RawBool subgroupQuadOperationsInAllStages;
		public VkPointClippingBehavior pointClippingBehavior;
		public uint maxMultiviewViewCount;
		public uint maxMultiviewInstanceIndex;
		public RawBool protectedNoFault;
		public uint maxPerSetDescriptors;
		public ulong maxMemoryAllocationSize;
	}

	public unsafe partial struct VkPhysicalDeviceVulkan12Features
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool samplerMirrorClampToEdge;
		public RawBool drawIndirectCount;
		public RawBool storageBuffer8BitAccess;
		public RawBool uniformAndStorageBuffer8BitAccess;
		public RawBool storagePushConstant8;
		public RawBool shaderBufferInt64Atomics;
		public RawBool shaderSharedInt64Atomics;
		public RawBool shaderFloat16;
		public RawBool shaderInt8;
		public RawBool descriptorIndexing;
		public RawBool shaderInputAttachmentArrayDynamicIndexing;
		public RawBool shaderUniformTexelBufferArrayDynamicIndexing;
		public RawBool shaderStorageTexelBufferArrayDynamicIndexing;
		public RawBool shaderUniformBufferArrayNonUniformIndexing;
		public RawBool shaderSampledImageArrayNonUniformIndexing;
		public RawBool shaderStorageBufferArrayNonUniformIndexing;
		public RawBool shaderStorageImageArrayNonUniformIndexing;
		public RawBool shaderInputAttachmentArrayNonUniformIndexing;
		public RawBool shaderUniformTexelBufferArrayNonUniformIndexing;
		public RawBool shaderStorageTexelBufferArrayNonUniformIndexing;
		public RawBool descriptorBindingUniformBufferUpdateAfterBind;
		public RawBool descriptorBindingSampledImageUpdateAfterBind;
		public RawBool descriptorBindingStorageImageUpdateAfterBind;
		public RawBool descriptorBindingStorageBufferUpdateAfterBind;
		public RawBool descriptorBindingUniformTexelBufferUpdateAfterBind;
		public RawBool descriptorBindingStorageTexelBufferUpdateAfterBind;
		public RawBool descriptorBindingUpdateUnusedWhilePending;
		public RawBool descriptorBindingPartiallyBound;
		public RawBool descriptorBindingVariableDescriptorCount;
		public RawBool runtimeDescriptorArray;
		public RawBool samplerFilterMinmax;
		public RawBool scalarBlockLayout;
		public RawBool imagelessFramebuffer;
		public RawBool uniformBufferStandardLayout;
		public RawBool shaderSubgroupExtendedTypes;
		public RawBool separateDepthStencilLayouts;
		public RawBool hostQueryReset;
		public RawBool timelineSemaphore;
		public RawBool bufferDeviceAddress;
		public RawBool bufferDeviceAddressCaptureReplay;
		public RawBool bufferDeviceAddressMultiDevice;
		public RawBool vulkanMemoryModel;
		public RawBool vulkanMemoryModelDeviceScope;
		public RawBool vulkanMemoryModelAvailabilityVisibilityChains;
		public RawBool shaderOutputViewportIndex;
		public RawBool shaderOutputLayer;
		public RawBool subgroupBroadcastDynamicId;
	}

	public unsafe partial struct VkPhysicalDeviceVulkan12Properties
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkDriverId driverID;
		public fixed byte driverName[(int)Vulkan.MaxDriverNameSize];
		public fixed byte driverInfo[(int)Vulkan.MaxDriverInfoSize];
		public VkConformanceVersion conformanceVersion;
		public VkShaderFloatControlsIndependence denormBehaviorIndependence;
		public VkShaderFloatControlsIndependence roundingModeIndependence;
		public RawBool shaderSignedZeroInfNanPreserveFloat16;
		public RawBool shaderSignedZeroInfNanPreserveFloat32;
		public RawBool shaderSignedZeroInfNanPreserveFloat64;
		public RawBool shaderDenormPreserveFloat16;
		public RawBool shaderDenormPreserveFloat32;
		public RawBool shaderDenormPreserveFloat64;
		public RawBool shaderDenormFlushToZeroFloat16;
		public RawBool shaderDenormFlushToZeroFloat32;
		public RawBool shaderDenormFlushToZeroFloat64;
		public RawBool shaderRoundingModeRTEFloat16;
		public RawBool shaderRoundingModeRTEFloat32;
		public RawBool shaderRoundingModeRTEFloat64;
		public RawBool shaderRoundingModeRTZFloat16;
		public RawBool shaderRoundingModeRTZFloat32;
		public RawBool shaderRoundingModeRTZFloat64;
		public uint maxUpdateAfterBindDescriptorsInAllPools;
		public RawBool shaderUniformBufferArrayNonUniformIndexingNative;
		public RawBool shaderSampledImageArrayNonUniformIndexingNative;
		public RawBool shaderStorageBufferArrayNonUniformIndexingNative;
		public RawBool shaderStorageImageArrayNonUniformIndexingNative;
		public RawBool shaderInputAttachmentArrayNonUniformIndexingNative;
		public RawBool robustBufferAccessUpdateAfterBind;
		public RawBool quadDivergentImplicitLod;
		public uint maxPerStageDescriptorUpdateAfterBindSamplers;
		public uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
		public uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
		public uint maxPerStageDescriptorUpdateAfterBindSampledImages;
		public uint maxPerStageDescriptorUpdateAfterBindStorageImages;
		public uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
		public uint maxPerStageUpdateAfterBindResources;
		public uint maxDescriptorSetUpdateAfterBindSamplers;
		public uint maxDescriptorSetUpdateAfterBindUniformBuffers;
		public uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
		public uint maxDescriptorSetUpdateAfterBindStorageBuffers;
		public uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
		public uint maxDescriptorSetUpdateAfterBindSampledImages;
		public uint maxDescriptorSetUpdateAfterBindStorageImages;
		public uint maxDescriptorSetUpdateAfterBindInputAttachments;
		public VkResolveModeFlags supportedDepthResolveModes;
		public VkResolveModeFlags supportedStencilResolveModes;
		public RawBool independentResolveNone;
		public RawBool independentResolve;
		public RawBool filterMinmaxSingleComponentFormats;
		public RawBool filterMinmaxImageComponentMapping;
		public ulong maxTimelineSemaphoreValueDifference;
		public VkSampleCountFlags framebufferIntegerColorSampleCounts;
	}

	public unsafe partial struct VkPipelineCompilerControlCreateInfoAMD
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public VkPipelineCompilerControlFlagsAMD compilerControlFlags;
	}

	public unsafe partial struct VkPhysicalDeviceCoherentMemoryFeaturesAMD
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public RawBool deviceCoherentMemory;
	}

	public unsafe partial struct VkPhysicalDeviceToolPropertiesEXT
	{
		public VkStructureType sType;
		public IntPtr pNext;
		public fixed byte name[(int)Vulkan.MaxExtensionNameSize];
		public fixed byte version[(int)Vulkan.MaxExtensionNameSize];
		public VkToolPurposeFlagsEXT purposes;
		public fixed byte description[(int)Vulkan.MaxDescriptionSize];
		public fixed byte layer[(int)Vulkan.MaxExtensionNameSize];
	}

}
