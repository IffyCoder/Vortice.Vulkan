// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;
using Vortice.Mathematics;

namespace Vortice.Vulkan
{
	public unsafe partial struct VkApplicationInfo
	{
		/// <summary>
		/// The size of the <see cref="VkApplicationInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public byte* pApplicationName;
		public uint applicationVersion;
		public byte* pEngineName;
		public uint engineVersion;
		public uint apiVersion;
	}

	public unsafe partial struct VkInstanceCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkInstanceCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public VkInstanceCreateFlags flags;
		public VkApplicationInfo* pApplicationInfo;
		public uint enabledLayerCount;
		public byte* ppEnabledLayerNames;
		public uint enabledExtensionCount;
		public byte* ppEnabledExtensionNames;
	}

	public unsafe partial struct VkAllocationCallbacks
	{
		/// <summary>
		/// The size of the <see cref="VkAllocationCallbacks"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public void* pUserData;
		public IntPtr pfnAllocation;
		public IntPtr pfnReallocation;
		public IntPtr pfnFree;
		public IntPtr pfnInternalAllocation;
		public IntPtr pfnInternalFree;
	}

	public unsafe partial struct VkPhysicalDeviceFeatures
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceFeatures"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 220;

		public VkBool32 robustBufferAccess;
		public VkBool32 fullDrawIndexUint32;
		public VkBool32 imageCubeArray;
		public VkBool32 independentBlend;
		public VkBool32 geometryShader;
		public VkBool32 tessellationShader;
		public VkBool32 sampleRateShading;
		public VkBool32 dualSrcBlend;
		public VkBool32 logicOp;
		public VkBool32 multiDrawIndirect;
		public VkBool32 drawIndirectFirstInstance;
		public VkBool32 depthClamp;
		public VkBool32 depthBiasClamp;
		public VkBool32 fillModeNonSolid;
		public VkBool32 depthBounds;
		public VkBool32 wideLines;
		public VkBool32 largePoints;
		public VkBool32 alphaToOne;
		public VkBool32 multiViewport;
		public VkBool32 samplerAnisotropy;
		public VkBool32 textureCompressionETC2;
		public VkBool32 textureCompressionASTC_LDR;
		public VkBool32 textureCompressionBC;
		public VkBool32 occlusionQueryPrecise;
		public VkBool32 pipelineStatisticsQuery;
		public VkBool32 vertexPipelineStoresAndAtomics;
		public VkBool32 fragmentStoresAndAtomics;
		public VkBool32 shaderTessellationAndGeometryPointSize;
		public VkBool32 shaderImageGatherExtended;
		public VkBool32 shaderStorageImageExtendedFormats;
		public VkBool32 shaderStorageImageMultisample;
		public VkBool32 shaderStorageImageReadWithoutFormat;
		public VkBool32 shaderStorageImageWriteWithoutFormat;
		public VkBool32 shaderUniformBufferArrayDynamicIndexing;
		public VkBool32 shaderSampledImageArrayDynamicIndexing;
		public VkBool32 shaderStorageBufferArrayDynamicIndexing;
		public VkBool32 shaderStorageImageArrayDynamicIndexing;
		public VkBool32 shaderClipDistance;
		public VkBool32 shaderCullDistance;
		public VkBool32 shaderFloat64;
		public VkBool32 shaderInt64;
		public VkBool32 shaderInt16;
		public VkBool32 shaderResourceResidency;
		public VkBool32 shaderResourceMinLod;
		public VkBool32 sparseBinding;
		public VkBool32 sparseResidencyBuffer;
		public VkBool32 sparseResidencyImage2D;
		public VkBool32 sparseResidencyImage3D;
		public VkBool32 sparseResidency2Samples;
		public VkBool32 sparseResidency4Samples;
		public VkBool32 sparseResidency8Samples;
		public VkBool32 sparseResidency16Samples;
		public VkBool32 sparseResidencyAliased;
		public VkBool32 variableMultisampleRate;
		public VkBool32 inheritedQueries;
	}

	public unsafe partial struct VkFormatProperties
	{
		/// <summary>
		/// The size of the <see cref="VkFormatProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 12;

		public VkFormatFeatureFlags linearTilingFeatures;
		public VkFormatFeatureFlags optimalTilingFeatures;
		public VkFormatFeatureFlags bufferFeatures;
	}

	public unsafe partial struct VkExtent3D
	{
		/// <summary>
		/// The size of the <see cref="VkExtent3D"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 12;

		public uint width;
		public uint height;
		public uint depth;
	}

	public unsafe partial struct VkImageFormatProperties
	{
		/// <summary>
		/// The size of the <see cref="VkImageFormatProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkExtent3D maxExtent;
		public uint maxMipLevels;
		public uint maxArrayLayers;
		public VkSampleCountFlags sampleCounts;
		public ulong maxResourceSize;
	}

	public unsafe partial struct VkPhysicalDeviceLimits
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceLimits"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 504;

		public uint maxImageDimension1D;
		public uint maxImageDimension2D;
		public uint maxImageDimension3D;
		public uint maxImageDimensionCube;
		public uint maxImageArrayLayers;
		public uint maxTexelBufferElements;
		public uint maxUniformBufferRange;
		public uint maxStorageBufferRange;
		public uint maxPushConstantsSize;
		public uint maxMemoryAllocationCount;
		public uint maxSamplerAllocationCount;
		public ulong bufferImageGranularity;
		public ulong sparseAddressSpaceSize;
		public uint maxBoundDescriptorSets;
		public uint maxPerStageDescriptorSamplers;
		public uint maxPerStageDescriptorUniformBuffers;
		public uint maxPerStageDescriptorStorageBuffers;
		public uint maxPerStageDescriptorSampledImages;
		public uint maxPerStageDescriptorStorageImages;
		public uint maxPerStageDescriptorInputAttachments;
		public uint maxPerStageResources;
		public uint maxDescriptorSetSamplers;
		public uint maxDescriptorSetUniformBuffers;
		public uint maxDescriptorSetUniformBuffersDynamic;
		public uint maxDescriptorSetStorageBuffers;
		public uint maxDescriptorSetStorageBuffersDynamic;
		public uint maxDescriptorSetSampledImages;
		public uint maxDescriptorSetStorageImages;
		public uint maxDescriptorSetInputAttachments;
		public uint maxVertexInputAttributes;
		public uint maxVertexInputBindings;
		public uint maxVertexInputAttributeOffset;
		public uint maxVertexInputBindingStride;
		public uint maxVertexOutputComponents;
		public uint maxTessellationGenerationLevel;
		public uint maxTessellationPatchSize;
		public uint maxTessellationControlPerVertexInputComponents;
		public uint maxTessellationControlPerVertexOutputComponents;
		public uint maxTessellationControlPerPatchOutputComponents;
		public uint maxTessellationControlTotalOutputComponents;
		public uint maxTessellationEvaluationInputComponents;
		public uint maxTessellationEvaluationOutputComponents;
		public uint maxGeometryShaderInvocations;
		public uint maxGeometryInputComponents;
		public uint maxGeometryOutputComponents;
		public uint maxGeometryOutputVertices;
		public uint maxGeometryTotalOutputComponents;
		public uint maxFragmentInputComponents;
		public uint maxFragmentOutputAttachments;
		public uint maxFragmentDualSrcAttachments;
		public uint maxFragmentCombinedOutputResources;
		public uint maxComputeSharedMemorySize;
		public fixed uint maxComputeWorkGroupCount[3];
		public uint maxComputeWorkGroupInvocations;
		public fixed uint maxComputeWorkGroupSize[3];
		public uint subPixelPrecisionBits;
		public uint subTexelPrecisionBits;
		public uint mipmapPrecisionBits;
		public uint maxDrawIndexedIndexValue;
		public uint maxDrawIndirectCount;
		public float maxSamplerLodBias;
		public float maxSamplerAnisotropy;
		public uint maxViewports;
		public fixed uint maxViewportDimensions[2];
		public float viewportBoundsRange_0;
		public float viewportBoundsRange_1;
		public uint viewportSubPixelBits;
		public UIntPtr minMemoryMapAlignment;
		public ulong minTexelBufferOffsetAlignment;
		public ulong minUniformBufferOffsetAlignment;
		public ulong minStorageBufferOffsetAlignment;
		public int minTexelOffset;
		public uint maxTexelOffset;
		public int minTexelGatherOffset;
		public uint maxTexelGatherOffset;
		public float minInterpolationOffset;
		public float maxInterpolationOffset;
		public uint subPixelInterpolationOffsetBits;
		public uint maxFramebufferWidth;
		public uint maxFramebufferHeight;
		public uint maxFramebufferLayers;
		public VkSampleCountFlags framebufferColorSampleCounts;
		public VkSampleCountFlags framebufferDepthSampleCounts;
		public VkSampleCountFlags framebufferStencilSampleCounts;
		public VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
		public uint maxColorAttachments;
		public VkSampleCountFlags sampledImageColorSampleCounts;
		public VkSampleCountFlags sampledImageIntegerSampleCounts;
		public VkSampleCountFlags sampledImageDepthSampleCounts;
		public VkSampleCountFlags sampledImageStencilSampleCounts;
		public VkSampleCountFlags storageImageSampleCounts;
		public uint maxSampleMaskWords;
		public VkBool32 timestampComputeAndGraphics;
		public float timestampPeriod;
		public uint maxClipDistances;
		public uint maxCullDistances;
		public uint maxCombinedClipAndCullDistances;
		public uint discreteQueuePriorities;
		public float pointSizeRange_0;
		public float pointSizeRange_1;
		public float lineWidthRange_0;
		public float lineWidthRange_1;
		public float pointSizeGranularity;
		public float lineWidthGranularity;
		public VkBool32 strictLines;
		public VkBool32 standardSampleLocations;
		public ulong optimalBufferCopyOffsetAlignment;
		public ulong optimalBufferCopyRowPitchAlignment;
		public ulong nonCoherentAtomSize;
	}

	public unsafe partial struct VkPhysicalDeviceSparseProperties
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceSparseProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 20;

		public VkBool32 residencyStandard2DBlockShape;
		public VkBool32 residencyStandard2DMultisampleBlockShape;
		public VkBool32 residencyStandard3DBlockShape;
		public VkBool32 residencyAlignedMipSize;
		public VkBool32 residencyNonResidentStrict;
	}

	public unsafe partial struct VkPhysicalDeviceProperties
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 824;

		public uint apiVersion;
		public uint driverVersion;
		public uint vendorID;
		public uint deviceID;
		public VkPhysicalDeviceType deviceType;
		public char deviceName_0;
		public char deviceName_1;
		public char deviceName_2;
		public char deviceName_3;
		public char deviceName_4;
		public char deviceName_5;
		public char deviceName_6;
		public char deviceName_7;
		public char deviceName_8;
		public char deviceName_9;
		public char deviceName_10;
		public char deviceName_11;
		public char deviceName_12;
		public char deviceName_13;
		public char deviceName_14;
		public char deviceName_15;
		public char deviceName_16;
		public char deviceName_17;
		public char deviceName_18;
		public char deviceName_19;
		public char deviceName_20;
		public char deviceName_21;
		public char deviceName_22;
		public char deviceName_23;
		public char deviceName_24;
		public char deviceName_25;
		public char deviceName_26;
		public char deviceName_27;
		public char deviceName_28;
		public char deviceName_29;
		public char deviceName_30;
		public char deviceName_31;
		public char deviceName_32;
		public char deviceName_33;
		public char deviceName_34;
		public char deviceName_35;
		public char deviceName_36;
		public char deviceName_37;
		public char deviceName_38;
		public char deviceName_39;
		public char deviceName_40;
		public char deviceName_41;
		public char deviceName_42;
		public char deviceName_43;
		public char deviceName_44;
		public char deviceName_45;
		public char deviceName_46;
		public char deviceName_47;
		public char deviceName_48;
		public char deviceName_49;
		public char deviceName_50;
		public char deviceName_51;
		public char deviceName_52;
		public char deviceName_53;
		public char deviceName_54;
		public char deviceName_55;
		public char deviceName_56;
		public char deviceName_57;
		public char deviceName_58;
		public char deviceName_59;
		public char deviceName_60;
		public char deviceName_61;
		public char deviceName_62;
		public char deviceName_63;
		public char deviceName_64;
		public char deviceName_65;
		public char deviceName_66;
		public char deviceName_67;
		public char deviceName_68;
		public char deviceName_69;
		public char deviceName_70;
		public char deviceName_71;
		public char deviceName_72;
		public char deviceName_73;
		public char deviceName_74;
		public char deviceName_75;
		public char deviceName_76;
		public char deviceName_77;
		public char deviceName_78;
		public char deviceName_79;
		public char deviceName_80;
		public char deviceName_81;
		public char deviceName_82;
		public char deviceName_83;
		public char deviceName_84;
		public char deviceName_85;
		public char deviceName_86;
		public char deviceName_87;
		public char deviceName_88;
		public char deviceName_89;
		public char deviceName_90;
		public char deviceName_91;
		public char deviceName_92;
		public char deviceName_93;
		public char deviceName_94;
		public char deviceName_95;
		public char deviceName_96;
		public char deviceName_97;
		public char deviceName_98;
		public char deviceName_99;
		public char deviceName_100;
		public char deviceName_101;
		public char deviceName_102;
		public char deviceName_103;
		public char deviceName_104;
		public char deviceName_105;
		public char deviceName_106;
		public char deviceName_107;
		public char deviceName_108;
		public char deviceName_109;
		public char deviceName_110;
		public char deviceName_111;
		public char deviceName_112;
		public char deviceName_113;
		public char deviceName_114;
		public char deviceName_115;
		public char deviceName_116;
		public char deviceName_117;
		public char deviceName_118;
		public char deviceName_119;
		public char deviceName_120;
		public char deviceName_121;
		public char deviceName_122;
		public char deviceName_123;
		public char deviceName_124;
		public char deviceName_125;
		public char deviceName_126;
		public char deviceName_127;
		public char deviceName_128;
		public char deviceName_129;
		public char deviceName_130;
		public char deviceName_131;
		public char deviceName_132;
		public char deviceName_133;
		public char deviceName_134;
		public char deviceName_135;
		public char deviceName_136;
		public char deviceName_137;
		public char deviceName_138;
		public char deviceName_139;
		public char deviceName_140;
		public char deviceName_141;
		public char deviceName_142;
		public char deviceName_143;
		public char deviceName_144;
		public char deviceName_145;
		public char deviceName_146;
		public char deviceName_147;
		public char deviceName_148;
		public char deviceName_149;
		public char deviceName_150;
		public char deviceName_151;
		public char deviceName_152;
		public char deviceName_153;
		public char deviceName_154;
		public char deviceName_155;
		public char deviceName_156;
		public char deviceName_157;
		public char deviceName_158;
		public char deviceName_159;
		public char deviceName_160;
		public char deviceName_161;
		public char deviceName_162;
		public char deviceName_163;
		public char deviceName_164;
		public char deviceName_165;
		public char deviceName_166;
		public char deviceName_167;
		public char deviceName_168;
		public char deviceName_169;
		public char deviceName_170;
		public char deviceName_171;
		public char deviceName_172;
		public char deviceName_173;
		public char deviceName_174;
		public char deviceName_175;
		public char deviceName_176;
		public char deviceName_177;
		public char deviceName_178;
		public char deviceName_179;
		public char deviceName_180;
		public char deviceName_181;
		public char deviceName_182;
		public char deviceName_183;
		public char deviceName_184;
		public char deviceName_185;
		public char deviceName_186;
		public char deviceName_187;
		public char deviceName_188;
		public char deviceName_189;
		public char deviceName_190;
		public char deviceName_191;
		public char deviceName_192;
		public char deviceName_193;
		public char deviceName_194;
		public char deviceName_195;
		public char deviceName_196;
		public char deviceName_197;
		public char deviceName_198;
		public char deviceName_199;
		public char deviceName_200;
		public char deviceName_201;
		public char deviceName_202;
		public char deviceName_203;
		public char deviceName_204;
		public char deviceName_205;
		public char deviceName_206;
		public char deviceName_207;
		public char deviceName_208;
		public char deviceName_209;
		public char deviceName_210;
		public char deviceName_211;
		public char deviceName_212;
		public char deviceName_213;
		public char deviceName_214;
		public char deviceName_215;
		public char deviceName_216;
		public char deviceName_217;
		public char deviceName_218;
		public char deviceName_219;
		public char deviceName_220;
		public char deviceName_221;
		public char deviceName_222;
		public char deviceName_223;
		public char deviceName_224;
		public char deviceName_225;
		public char deviceName_226;
		public char deviceName_227;
		public char deviceName_228;
		public char deviceName_229;
		public char deviceName_230;
		public char deviceName_231;
		public char deviceName_232;
		public char deviceName_233;
		public char deviceName_234;
		public char deviceName_235;
		public char deviceName_236;
		public char deviceName_237;
		public char deviceName_238;
		public char deviceName_239;
		public char deviceName_240;
		public char deviceName_241;
		public char deviceName_242;
		public char deviceName_243;
		public char deviceName_244;
		public char deviceName_245;
		public char deviceName_246;
		public char deviceName_247;
		public char deviceName_248;
		public char deviceName_249;
		public char deviceName_250;
		public char deviceName_251;
		public char deviceName_252;
		public char deviceName_253;
		public char deviceName_254;
		public char deviceName_255;
		public fixed byte pipelineCacheUUID[16];
		public VkPhysicalDeviceLimits limits;
		public VkPhysicalDeviceSparseProperties sparseProperties;
	}

	public unsafe partial struct VkQueueFamilyProperties
	{
		/// <summary>
		/// The size of the <see cref="VkQueueFamilyProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkQueueFlags queueFlags;
		public uint queueCount;
		public uint timestampValidBits;
		public VkExtent3D minImageTransferGranularity;
	}

	public unsafe partial struct VkMemoryType
	{
		/// <summary>
		/// The size of the <see cref="VkMemoryType"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 8;

		public VkMemoryPropertyFlags propertyFlags;
		public uint heapIndex;
	}

	public unsafe partial struct VkMemoryHeap
	{
		/// <summary>
		/// The size of the <see cref="VkMemoryHeap"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public ulong size;
		public VkMemoryHeapFlags flags;
	}

	public unsafe partial struct VkPhysicalDeviceMemoryProperties
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceMemoryProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 520;

		public uint memoryTypeCount;
		public VkMemoryType memoryTypes_0;
		public VkMemoryType memoryTypes_1;
		public VkMemoryType memoryTypes_2;
		public VkMemoryType memoryTypes_3;
		public VkMemoryType memoryTypes_4;
		public VkMemoryType memoryTypes_5;
		public VkMemoryType memoryTypes_6;
		public VkMemoryType memoryTypes_7;
		public VkMemoryType memoryTypes_8;
		public VkMemoryType memoryTypes_9;
		public VkMemoryType memoryTypes_10;
		public VkMemoryType memoryTypes_11;
		public VkMemoryType memoryTypes_12;
		public VkMemoryType memoryTypes_13;
		public VkMemoryType memoryTypes_14;
		public VkMemoryType memoryTypes_15;
		public VkMemoryType memoryTypes_16;
		public VkMemoryType memoryTypes_17;
		public VkMemoryType memoryTypes_18;
		public VkMemoryType memoryTypes_19;
		public VkMemoryType memoryTypes_20;
		public VkMemoryType memoryTypes_21;
		public VkMemoryType memoryTypes_22;
		public VkMemoryType memoryTypes_23;
		public VkMemoryType memoryTypes_24;
		public VkMemoryType memoryTypes_25;
		public VkMemoryType memoryTypes_26;
		public VkMemoryType memoryTypes_27;
		public VkMemoryType memoryTypes_28;
		public VkMemoryType memoryTypes_29;
		public VkMemoryType memoryTypes_30;
		public VkMemoryType memoryTypes_31;
		public uint memoryHeapCount;
		public VkMemoryHeap memoryHeaps_0;
		public VkMemoryHeap memoryHeaps_1;
		public VkMemoryHeap memoryHeaps_2;
		public VkMemoryHeap memoryHeaps_3;
		public VkMemoryHeap memoryHeaps_4;
		public VkMemoryHeap memoryHeaps_5;
		public VkMemoryHeap memoryHeaps_6;
		public VkMemoryHeap memoryHeaps_7;
		public VkMemoryHeap memoryHeaps_8;
		public VkMemoryHeap memoryHeaps_9;
		public VkMemoryHeap memoryHeaps_10;
		public VkMemoryHeap memoryHeaps_11;
		public VkMemoryHeap memoryHeaps_12;
		public VkMemoryHeap memoryHeaps_13;
		public VkMemoryHeap memoryHeaps_14;
		public VkMemoryHeap memoryHeaps_15;
	}

	public unsafe partial struct VkDeviceQueueCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkDeviceQueueCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkDeviceQueueCreateFlags flags;
		public uint queueFamilyIndex;
		public uint queueCount;
		public float* pQueuePriorities;
	}

	public unsafe partial struct VkDeviceCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkDeviceCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 72;

		public VkStructureType sType;
		public void* pNext;
		public VkDeviceCreateFlags flags;
		public uint queueCreateInfoCount;
		public VkDeviceQueueCreateInfo* pQueueCreateInfos;
		public uint enabledLayerCount;
		public byte* ppEnabledLayerNames;
		public uint enabledExtensionCount;
		public byte* ppEnabledExtensionNames;
		public VkPhysicalDeviceFeatures* pEnabledFeatures;
	}

	public unsafe partial struct VkExtensionProperties
	{
		/// <summary>
		/// The size of the <see cref="VkExtensionProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 260;

		public char extensionName_0;
		public char extensionName_1;
		public char extensionName_2;
		public char extensionName_3;
		public char extensionName_4;
		public char extensionName_5;
		public char extensionName_6;
		public char extensionName_7;
		public char extensionName_8;
		public char extensionName_9;
		public char extensionName_10;
		public char extensionName_11;
		public char extensionName_12;
		public char extensionName_13;
		public char extensionName_14;
		public char extensionName_15;
		public char extensionName_16;
		public char extensionName_17;
		public char extensionName_18;
		public char extensionName_19;
		public char extensionName_20;
		public char extensionName_21;
		public char extensionName_22;
		public char extensionName_23;
		public char extensionName_24;
		public char extensionName_25;
		public char extensionName_26;
		public char extensionName_27;
		public char extensionName_28;
		public char extensionName_29;
		public char extensionName_30;
		public char extensionName_31;
		public char extensionName_32;
		public char extensionName_33;
		public char extensionName_34;
		public char extensionName_35;
		public char extensionName_36;
		public char extensionName_37;
		public char extensionName_38;
		public char extensionName_39;
		public char extensionName_40;
		public char extensionName_41;
		public char extensionName_42;
		public char extensionName_43;
		public char extensionName_44;
		public char extensionName_45;
		public char extensionName_46;
		public char extensionName_47;
		public char extensionName_48;
		public char extensionName_49;
		public char extensionName_50;
		public char extensionName_51;
		public char extensionName_52;
		public char extensionName_53;
		public char extensionName_54;
		public char extensionName_55;
		public char extensionName_56;
		public char extensionName_57;
		public char extensionName_58;
		public char extensionName_59;
		public char extensionName_60;
		public char extensionName_61;
		public char extensionName_62;
		public char extensionName_63;
		public char extensionName_64;
		public char extensionName_65;
		public char extensionName_66;
		public char extensionName_67;
		public char extensionName_68;
		public char extensionName_69;
		public char extensionName_70;
		public char extensionName_71;
		public char extensionName_72;
		public char extensionName_73;
		public char extensionName_74;
		public char extensionName_75;
		public char extensionName_76;
		public char extensionName_77;
		public char extensionName_78;
		public char extensionName_79;
		public char extensionName_80;
		public char extensionName_81;
		public char extensionName_82;
		public char extensionName_83;
		public char extensionName_84;
		public char extensionName_85;
		public char extensionName_86;
		public char extensionName_87;
		public char extensionName_88;
		public char extensionName_89;
		public char extensionName_90;
		public char extensionName_91;
		public char extensionName_92;
		public char extensionName_93;
		public char extensionName_94;
		public char extensionName_95;
		public char extensionName_96;
		public char extensionName_97;
		public char extensionName_98;
		public char extensionName_99;
		public char extensionName_100;
		public char extensionName_101;
		public char extensionName_102;
		public char extensionName_103;
		public char extensionName_104;
		public char extensionName_105;
		public char extensionName_106;
		public char extensionName_107;
		public char extensionName_108;
		public char extensionName_109;
		public char extensionName_110;
		public char extensionName_111;
		public char extensionName_112;
		public char extensionName_113;
		public char extensionName_114;
		public char extensionName_115;
		public char extensionName_116;
		public char extensionName_117;
		public char extensionName_118;
		public char extensionName_119;
		public char extensionName_120;
		public char extensionName_121;
		public char extensionName_122;
		public char extensionName_123;
		public char extensionName_124;
		public char extensionName_125;
		public char extensionName_126;
		public char extensionName_127;
		public char extensionName_128;
		public char extensionName_129;
		public char extensionName_130;
		public char extensionName_131;
		public char extensionName_132;
		public char extensionName_133;
		public char extensionName_134;
		public char extensionName_135;
		public char extensionName_136;
		public char extensionName_137;
		public char extensionName_138;
		public char extensionName_139;
		public char extensionName_140;
		public char extensionName_141;
		public char extensionName_142;
		public char extensionName_143;
		public char extensionName_144;
		public char extensionName_145;
		public char extensionName_146;
		public char extensionName_147;
		public char extensionName_148;
		public char extensionName_149;
		public char extensionName_150;
		public char extensionName_151;
		public char extensionName_152;
		public char extensionName_153;
		public char extensionName_154;
		public char extensionName_155;
		public char extensionName_156;
		public char extensionName_157;
		public char extensionName_158;
		public char extensionName_159;
		public char extensionName_160;
		public char extensionName_161;
		public char extensionName_162;
		public char extensionName_163;
		public char extensionName_164;
		public char extensionName_165;
		public char extensionName_166;
		public char extensionName_167;
		public char extensionName_168;
		public char extensionName_169;
		public char extensionName_170;
		public char extensionName_171;
		public char extensionName_172;
		public char extensionName_173;
		public char extensionName_174;
		public char extensionName_175;
		public char extensionName_176;
		public char extensionName_177;
		public char extensionName_178;
		public char extensionName_179;
		public char extensionName_180;
		public char extensionName_181;
		public char extensionName_182;
		public char extensionName_183;
		public char extensionName_184;
		public char extensionName_185;
		public char extensionName_186;
		public char extensionName_187;
		public char extensionName_188;
		public char extensionName_189;
		public char extensionName_190;
		public char extensionName_191;
		public char extensionName_192;
		public char extensionName_193;
		public char extensionName_194;
		public char extensionName_195;
		public char extensionName_196;
		public char extensionName_197;
		public char extensionName_198;
		public char extensionName_199;
		public char extensionName_200;
		public char extensionName_201;
		public char extensionName_202;
		public char extensionName_203;
		public char extensionName_204;
		public char extensionName_205;
		public char extensionName_206;
		public char extensionName_207;
		public char extensionName_208;
		public char extensionName_209;
		public char extensionName_210;
		public char extensionName_211;
		public char extensionName_212;
		public char extensionName_213;
		public char extensionName_214;
		public char extensionName_215;
		public char extensionName_216;
		public char extensionName_217;
		public char extensionName_218;
		public char extensionName_219;
		public char extensionName_220;
		public char extensionName_221;
		public char extensionName_222;
		public char extensionName_223;
		public char extensionName_224;
		public char extensionName_225;
		public char extensionName_226;
		public char extensionName_227;
		public char extensionName_228;
		public char extensionName_229;
		public char extensionName_230;
		public char extensionName_231;
		public char extensionName_232;
		public char extensionName_233;
		public char extensionName_234;
		public char extensionName_235;
		public char extensionName_236;
		public char extensionName_237;
		public char extensionName_238;
		public char extensionName_239;
		public char extensionName_240;
		public char extensionName_241;
		public char extensionName_242;
		public char extensionName_243;
		public char extensionName_244;
		public char extensionName_245;
		public char extensionName_246;
		public char extensionName_247;
		public char extensionName_248;
		public char extensionName_249;
		public char extensionName_250;
		public char extensionName_251;
		public char extensionName_252;
		public char extensionName_253;
		public char extensionName_254;
		public char extensionName_255;
		public uint specVersion;
	}

	public unsafe partial struct VkLayerProperties
	{
		/// <summary>
		/// The size of the <see cref="VkLayerProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 520;

		public char layerName_0;
		public char layerName_1;
		public char layerName_2;
		public char layerName_3;
		public char layerName_4;
		public char layerName_5;
		public char layerName_6;
		public char layerName_7;
		public char layerName_8;
		public char layerName_9;
		public char layerName_10;
		public char layerName_11;
		public char layerName_12;
		public char layerName_13;
		public char layerName_14;
		public char layerName_15;
		public char layerName_16;
		public char layerName_17;
		public char layerName_18;
		public char layerName_19;
		public char layerName_20;
		public char layerName_21;
		public char layerName_22;
		public char layerName_23;
		public char layerName_24;
		public char layerName_25;
		public char layerName_26;
		public char layerName_27;
		public char layerName_28;
		public char layerName_29;
		public char layerName_30;
		public char layerName_31;
		public char layerName_32;
		public char layerName_33;
		public char layerName_34;
		public char layerName_35;
		public char layerName_36;
		public char layerName_37;
		public char layerName_38;
		public char layerName_39;
		public char layerName_40;
		public char layerName_41;
		public char layerName_42;
		public char layerName_43;
		public char layerName_44;
		public char layerName_45;
		public char layerName_46;
		public char layerName_47;
		public char layerName_48;
		public char layerName_49;
		public char layerName_50;
		public char layerName_51;
		public char layerName_52;
		public char layerName_53;
		public char layerName_54;
		public char layerName_55;
		public char layerName_56;
		public char layerName_57;
		public char layerName_58;
		public char layerName_59;
		public char layerName_60;
		public char layerName_61;
		public char layerName_62;
		public char layerName_63;
		public char layerName_64;
		public char layerName_65;
		public char layerName_66;
		public char layerName_67;
		public char layerName_68;
		public char layerName_69;
		public char layerName_70;
		public char layerName_71;
		public char layerName_72;
		public char layerName_73;
		public char layerName_74;
		public char layerName_75;
		public char layerName_76;
		public char layerName_77;
		public char layerName_78;
		public char layerName_79;
		public char layerName_80;
		public char layerName_81;
		public char layerName_82;
		public char layerName_83;
		public char layerName_84;
		public char layerName_85;
		public char layerName_86;
		public char layerName_87;
		public char layerName_88;
		public char layerName_89;
		public char layerName_90;
		public char layerName_91;
		public char layerName_92;
		public char layerName_93;
		public char layerName_94;
		public char layerName_95;
		public char layerName_96;
		public char layerName_97;
		public char layerName_98;
		public char layerName_99;
		public char layerName_100;
		public char layerName_101;
		public char layerName_102;
		public char layerName_103;
		public char layerName_104;
		public char layerName_105;
		public char layerName_106;
		public char layerName_107;
		public char layerName_108;
		public char layerName_109;
		public char layerName_110;
		public char layerName_111;
		public char layerName_112;
		public char layerName_113;
		public char layerName_114;
		public char layerName_115;
		public char layerName_116;
		public char layerName_117;
		public char layerName_118;
		public char layerName_119;
		public char layerName_120;
		public char layerName_121;
		public char layerName_122;
		public char layerName_123;
		public char layerName_124;
		public char layerName_125;
		public char layerName_126;
		public char layerName_127;
		public char layerName_128;
		public char layerName_129;
		public char layerName_130;
		public char layerName_131;
		public char layerName_132;
		public char layerName_133;
		public char layerName_134;
		public char layerName_135;
		public char layerName_136;
		public char layerName_137;
		public char layerName_138;
		public char layerName_139;
		public char layerName_140;
		public char layerName_141;
		public char layerName_142;
		public char layerName_143;
		public char layerName_144;
		public char layerName_145;
		public char layerName_146;
		public char layerName_147;
		public char layerName_148;
		public char layerName_149;
		public char layerName_150;
		public char layerName_151;
		public char layerName_152;
		public char layerName_153;
		public char layerName_154;
		public char layerName_155;
		public char layerName_156;
		public char layerName_157;
		public char layerName_158;
		public char layerName_159;
		public char layerName_160;
		public char layerName_161;
		public char layerName_162;
		public char layerName_163;
		public char layerName_164;
		public char layerName_165;
		public char layerName_166;
		public char layerName_167;
		public char layerName_168;
		public char layerName_169;
		public char layerName_170;
		public char layerName_171;
		public char layerName_172;
		public char layerName_173;
		public char layerName_174;
		public char layerName_175;
		public char layerName_176;
		public char layerName_177;
		public char layerName_178;
		public char layerName_179;
		public char layerName_180;
		public char layerName_181;
		public char layerName_182;
		public char layerName_183;
		public char layerName_184;
		public char layerName_185;
		public char layerName_186;
		public char layerName_187;
		public char layerName_188;
		public char layerName_189;
		public char layerName_190;
		public char layerName_191;
		public char layerName_192;
		public char layerName_193;
		public char layerName_194;
		public char layerName_195;
		public char layerName_196;
		public char layerName_197;
		public char layerName_198;
		public char layerName_199;
		public char layerName_200;
		public char layerName_201;
		public char layerName_202;
		public char layerName_203;
		public char layerName_204;
		public char layerName_205;
		public char layerName_206;
		public char layerName_207;
		public char layerName_208;
		public char layerName_209;
		public char layerName_210;
		public char layerName_211;
		public char layerName_212;
		public char layerName_213;
		public char layerName_214;
		public char layerName_215;
		public char layerName_216;
		public char layerName_217;
		public char layerName_218;
		public char layerName_219;
		public char layerName_220;
		public char layerName_221;
		public char layerName_222;
		public char layerName_223;
		public char layerName_224;
		public char layerName_225;
		public char layerName_226;
		public char layerName_227;
		public char layerName_228;
		public char layerName_229;
		public char layerName_230;
		public char layerName_231;
		public char layerName_232;
		public char layerName_233;
		public char layerName_234;
		public char layerName_235;
		public char layerName_236;
		public char layerName_237;
		public char layerName_238;
		public char layerName_239;
		public char layerName_240;
		public char layerName_241;
		public char layerName_242;
		public char layerName_243;
		public char layerName_244;
		public char layerName_245;
		public char layerName_246;
		public char layerName_247;
		public char layerName_248;
		public char layerName_249;
		public char layerName_250;
		public char layerName_251;
		public char layerName_252;
		public char layerName_253;
		public char layerName_254;
		public char layerName_255;
		public uint specVersion;
		public uint implementationVersion;
		public char description_0;
		public char description_1;
		public char description_2;
		public char description_3;
		public char description_4;
		public char description_5;
		public char description_6;
		public char description_7;
		public char description_8;
		public char description_9;
		public char description_10;
		public char description_11;
		public char description_12;
		public char description_13;
		public char description_14;
		public char description_15;
		public char description_16;
		public char description_17;
		public char description_18;
		public char description_19;
		public char description_20;
		public char description_21;
		public char description_22;
		public char description_23;
		public char description_24;
		public char description_25;
		public char description_26;
		public char description_27;
		public char description_28;
		public char description_29;
		public char description_30;
		public char description_31;
		public char description_32;
		public char description_33;
		public char description_34;
		public char description_35;
		public char description_36;
		public char description_37;
		public char description_38;
		public char description_39;
		public char description_40;
		public char description_41;
		public char description_42;
		public char description_43;
		public char description_44;
		public char description_45;
		public char description_46;
		public char description_47;
		public char description_48;
		public char description_49;
		public char description_50;
		public char description_51;
		public char description_52;
		public char description_53;
		public char description_54;
		public char description_55;
		public char description_56;
		public char description_57;
		public char description_58;
		public char description_59;
		public char description_60;
		public char description_61;
		public char description_62;
		public char description_63;
		public char description_64;
		public char description_65;
		public char description_66;
		public char description_67;
		public char description_68;
		public char description_69;
		public char description_70;
		public char description_71;
		public char description_72;
		public char description_73;
		public char description_74;
		public char description_75;
		public char description_76;
		public char description_77;
		public char description_78;
		public char description_79;
		public char description_80;
		public char description_81;
		public char description_82;
		public char description_83;
		public char description_84;
		public char description_85;
		public char description_86;
		public char description_87;
		public char description_88;
		public char description_89;
		public char description_90;
		public char description_91;
		public char description_92;
		public char description_93;
		public char description_94;
		public char description_95;
		public char description_96;
		public char description_97;
		public char description_98;
		public char description_99;
		public char description_100;
		public char description_101;
		public char description_102;
		public char description_103;
		public char description_104;
		public char description_105;
		public char description_106;
		public char description_107;
		public char description_108;
		public char description_109;
		public char description_110;
		public char description_111;
		public char description_112;
		public char description_113;
		public char description_114;
		public char description_115;
		public char description_116;
		public char description_117;
		public char description_118;
		public char description_119;
		public char description_120;
		public char description_121;
		public char description_122;
		public char description_123;
		public char description_124;
		public char description_125;
		public char description_126;
		public char description_127;
		public char description_128;
		public char description_129;
		public char description_130;
		public char description_131;
		public char description_132;
		public char description_133;
		public char description_134;
		public char description_135;
		public char description_136;
		public char description_137;
		public char description_138;
		public char description_139;
		public char description_140;
		public char description_141;
		public char description_142;
		public char description_143;
		public char description_144;
		public char description_145;
		public char description_146;
		public char description_147;
		public char description_148;
		public char description_149;
		public char description_150;
		public char description_151;
		public char description_152;
		public char description_153;
		public char description_154;
		public char description_155;
		public char description_156;
		public char description_157;
		public char description_158;
		public char description_159;
		public char description_160;
		public char description_161;
		public char description_162;
		public char description_163;
		public char description_164;
		public char description_165;
		public char description_166;
		public char description_167;
		public char description_168;
		public char description_169;
		public char description_170;
		public char description_171;
		public char description_172;
		public char description_173;
		public char description_174;
		public char description_175;
		public char description_176;
		public char description_177;
		public char description_178;
		public char description_179;
		public char description_180;
		public char description_181;
		public char description_182;
		public char description_183;
		public char description_184;
		public char description_185;
		public char description_186;
		public char description_187;
		public char description_188;
		public char description_189;
		public char description_190;
		public char description_191;
		public char description_192;
		public char description_193;
		public char description_194;
		public char description_195;
		public char description_196;
		public char description_197;
		public char description_198;
		public char description_199;
		public char description_200;
		public char description_201;
		public char description_202;
		public char description_203;
		public char description_204;
		public char description_205;
		public char description_206;
		public char description_207;
		public char description_208;
		public char description_209;
		public char description_210;
		public char description_211;
		public char description_212;
		public char description_213;
		public char description_214;
		public char description_215;
		public char description_216;
		public char description_217;
		public char description_218;
		public char description_219;
		public char description_220;
		public char description_221;
		public char description_222;
		public char description_223;
		public char description_224;
		public char description_225;
		public char description_226;
		public char description_227;
		public char description_228;
		public char description_229;
		public char description_230;
		public char description_231;
		public char description_232;
		public char description_233;
		public char description_234;
		public char description_235;
		public char description_236;
		public char description_237;
		public char description_238;
		public char description_239;
		public char description_240;
		public char description_241;
		public char description_242;
		public char description_243;
		public char description_244;
		public char description_245;
		public char description_246;
		public char description_247;
		public char description_248;
		public char description_249;
		public char description_250;
		public char description_251;
		public char description_252;
		public char description_253;
		public char description_254;
		public char description_255;
	}

	public unsafe partial struct VkSubmitInfo
	{
		/// <summary>
		/// The size of the <see cref="VkSubmitInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 72;

		public VkStructureType sType;
		public void* pNext;
		public uint waitSemaphoreCount;
		public VkSemaphore* pWaitSemaphores;
		public VkPipelineStageFlags* pWaitDstStageMask;
		public uint commandBufferCount;
		public VkCommandBuffer* pCommandBuffers;
		public uint signalSemaphoreCount;
		public VkSemaphore* pSignalSemaphores;
	}

	public unsafe partial struct VkMemoryAllocateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkMemoryAllocateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public ulong allocationSize;
		public uint memoryTypeIndex;
	}

	public unsafe partial struct VkMappedMemoryRange
	{
		/// <summary>
		/// The size of the <see cref="VkMappedMemoryRange"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkDeviceMemory memory;
		public ulong offset;
		public ulong size;
	}

	public unsafe partial struct VkMemoryRequirements
	{
		/// <summary>
		/// The size of the <see cref="VkMemoryRequirements"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public ulong size;
		public ulong alignment;
		public uint memoryTypeBits;
	}

	public unsafe partial struct VkSparseImageFormatProperties
	{
		/// <summary>
		/// The size of the <see cref="VkSparseImageFormatProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 20;

		public VkImageAspectFlags aspectMask;
		public VkExtent3D imageGranularity;
		public VkSparseImageFormatFlags flags;
	}

	public unsafe partial struct VkSparseImageMemoryRequirements
	{
		/// <summary>
		/// The size of the <see cref="VkSparseImageMemoryRequirements"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkSparseImageFormatProperties formatProperties;
		public uint imageMipTailFirstLod;
		public ulong imageMipTailSize;
		public ulong imageMipTailOffset;
		public ulong imageMipTailStride;
	}

	public unsafe partial struct VkSparseMemoryBind
	{
		/// <summary>
		/// The size of the <see cref="VkSparseMemoryBind"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public ulong resourceOffset;
		public ulong size;
		public VkDeviceMemory memory;
		public ulong memoryOffset;
		public VkSparseMemoryBindFlags flags;
	}

	public unsafe partial struct VkSparseBufferMemoryBindInfo
	{
		/// <summary>
		/// The size of the <see cref="VkSparseBufferMemoryBindInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkBuffer buffer;
		public uint bindCount;
		public VkSparseMemoryBind* pBinds;
	}

	public unsafe partial struct VkSparseImageOpaqueMemoryBindInfo
	{
		/// <summary>
		/// The size of the <see cref="VkSparseImageOpaqueMemoryBindInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkImage image;
		public uint bindCount;
		public VkSparseMemoryBind* pBinds;
	}

	public unsafe partial struct VkImageSubresource
	{
		/// <summary>
		/// The size of the <see cref="VkImageSubresource"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 12;

		public VkImageAspectFlags aspectMask;
		public uint mipLevel;
		public uint arrayLayer;
	}

	public unsafe partial struct VkOffset3D
	{
		/// <summary>
		/// The size of the <see cref="VkOffset3D"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 12;

		public int x;
		public int y;
		public int z;
	}

	public unsafe partial struct VkSparseImageMemoryBind
	{
		/// <summary>
		/// The size of the <see cref="VkSparseImageMemoryBind"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkImageSubresource subresource;
		public VkOffset3D offset;
		public VkExtent3D extent;
		public VkDeviceMemory memory;
		public ulong memoryOffset;
		public VkSparseMemoryBindFlags flags;
	}

	public unsafe partial struct VkSparseImageMemoryBindInfo
	{
		/// <summary>
		/// The size of the <see cref="VkSparseImageMemoryBindInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkImage image;
		public uint bindCount;
		public VkSparseImageMemoryBind* pBinds;
	}

	public unsafe partial struct VkBindSparseInfo
	{
		/// <summary>
		/// The size of the <see cref="VkBindSparseInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 96;

		public VkStructureType sType;
		public void* pNext;
		public uint waitSemaphoreCount;
		public VkSemaphore* pWaitSemaphores;
		public uint bufferBindCount;
		public VkSparseBufferMemoryBindInfo* pBufferBinds;
		public uint imageOpaqueBindCount;
		public VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds;
		public uint imageBindCount;
		public VkSparseImageMemoryBindInfo* pImageBinds;
		public uint signalSemaphoreCount;
		public VkSemaphore* pSignalSemaphores;
	}

	public unsafe partial struct VkFenceCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkFenceCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkFenceCreateFlags flags;
	}

	public unsafe partial struct VkSemaphoreCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkSemaphoreCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkSemaphoreCreateFlags flags;
	}

	public unsafe partial struct VkEventCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkEventCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkEventCreateFlags flags;
	}

	public unsafe partial struct VkQueryPoolCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkQueryPoolCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkQueryPoolCreateFlags flags;
		public VkQueryType queryType;
		public uint queryCount;
		public VkQueryPipelineStatisticFlags pipelineStatistics;
	}

	public unsafe partial struct VkBufferCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkBufferCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 56;

		public VkStructureType sType;
		public void* pNext;
		public VkBufferCreateFlags flags;
		public ulong size;
		public VkBufferUsageFlags usage;
		public VkSharingMode sharingMode;
		public uint queueFamilyIndexCount;
		public uint* pQueueFamilyIndices;
	}

	public unsafe partial struct VkBufferViewCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkBufferViewCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 56;

		public VkStructureType sType;
		public void* pNext;
		public VkBufferViewCreateFlags flags;
		public VkBuffer buffer;
		public VkFormat format;
		public ulong offset;
		public ulong range;
	}

	public unsafe partial struct VkImageCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkImageCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 88;

		public VkStructureType sType;
		public void* pNext;
		public VkImageCreateFlags flags;
		public VkImageType imageType;
		public VkFormat format;
		public VkExtent3D extent;
		public uint mipLevels;
		public uint arrayLayers;
		public VkSampleCountFlags samples;
		public VkImageTiling tiling;
		public VkImageUsageFlags usage;
		public VkSharingMode sharingMode;
		public uint queueFamilyIndexCount;
		public uint* pQueueFamilyIndices;
		public VkImageLayout initialLayout;
	}

	public unsafe partial struct VkSubresourceLayout
	{
		/// <summary>
		/// The size of the <see cref="VkSubresourceLayout"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public ulong offset;
		public ulong size;
		public ulong rowPitch;
		public ulong arrayPitch;
		public ulong depthPitch;
	}

	public unsafe partial struct VkComponentMapping
	{
		/// <summary>
		/// The size of the <see cref="VkComponentMapping"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public VkComponentSwizzle r;
		public VkComponentSwizzle g;
		public VkComponentSwizzle b;
		public VkComponentSwizzle a;
	}

	public unsafe partial struct VkImageSubresourceRange
	{
		/// <summary>
		/// The size of the <see cref="VkImageSubresourceRange"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 20;

		public VkImageAspectFlags aspectMask;
		public uint baseMipLevel;
		public uint levelCount;
		public uint baseArrayLayer;
		public uint layerCount;
	}

	public unsafe partial struct VkImageViewCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkImageViewCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 80;

		public VkStructureType sType;
		public void* pNext;
		public VkImageViewCreateFlags flags;
		public VkImage image;
		public VkImageViewType viewType;
		public VkFormat format;
		public VkComponentMapping components;
		public VkImageSubresourceRange subresourceRange;
	}

	public unsafe partial struct VkShaderModuleCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkShaderModuleCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkShaderModuleCreateFlags flags;
		public UIntPtr codeSize;
		public uint* pCode;
	}

	public unsafe partial struct VkPipelineCacheCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineCacheCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCacheCreateFlags flags;
		public UIntPtr initialDataSize;
		public void* pInitialData;
	}

	public unsafe partial struct VkSpecializationMapEntry
	{
		/// <summary>
		/// The size of the <see cref="VkSpecializationMapEntry"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public uint constantID;
		public uint offset;
		public UIntPtr size;
	}

	public unsafe partial struct VkSpecializationInfo
	{
		/// <summary>
		/// The size of the <see cref="VkSpecializationInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public uint mapEntryCount;
		public VkSpecializationMapEntry* pMapEntries;
		public UIntPtr dataSize;
		public void* pData;
	}

	public unsafe partial struct VkPipelineShaderStageCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineShaderStageCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineShaderStageCreateFlags flags;
		public VkShaderStageFlags stage;
		public VkShaderModule module;
		public byte* pName;
		public VkSpecializationInfo* pSpecializationInfo;
	}

	public unsafe partial struct VkVertexInputBindingDescription
	{
		/// <summary>
		/// The size of the <see cref="VkVertexInputBindingDescription"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 12;

		public uint binding;
		public uint stride;
		public VkVertexInputRate inputRate;
	}

	public unsafe partial struct VkVertexInputAttributeDescription
	{
		/// <summary>
		/// The size of the <see cref="VkVertexInputAttributeDescription"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public uint location;
		public uint binding;
		public VkFormat format;
		public uint offset;
	}

	public unsafe partial struct VkPipelineVertexInputStateCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineVertexInputStateCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineVertexInputStateCreateFlags flags;
		public uint vertexBindingDescriptionCount;
		public VkVertexInputBindingDescription* pVertexBindingDescriptions;
		public uint vertexAttributeDescriptionCount;
		public VkVertexInputAttributeDescription* pVertexAttributeDescriptions;
	}

	public unsafe partial struct VkPipelineInputAssemblyStateCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineInputAssemblyStateCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineInputAssemblyStateCreateFlags flags;
		public VkPrimitiveTopology topology;
		public VkBool32 primitiveRestartEnable;
	}

	public unsafe partial struct VkPipelineTessellationStateCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineTessellationStateCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineTessellationStateCreateFlags flags;
		public uint patchControlPoints;
	}

	public unsafe partial struct VkViewport
	{
		/// <summary>
		/// The size of the <see cref="VkViewport"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public float x;
		public float y;
		public float width;
		public float height;
		public float minDepth;
		public float maxDepth;
	}

	public unsafe partial struct VkOffset2D
	{
		/// <summary>
		/// The size of the <see cref="VkOffset2D"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 8;

		public int x;
		public int y;
	}

	public unsafe partial struct VkExtent2D
	{
		/// <summary>
		/// The size of the <see cref="VkExtent2D"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 8;

		public uint width;
		public uint height;
	}

	public unsafe partial struct VkRect2D
	{
		/// <summary>
		/// The size of the <see cref="VkRect2D"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public VkOffset2D offset;
		public VkExtent2D extent;
	}

	public unsafe partial struct VkPipelineViewportStateCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineViewportStateCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineViewportStateCreateFlags flags;
		public uint viewportCount;
		public VkViewport* pViewports;
		public uint scissorCount;
		public VkRect2D* pScissors;
	}

	public unsafe partial struct VkPipelineRasterizationStateCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineRasterizationStateCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineRasterizationStateCreateFlags flags;
		public VkBool32 depthClampEnable;
		public VkBool32 rasterizerDiscardEnable;
		public VkPolygonMode polygonMode;
		public VkCullModeFlags cullMode;
		public VkFrontFace frontFace;
		public VkBool32 depthBiasEnable;
		public float depthBiasConstantFactor;
		public float depthBiasClamp;
		public float depthBiasSlopeFactor;
		public float lineWidth;
	}

	public unsafe partial struct VkPipelineMultisampleStateCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineMultisampleStateCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineMultisampleStateCreateFlags flags;
		public VkSampleCountFlags rasterizationSamples;
		public VkBool32 sampleShadingEnable;
		public float minSampleShading;
		public uint* pSampleMask;
		public VkBool32 alphaToCoverageEnable;
		public VkBool32 alphaToOneEnable;
	}

	public unsafe partial struct VkStencilOpState
	{
		/// <summary>
		/// The size of the <see cref="VkStencilOpState"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 28;

		public VkStencilOp failOp;
		public VkStencilOp passOp;
		public VkStencilOp depthFailOp;
		public VkCompareOp compareOp;
		public uint compareMask;
		public uint writeMask;
		public uint reference;
	}

	public unsafe partial struct VkPipelineDepthStencilStateCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineDepthStencilStateCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 104;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineDepthStencilStateCreateFlags flags;
		public VkBool32 depthTestEnable;
		public VkBool32 depthWriteEnable;
		public VkCompareOp depthCompareOp;
		public VkBool32 depthBoundsTestEnable;
		public VkBool32 stencilTestEnable;
		public VkStencilOpState front;
		public VkStencilOpState back;
		public float minDepthBounds;
		public float maxDepthBounds;
	}

	public unsafe partial struct VkPipelineColorBlendAttachmentState
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineColorBlendAttachmentState"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkBool32 blendEnable;
		public VkBlendFactor srcColorBlendFactor;
		public VkBlendFactor dstColorBlendFactor;
		public VkBlendOp colorBlendOp;
		public VkBlendFactor srcAlphaBlendFactor;
		public VkBlendFactor dstAlphaBlendFactor;
		public VkBlendOp alphaBlendOp;
		public VkColorComponentFlags colorWriteMask;
	}

	public unsafe partial struct VkPipelineColorBlendStateCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineColorBlendStateCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 56;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineColorBlendStateCreateFlags flags;
		public VkBool32 logicOpEnable;
		public VkLogicOp logicOp;
		public uint attachmentCount;
		public VkPipelineColorBlendAttachmentState* pAttachments;
		public float blendConstants_0;
		public float blendConstants_1;
		public float blendConstants_2;
		public float blendConstants_3;
	}

	public unsafe partial struct VkPipelineDynamicStateCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineDynamicStateCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineDynamicStateCreateFlags flags;
		public uint dynamicStateCount;
		public VkDynamicState* pDynamicStates;
	}

	public unsafe partial struct VkGraphicsPipelineCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkGraphicsPipelineCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 144;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCreateFlags flags;
		public uint stageCount;
		public VkPipelineShaderStageCreateInfo* pStages;
		public VkPipelineVertexInputStateCreateInfo* pVertexInputState;
		public VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState;
		public VkPipelineTessellationStateCreateInfo* pTessellationState;
		public VkPipelineViewportStateCreateInfo* pViewportState;
		public VkPipelineRasterizationStateCreateInfo* pRasterizationState;
		public VkPipelineMultisampleStateCreateInfo* pMultisampleState;
		public VkPipelineDepthStencilStateCreateInfo* pDepthStencilState;
		public VkPipelineColorBlendStateCreateInfo* pColorBlendState;
		public VkPipelineDynamicStateCreateInfo* pDynamicState;
		public VkPipelineLayout layout;
		public VkRenderPass renderPass;
		public uint subpass;
		public VkPipeline basePipelineHandle;
		public int basePipelineIndex;
	}

	public unsafe partial struct VkComputePipelineCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkComputePipelineCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 96;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCreateFlags flags;
		public VkPipelineShaderStageCreateInfo stage;
		public VkPipelineLayout layout;
		public VkPipeline basePipelineHandle;
		public int basePipelineIndex;
	}

	public unsafe partial struct VkPushConstantRange
	{
		/// <summary>
		/// The size of the <see cref="VkPushConstantRange"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 12;

		public VkShaderStageFlags stageFlags;
		public uint offset;
		public uint size;
	}

	public unsafe partial struct VkPipelineLayoutCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineLayoutCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineLayoutCreateFlags flags;
		public uint setLayoutCount;
		public VkDescriptorSetLayout* pSetLayouts;
		public uint pushConstantRangeCount;
		public VkPushConstantRange* pPushConstantRanges;
	}

	public unsafe partial struct VkSamplerCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkSamplerCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 80;

		public VkStructureType sType;
		public void* pNext;
		public VkSamplerCreateFlags flags;
		public VkFilter magFilter;
		public VkFilter minFilter;
		public VkSamplerMipmapMode mipmapMode;
		public VkSamplerAddressMode addressModeU;
		public VkSamplerAddressMode addressModeV;
		public VkSamplerAddressMode addressModeW;
		public float mipLodBias;
		public VkBool32 anisotropyEnable;
		public float maxAnisotropy;
		public VkBool32 compareEnable;
		public VkCompareOp compareOp;
		public float minLod;
		public float maxLod;
		public VkBorderColor borderColor;
		public VkBool32 unnormalizedCoordinates;
	}

	public unsafe partial struct VkDescriptorSetLayoutBinding
	{
		/// <summary>
		/// The size of the <see cref="VkDescriptorSetLayoutBinding"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public uint binding;
		public VkDescriptorType descriptorType;
		public uint descriptorCount;
		public VkShaderStageFlags stageFlags;
		public VkSampler* pImmutableSamplers;
	}

	public unsafe partial struct VkDescriptorSetLayoutCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkDescriptorSetLayoutCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkDescriptorSetLayoutCreateFlags flags;
		public uint bindingCount;
		public VkDescriptorSetLayoutBinding* pBindings;
	}

	public unsafe partial struct VkDescriptorPoolSize
	{
		/// <summary>
		/// The size of the <see cref="VkDescriptorPoolSize"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 8;

		public VkDescriptorType type;
		public uint descriptorCount;
	}

	public unsafe partial struct VkDescriptorPoolCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkDescriptorPoolCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkDescriptorPoolCreateFlags flags;
		public uint maxSets;
		public uint poolSizeCount;
		public VkDescriptorPoolSize* pPoolSizes;
	}

	public unsafe partial struct VkDescriptorSetAllocateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkDescriptorSetAllocateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkDescriptorPool descriptorPool;
		public uint descriptorSetCount;
		public VkDescriptorSetLayout* pSetLayouts;
	}

	public unsafe partial struct VkDescriptorImageInfo
	{
		/// <summary>
		/// The size of the <see cref="VkDescriptorImageInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkSampler sampler;
		public VkImageView imageView;
		public VkImageLayout imageLayout;
	}

	public unsafe partial struct VkDescriptorBufferInfo
	{
		/// <summary>
		/// The size of the <see cref="VkDescriptorBufferInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkBuffer buffer;
		public ulong offset;
		public ulong range;
	}

	public unsafe partial struct VkWriteDescriptorSet
	{
		/// <summary>
		/// The size of the <see cref="VkWriteDescriptorSet"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public VkDescriptorSet dstSet;
		public uint dstBinding;
		public uint dstArrayElement;
		public uint descriptorCount;
		public VkDescriptorType descriptorType;
		public VkDescriptorImageInfo* pImageInfo;
		public VkDescriptorBufferInfo* pBufferInfo;
		public VkBufferView* pTexelBufferView;
	}

	public unsafe partial struct VkCopyDescriptorSet
	{
		/// <summary>
		/// The size of the <see cref="VkCopyDescriptorSet"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 56;

		public VkStructureType sType;
		public void* pNext;
		public VkDescriptorSet srcSet;
		public uint srcBinding;
		public uint srcArrayElement;
		public VkDescriptorSet dstSet;
		public uint dstBinding;
		public uint dstArrayElement;
		public uint descriptorCount;
	}

	public unsafe partial struct VkFramebufferCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkFramebufferCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public VkFramebufferCreateFlags flags;
		public VkRenderPass renderPass;
		public uint attachmentCount;
		public VkImageView* pAttachments;
		public uint width;
		public uint height;
		public uint layers;
	}

	public unsafe partial struct VkAttachmentDescription
	{
		/// <summary>
		/// The size of the <see cref="VkAttachmentDescription"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 36;

		public VkAttachmentDescriptionFlags flags;
		public VkFormat format;
		public VkSampleCountFlags samples;
		public VkAttachmentLoadOp loadOp;
		public VkAttachmentStoreOp storeOp;
		public VkAttachmentLoadOp stencilLoadOp;
		public VkAttachmentStoreOp stencilStoreOp;
		public VkImageLayout initialLayout;
		public VkImageLayout finalLayout;
	}

	public unsafe partial struct VkAttachmentReference
	{
		/// <summary>
		/// The size of the <see cref="VkAttachmentReference"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 8;

		public uint attachment;
		public VkImageLayout layout;
	}

	public unsafe partial struct VkSubpassDescription
	{
		/// <summary>
		/// The size of the <see cref="VkSubpassDescription"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 72;

		public VkSubpassDescriptionFlags flags;
		public VkPipelineBindPoint pipelineBindPoint;
		public uint inputAttachmentCount;
		public VkAttachmentReference* pInputAttachments;
		public uint colorAttachmentCount;
		public VkAttachmentReference* pColorAttachments;
		public VkAttachmentReference* pResolveAttachments;
		public VkAttachmentReference* pDepthStencilAttachment;
		public uint preserveAttachmentCount;
		public uint* pPreserveAttachments;
	}

	public unsafe partial struct VkSubpassDependency
	{
		/// <summary>
		/// The size of the <see cref="VkSubpassDependency"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 28;

		public uint srcSubpass;
		public uint dstSubpass;
		public VkPipelineStageFlags srcStageMask;
		public VkPipelineStageFlags dstStageMask;
		public VkAccessFlags srcAccessMask;
		public VkAccessFlags dstAccessMask;
		public VkDependencyFlags dependencyFlags;
	}

	public unsafe partial struct VkRenderPassCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkRenderPassCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public VkRenderPassCreateFlags flags;
		public uint attachmentCount;
		public VkAttachmentDescription* pAttachments;
		public uint subpassCount;
		public VkSubpassDescription* pSubpasses;
		public uint dependencyCount;
		public VkSubpassDependency* pDependencies;
	}

	public unsafe partial struct VkCommandPoolCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkCommandPoolCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkCommandPoolCreateFlags flags;
		public uint queueFamilyIndex;
	}

	public unsafe partial struct VkCommandBufferAllocateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkCommandBufferAllocateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkCommandPool commandPool;
		public VkCommandBufferLevel level;
		public uint commandBufferCount;
	}

	public unsafe partial struct VkCommandBufferInheritanceInfo
	{
		/// <summary>
		/// The size of the <see cref="VkCommandBufferInheritanceInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 56;

		public VkStructureType sType;
		public void* pNext;
		public VkRenderPass renderPass;
		public uint subpass;
		public VkFramebuffer framebuffer;
		public VkBool32 occlusionQueryEnable;
		public VkQueryControlFlags queryFlags;
		public VkQueryPipelineStatisticFlags pipelineStatistics;
	}

	public unsafe partial struct VkCommandBufferBeginInfo
	{
		/// <summary>
		/// The size of the <see cref="VkCommandBufferBeginInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkCommandBufferUsageFlags flags;
		public VkCommandBufferInheritanceInfo* pInheritanceInfo;
	}

	public unsafe partial struct VkBufferCopy
	{
		/// <summary>
		/// The size of the <see cref="VkBufferCopy"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public ulong srcOffset;
		public ulong dstOffset;
		public ulong size;
	}

	public unsafe partial struct VkImageSubresourceLayers
	{
		/// <summary>
		/// The size of the <see cref="VkImageSubresourceLayers"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public VkImageAspectFlags aspectMask;
		public uint mipLevel;
		public uint baseArrayLayer;
		public uint layerCount;
	}

	public unsafe partial struct VkImageCopy
	{
		/// <summary>
		/// The size of the <see cref="VkImageCopy"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 68;

		public VkImageSubresourceLayers srcSubresource;
		public VkOffset3D srcOffset;
		public VkImageSubresourceLayers dstSubresource;
		public VkOffset3D dstOffset;
		public VkExtent3D extent;
	}

	public unsafe partial struct VkImageBlit
	{
		/// <summary>
		/// The size of the <see cref="VkImageBlit"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 80;

		public VkImageSubresourceLayers srcSubresource;
		public VkOffset3D srcOffsets_0;
		public VkOffset3D srcOffsets_1;
		public VkImageSubresourceLayers dstSubresource;
		public VkOffset3D dstOffsets_0;
		public VkOffset3D dstOffsets_1;
	}

	public unsafe partial struct VkBufferImageCopy
	{
		/// <summary>
		/// The size of the <see cref="VkBufferImageCopy"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 56;

		public ulong bufferOffset;
		public uint bufferRowLength;
		public uint bufferImageHeight;
		public VkImageSubresourceLayers imageSubresource;
		public VkOffset3D imageOffset;
		public VkExtent3D imageExtent;
	}

	public unsafe partial struct VkClearDepthStencilValue
	{
		/// <summary>
		/// The size of the <see cref="VkClearDepthStencilValue"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 8;

		public float depth;
		public uint stencil;
	}

	public unsafe partial struct VkClearAttachment
	{
		/// <summary>
		/// The size of the <see cref="VkClearAttachment"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkImageAspectFlags aspectMask;
		public uint colorAttachment;
		public VkClearValue clearValue;
	}

	public unsafe partial struct VkClearRect
	{
		/// <summary>
		/// The size of the <see cref="VkClearRect"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkRect2D rect;
		public uint baseArrayLayer;
		public uint layerCount;
	}

	public unsafe partial struct VkImageResolve
	{
		/// <summary>
		/// The size of the <see cref="VkImageResolve"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 68;

		public VkImageSubresourceLayers srcSubresource;
		public VkOffset3D srcOffset;
		public VkImageSubresourceLayers dstSubresource;
		public VkOffset3D dstOffset;
		public VkExtent3D extent;
	}

	public unsafe partial struct VkMemoryBarrier
	{
		/// <summary>
		/// The size of the <see cref="VkMemoryBarrier"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkAccessFlags srcAccessMask;
		public VkAccessFlags dstAccessMask;
	}

	public unsafe partial struct VkBufferMemoryBarrier
	{
		/// <summary>
		/// The size of the <see cref="VkBufferMemoryBarrier"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 56;

		public VkStructureType sType;
		public void* pNext;
		public VkAccessFlags srcAccessMask;
		public VkAccessFlags dstAccessMask;
		public uint srcQueueFamilyIndex;
		public uint dstQueueFamilyIndex;
		public VkBuffer buffer;
		public ulong offset;
		public ulong size;
	}

	public unsafe partial struct VkImageMemoryBarrier
	{
		/// <summary>
		/// The size of the <see cref="VkImageMemoryBarrier"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 72;

		public VkStructureType sType;
		public void* pNext;
		public VkAccessFlags srcAccessMask;
		public VkAccessFlags dstAccessMask;
		public VkImageLayout oldLayout;
		public VkImageLayout newLayout;
		public uint srcQueueFamilyIndex;
		public uint dstQueueFamilyIndex;
		public VkImage image;
		public VkImageSubresourceRange subresourceRange;
	}

	public unsafe partial struct VkRenderPassBeginInfo
	{
		/// <summary>
		/// The size of the <see cref="VkRenderPassBeginInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public VkRenderPass renderPass;
		public VkFramebuffer framebuffer;
		public VkRect2D renderArea;
		public uint clearValueCount;
		public VkClearValue* pClearValues;
	}

	public unsafe partial struct VkDispatchIndirectCommand
	{
		/// <summary>
		/// The size of the <see cref="VkDispatchIndirectCommand"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 12;

		public uint x;
		public uint y;
		public uint z;
	}

	public unsafe partial struct VkDrawIndexedIndirectCommand
	{
		/// <summary>
		/// The size of the <see cref="VkDrawIndexedIndirectCommand"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 20;

		public uint indexCount;
		public uint instanceCount;
		public uint firstIndex;
		public int vertexOffset;
		public uint firstInstance;
	}

	public unsafe partial struct VkDrawIndirectCommand
	{
		/// <summary>
		/// The size of the <see cref="VkDrawIndirectCommand"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public uint vertexCount;
		public uint instanceCount;
		public uint firstVertex;
		public uint firstInstance;
	}

	public unsafe partial struct VkBaseOutStructure
	{
		/// <summary>
		/// The size of the <see cref="VkBaseOutStructure"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public VkStructureType sType;
		public VkBaseOutStructure* pNext;
	}

	public unsafe partial struct VkBaseInStructure
	{
		/// <summary>
		/// The size of the <see cref="VkBaseInStructure"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public VkStructureType sType;
		public VkBaseInStructure* pNext;
	}

	public unsafe partial struct VkPhysicalDeviceSubgroupProperties
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceSubgroupProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint subgroupSize;
		public VkShaderStageFlags supportedStages;
		public VkSubgroupFeatureFlags supportedOperations;
		public VkBool32 quadOperationsInAllStages;
	}

	public unsafe partial struct VkBindBufferMemoryInfo
	{
		/// <summary>
		/// The size of the <see cref="VkBindBufferMemoryInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkBuffer buffer;
		public VkDeviceMemory memory;
		public ulong memoryOffset;
	}

	public unsafe partial struct VkBindImageMemoryInfo
	{
		/// <summary>
		/// The size of the <see cref="VkBindImageMemoryInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkImage image;
		public VkDeviceMemory memory;
		public ulong memoryOffset;
	}

	public unsafe partial struct VkPhysicalDevice16BitStorageFeatures
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDevice16BitStorageFeatures"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 storageBuffer16BitAccess;
		public VkBool32 uniformAndStorageBuffer16BitAccess;
		public VkBool32 storagePushConstant16;
		public VkBool32 storageInputOutput16;
	}

	public unsafe partial struct VkMemoryDedicatedRequirements
	{
		/// <summary>
		/// The size of the <see cref="VkMemoryDedicatedRequirements"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 prefersDedicatedAllocation;
		public VkBool32 requiresDedicatedAllocation;
	}

	public unsafe partial struct VkMemoryDedicatedAllocateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkMemoryDedicatedAllocateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkImage image;
		public VkBuffer buffer;
	}

	public unsafe partial struct VkMemoryAllocateFlagsInfo
	{
		/// <summary>
		/// The size of the <see cref="VkMemoryAllocateFlagsInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkMemoryAllocateFlags flags;
		public uint deviceMask;
	}

	public unsafe partial struct VkDeviceGroupRenderPassBeginInfo
	{
		/// <summary>
		/// The size of the <see cref="VkDeviceGroupRenderPassBeginInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint deviceMask;
		public uint deviceRenderAreaCount;
		public VkRect2D* pDeviceRenderAreas;
	}

	public unsafe partial struct VkDeviceGroupCommandBufferBeginInfo
	{
		/// <summary>
		/// The size of the <see cref="VkDeviceGroupCommandBufferBeginInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public uint deviceMask;
	}

	public unsafe partial struct VkDeviceGroupSubmitInfo
	{
		/// <summary>
		/// The size of the <see cref="VkDeviceGroupSubmitInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public uint waitSemaphoreCount;
		public uint* pWaitSemaphoreDeviceIndices;
		public uint commandBufferCount;
		public uint* pCommandBufferDeviceMasks;
		public uint signalSemaphoreCount;
		public uint* pSignalSemaphoreDeviceIndices;
	}

	public unsafe partial struct VkDeviceGroupBindSparseInfo
	{
		/// <summary>
		/// The size of the <see cref="VkDeviceGroupBindSparseInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public uint resourceDeviceIndex;
		public uint memoryDeviceIndex;
	}

	public unsafe partial struct VkBindBufferMemoryDeviceGroupInfo
	{
		/// <summary>
		/// The size of the <see cref="VkBindBufferMemoryDeviceGroupInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint deviceIndexCount;
		public uint* pDeviceIndices;
	}

	public unsafe partial struct VkBindImageMemoryDeviceGroupInfo
	{
		/// <summary>
		/// The size of the <see cref="VkBindImageMemoryDeviceGroupInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public uint deviceIndexCount;
		public uint* pDeviceIndices;
		public uint splitInstanceBindRegionCount;
		public VkRect2D* pSplitInstanceBindRegions;
	}

	public unsafe partial struct VkPhysicalDeviceGroupProperties
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceGroupProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 288;

		public VkStructureType sType;
		public void* pNext;
		public uint physicalDeviceCount;
		public VkPhysicalDevice physicalDevices_0;
		public VkPhysicalDevice physicalDevices_1;
		public VkPhysicalDevice physicalDevices_2;
		public VkPhysicalDevice physicalDevices_3;
		public VkPhysicalDevice physicalDevices_4;
		public VkPhysicalDevice physicalDevices_5;
		public VkPhysicalDevice physicalDevices_6;
		public VkPhysicalDevice physicalDevices_7;
		public VkPhysicalDevice physicalDevices_8;
		public VkPhysicalDevice physicalDevices_9;
		public VkPhysicalDevice physicalDevices_10;
		public VkPhysicalDevice physicalDevices_11;
		public VkPhysicalDevice physicalDevices_12;
		public VkPhysicalDevice physicalDevices_13;
		public VkPhysicalDevice physicalDevices_14;
		public VkPhysicalDevice physicalDevices_15;
		public VkPhysicalDevice physicalDevices_16;
		public VkPhysicalDevice physicalDevices_17;
		public VkPhysicalDevice physicalDevices_18;
		public VkPhysicalDevice physicalDevices_19;
		public VkPhysicalDevice physicalDevices_20;
		public VkPhysicalDevice physicalDevices_21;
		public VkPhysicalDevice physicalDevices_22;
		public VkPhysicalDevice physicalDevices_23;
		public VkPhysicalDevice physicalDevices_24;
		public VkPhysicalDevice physicalDevices_25;
		public VkPhysicalDevice physicalDevices_26;
		public VkPhysicalDevice physicalDevices_27;
		public VkPhysicalDevice physicalDevices_28;
		public VkPhysicalDevice physicalDevices_29;
		public VkPhysicalDevice physicalDevices_30;
		public VkPhysicalDevice physicalDevices_31;
		public VkBool32 subsetAllocation;
	}

	public unsafe partial struct VkDeviceGroupDeviceCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkDeviceGroupDeviceCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint physicalDeviceCount;
		public VkPhysicalDevice* pPhysicalDevices;
	}

	public unsafe partial struct VkBufferMemoryRequirementsInfo2
	{
		/// <summary>
		/// The size of the <see cref="VkBufferMemoryRequirementsInfo2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBuffer buffer;
	}

	public unsafe partial struct VkImageMemoryRequirementsInfo2
	{
		/// <summary>
		/// The size of the <see cref="VkImageMemoryRequirementsInfo2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkImage image;
	}

	public unsafe partial struct VkImageSparseMemoryRequirementsInfo2
	{
		/// <summary>
		/// The size of the <see cref="VkImageSparseMemoryRequirementsInfo2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkImage image;
	}

	public unsafe partial struct VkMemoryRequirements2
	{
		/// <summary>
		/// The size of the <see cref="VkMemoryRequirements2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkMemoryRequirements memoryRequirements;
	}

	public unsafe partial struct VkSparseImageMemoryRequirements2
	{
		/// <summary>
		/// The size of the <see cref="VkSparseImageMemoryRequirements2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public VkSparseImageMemoryRequirements memoryRequirements;
	}

	public unsafe partial struct VkPhysicalDeviceFeatures2
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceFeatures2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 240;

		public VkStructureType sType;
		public void* pNext;
		public VkPhysicalDeviceFeatures features;
	}

	public unsafe partial struct VkPhysicalDeviceProperties2
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceProperties2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 840;

		public VkStructureType sType;
		public void* pNext;
		public VkPhysicalDeviceProperties properties;
	}

	public unsafe partial struct VkFormatProperties2
	{
		/// <summary>
		/// The size of the <see cref="VkFormatProperties2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkFormatProperties formatProperties;
	}

	public unsafe partial struct VkImageFormatProperties2
	{
		/// <summary>
		/// The size of the <see cref="VkImageFormatProperties2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public VkImageFormatProperties imageFormatProperties;
	}

	public unsafe partial struct VkPhysicalDeviceImageFormatInfo2
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceImageFormatInfo2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkFormat format;
		public VkImageType type;
		public VkImageTiling tiling;
		public VkImageUsageFlags usage;
		public VkImageCreateFlags flags;
	}

	public unsafe partial struct VkQueueFamilyProperties2
	{
		/// <summary>
		/// The size of the <see cref="VkQueueFamilyProperties2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkQueueFamilyProperties queueFamilyProperties;
	}

	public unsafe partial struct VkPhysicalDeviceMemoryProperties2
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceMemoryProperties2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 536;

		public VkStructureType sType;
		public void* pNext;
		public VkPhysicalDeviceMemoryProperties memoryProperties;
	}

	public unsafe partial struct VkSparseImageFormatProperties2
	{
		/// <summary>
		/// The size of the <see cref="VkSparseImageFormatProperties2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkSparseImageFormatProperties properties;
	}

	public unsafe partial struct VkPhysicalDeviceSparseImageFormatInfo2
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceSparseImageFormatInfo2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkFormat format;
		public VkImageType type;
		public VkSampleCountFlags samples;
		public VkImageUsageFlags usage;
		public VkImageTiling tiling;
	}

	public unsafe partial struct VkPhysicalDevicePointClippingProperties
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDevicePointClippingProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkPointClippingBehavior pointClippingBehavior;
	}

	public unsafe partial struct VkInputAttachmentAspectReference
	{
		/// <summary>
		/// The size of the <see cref="VkInputAttachmentAspectReference"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 12;

		public uint subpass;
		public uint inputAttachmentIndex;
		public VkImageAspectFlags aspectMask;
	}

	public unsafe partial struct VkRenderPassInputAttachmentAspectCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkRenderPassInputAttachmentAspectCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint aspectReferenceCount;
		public VkInputAttachmentAspectReference* pAspectReferences;
	}

	public unsafe partial struct VkImageViewUsageCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkImageViewUsageCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkImageUsageFlags usage;
	}

	public unsafe partial struct VkPipelineTessellationDomainOriginStateCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineTessellationDomainOriginStateCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkTessellationDomainOrigin domainOrigin;
	}

	public unsafe partial struct VkRenderPassMultiviewCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkRenderPassMultiviewCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public uint subpassCount;
		public uint* pViewMasks;
		public uint dependencyCount;
		public int* pViewOffsets;
		public uint correlationMaskCount;
		public uint* pCorrelationMasks;
	}

	public unsafe partial struct VkPhysicalDeviceMultiviewFeatures
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceMultiviewFeatures"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 multiview;
		public VkBool32 multiviewGeometryShader;
		public VkBool32 multiviewTessellationShader;
	}

	public unsafe partial struct VkPhysicalDeviceMultiviewProperties
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceMultiviewProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public uint maxMultiviewViewCount;
		public uint maxMultiviewInstanceIndex;
	}

	public unsafe partial struct VkPhysicalDeviceVariablePointersFeatures
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceVariablePointersFeatures"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 variablePointersStorageBuffer;
		public VkBool32 variablePointers;
	}

	public unsafe partial struct VkPhysicalDeviceProtectedMemoryFeatures
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceProtectedMemoryFeatures"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 protectedMemory;
	}

	public unsafe partial struct VkPhysicalDeviceProtectedMemoryProperties
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceProtectedMemoryProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 protectedNoFault;
	}

	public unsafe partial struct VkDeviceQueueInfo2
	{
		/// <summary>
		/// The size of the <see cref="VkDeviceQueueInfo2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkDeviceQueueCreateFlags flags;
		public uint queueFamilyIndex;
		public uint queueIndex;
	}

	public unsafe partial struct VkProtectedSubmitInfo
	{
		/// <summary>
		/// The size of the <see cref="VkProtectedSubmitInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 protectedSubmit;
	}

	public unsafe partial struct VkSamplerYcbcrConversionCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkSamplerYcbcrConversionCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public VkFormat format;
		public VkSamplerYcbcrModelConversion ycbcrModel;
		public VkSamplerYcbcrRange ycbcrRange;
		public VkComponentMapping components;
		public VkChromaLocation xChromaOffset;
		public VkChromaLocation yChromaOffset;
		public VkFilter chromaFilter;
		public VkBool32 forceExplicitReconstruction;
	}

	public unsafe partial struct VkSamplerYcbcrConversionInfo
	{
		/// <summary>
		/// The size of the <see cref="VkSamplerYcbcrConversionInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkSamplerYcbcrConversion conversion;
	}

	public unsafe partial struct VkBindImagePlaneMemoryInfo
	{
		/// <summary>
		/// The size of the <see cref="VkBindImagePlaneMemoryInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkImageAspectFlags planeAspect;
	}

	public unsafe partial struct VkImagePlaneMemoryRequirementsInfo
	{
		/// <summary>
		/// The size of the <see cref="VkImagePlaneMemoryRequirementsInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkImageAspectFlags planeAspect;
	}

	public unsafe partial struct VkPhysicalDeviceSamplerYcbcrConversionFeatures
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceSamplerYcbcrConversionFeatures"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 samplerYcbcrConversion;
	}

	public unsafe partial struct VkSamplerYcbcrConversionImageFormatProperties
	{
		/// <summary>
		/// The size of the <see cref="VkSamplerYcbcrConversionImageFormatProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public uint combinedImageSamplerDescriptorCount;
	}

	public unsafe partial struct VkDescriptorUpdateTemplateEntry
	{
		/// <summary>
		/// The size of the <see cref="VkDescriptorUpdateTemplateEntry"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public uint dstBinding;
		public uint dstArrayElement;
		public uint descriptorCount;
		public VkDescriptorType descriptorType;
		public UIntPtr offset;
		public UIntPtr stride;
	}

	public unsafe partial struct VkDescriptorUpdateTemplateCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkDescriptorUpdateTemplateCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 72;

		public VkStructureType sType;
		public void* pNext;
		public VkDescriptorUpdateTemplateCreateFlags flags;
		public uint descriptorUpdateEntryCount;
		public VkDescriptorUpdateTemplateEntry* pDescriptorUpdateEntries;
		public VkDescriptorUpdateTemplateType templateType;
		public VkDescriptorSetLayout descriptorSetLayout;
		public VkPipelineBindPoint pipelineBindPoint;
		public VkPipelineLayout pipelineLayout;
		public uint set;
	}

	public unsafe partial struct VkExternalMemoryProperties
	{
		/// <summary>
		/// The size of the <see cref="VkExternalMemoryProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 12;

		public VkExternalMemoryFeatureFlags externalMemoryFeatures;
		public VkExternalMemoryHandleTypeFlags exportFromImportedHandleTypes;
		public VkExternalMemoryHandleTypeFlags compatibleHandleTypes;
	}

	public unsafe partial struct VkPhysicalDeviceExternalImageFormatInfo
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceExternalImageFormatInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryHandleTypeFlags handleType;
	}

	public unsafe partial struct VkExternalImageFormatProperties
	{
		/// <summary>
		/// The size of the <see cref="VkExternalImageFormatProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryProperties externalMemoryProperties;
	}

	public unsafe partial struct VkPhysicalDeviceExternalBufferInfo
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceExternalBufferInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkBufferCreateFlags flags;
		public VkBufferUsageFlags usage;
		public VkExternalMemoryHandleTypeFlags handleType;
	}

	public unsafe partial struct VkExternalBufferProperties
	{
		/// <summary>
		/// The size of the <see cref="VkExternalBufferProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryProperties externalMemoryProperties;
	}

	public unsafe partial struct VkPhysicalDeviceIDProperties
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceIDProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public fixed byte deviceUUID[16];
		public fixed byte driverUUID[16];
		public fixed byte deviceLUID[8];
		public uint deviceNodeMask;
		public VkBool32 deviceLUIDValid;
	}

	public unsafe partial struct VkExternalMemoryImageCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkExternalMemoryImageCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryHandleTypeFlags handleTypes;
	}

	public unsafe partial struct VkExternalMemoryBufferCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkExternalMemoryBufferCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryHandleTypeFlags handleTypes;
	}

	public unsafe partial struct VkExportMemoryAllocateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkExportMemoryAllocateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryHandleTypeFlags handleTypes;
	}

	public unsafe partial struct VkPhysicalDeviceExternalFenceInfo
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceExternalFenceInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkExternalFenceHandleTypeFlags handleType;
	}

	public unsafe partial struct VkExternalFenceProperties
	{
		/// <summary>
		/// The size of the <see cref="VkExternalFenceProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkExternalFenceHandleTypeFlags exportFromImportedHandleTypes;
		public VkExternalFenceHandleTypeFlags compatibleHandleTypes;
		public VkExternalFenceFeatureFlags externalFenceFeatures;
	}

	public unsafe partial struct VkExportFenceCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkExportFenceCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkExternalFenceHandleTypeFlags handleTypes;
	}

	public unsafe partial struct VkExportSemaphoreCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkExportSemaphoreCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkExternalSemaphoreHandleTypeFlags handleTypes;
	}

	public unsafe partial struct VkPhysicalDeviceExternalSemaphoreInfo
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceExternalSemaphoreInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkExternalSemaphoreHandleTypeFlags handleType;
	}

	public unsafe partial struct VkExternalSemaphoreProperties
	{
		/// <summary>
		/// The size of the <see cref="VkExternalSemaphoreProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkExternalSemaphoreHandleTypeFlags exportFromImportedHandleTypes;
		public VkExternalSemaphoreHandleTypeFlags compatibleHandleTypes;
		public VkExternalSemaphoreFeatureFlags externalSemaphoreFeatures;
	}

	public unsafe partial struct VkPhysicalDeviceMaintenance3Properties
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceMaintenance3Properties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint maxPerSetDescriptors;
		public ulong maxMemoryAllocationSize;
	}

	public unsafe partial struct VkDescriptorSetLayoutSupport
	{
		/// <summary>
		/// The size of the <see cref="VkDescriptorSetLayoutSupport"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 supported;
	}

	public unsafe partial struct VkPhysicalDeviceShaderDrawParametersFeatures
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceShaderDrawParametersFeatures"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderDrawParameters;
	}

	public unsafe partial struct VkPhysicalDeviceVulkan11Features
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceVulkan11Features"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 storageBuffer16BitAccess;
		public VkBool32 uniformAndStorageBuffer16BitAccess;
		public VkBool32 storagePushConstant16;
		public VkBool32 storageInputOutput16;
		public VkBool32 multiview;
		public VkBool32 multiviewGeometryShader;
		public VkBool32 multiviewTessellationShader;
		public VkBool32 variablePointersStorageBuffer;
		public VkBool32 variablePointers;
		public VkBool32 protectedMemory;
		public VkBool32 samplerYcbcrConversion;
		public VkBool32 shaderDrawParameters;
	}

	public unsafe partial struct VkPhysicalDeviceVulkan11Properties
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceVulkan11Properties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 112;

		public VkStructureType sType;
		public void* pNext;
		public fixed byte deviceUUID[16];
		public fixed byte driverUUID[16];
		public fixed byte deviceLUID[8];
		public uint deviceNodeMask;
		public VkBool32 deviceLUIDValid;
		public uint subgroupSize;
		public VkShaderStageFlags subgroupSupportedStages;
		public VkSubgroupFeatureFlags subgroupSupportedOperations;
		public VkBool32 subgroupQuadOperationsInAllStages;
		public VkPointClippingBehavior pointClippingBehavior;
		public uint maxMultiviewViewCount;
		public uint maxMultiviewInstanceIndex;
		public VkBool32 protectedNoFault;
		public uint maxPerSetDescriptors;
		public ulong maxMemoryAllocationSize;
	}

	public unsafe partial struct VkPhysicalDeviceVulkan12Features
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceVulkan12Features"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 208;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 samplerMirrorClampToEdge;
		public VkBool32 drawIndirectCount;
		public VkBool32 storageBuffer8BitAccess;
		public VkBool32 uniformAndStorageBuffer8BitAccess;
		public VkBool32 storagePushConstant8;
		public VkBool32 shaderBufferInt64Atomics;
		public VkBool32 shaderSharedInt64Atomics;
		public VkBool32 shaderFloat16;
		public VkBool32 shaderInt8;
		public VkBool32 descriptorIndexing;
		public VkBool32 shaderInputAttachmentArrayDynamicIndexing;
		public VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
		public VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
		public VkBool32 shaderUniformBufferArrayNonUniformIndexing;
		public VkBool32 shaderSampledImageArrayNonUniformIndexing;
		public VkBool32 shaderStorageBufferArrayNonUniformIndexing;
		public VkBool32 shaderStorageImageArrayNonUniformIndexing;
		public VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
		public VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
		public VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
		public VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
		public VkBool32 descriptorBindingSampledImageUpdateAfterBind;
		public VkBool32 descriptorBindingStorageImageUpdateAfterBind;
		public VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
		public VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
		public VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
		public VkBool32 descriptorBindingUpdateUnusedWhilePending;
		public VkBool32 descriptorBindingPartiallyBound;
		public VkBool32 descriptorBindingVariableDescriptorCount;
		public VkBool32 runtimeDescriptorArray;
		public VkBool32 samplerFilterMinmax;
		public VkBool32 scalarBlockLayout;
		public VkBool32 imagelessFramebuffer;
		public VkBool32 uniformBufferStandardLayout;
		public VkBool32 shaderSubgroupExtendedTypes;
		public VkBool32 separateDepthStencilLayouts;
		public VkBool32 hostQueryReset;
		public VkBool32 timelineSemaphore;
		public VkBool32 bufferDeviceAddress;
		public VkBool32 bufferDeviceAddressCaptureReplay;
		public VkBool32 bufferDeviceAddressMultiDevice;
		public VkBool32 vulkanMemoryModel;
		public VkBool32 vulkanMemoryModelDeviceScope;
		public VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;
		public VkBool32 shaderOutputViewportIndex;
		public VkBool32 shaderOutputLayer;
		public VkBool32 subgroupBroadcastDynamicId;
	}

	public unsafe partial struct VkConformanceVersion
	{
		/// <summary>
		/// The size of the <see cref="VkConformanceVersion"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 4;

		public byte major;
		public byte minor;
		public byte subminor;
		public byte patch;
	}

	public unsafe partial struct VkPhysicalDeviceVulkan12Properties
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceVulkan12Properties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 736;

		public VkStructureType sType;
		public void* pNext;
		public VkDriverId driverID;
		public char driverName_0;
		public char driverName_1;
		public char driverName_2;
		public char driverName_3;
		public char driverName_4;
		public char driverName_5;
		public char driverName_6;
		public char driverName_7;
		public char driverName_8;
		public char driverName_9;
		public char driverName_10;
		public char driverName_11;
		public char driverName_12;
		public char driverName_13;
		public char driverName_14;
		public char driverName_15;
		public char driverName_16;
		public char driverName_17;
		public char driverName_18;
		public char driverName_19;
		public char driverName_20;
		public char driverName_21;
		public char driverName_22;
		public char driverName_23;
		public char driverName_24;
		public char driverName_25;
		public char driverName_26;
		public char driverName_27;
		public char driverName_28;
		public char driverName_29;
		public char driverName_30;
		public char driverName_31;
		public char driverName_32;
		public char driverName_33;
		public char driverName_34;
		public char driverName_35;
		public char driverName_36;
		public char driverName_37;
		public char driverName_38;
		public char driverName_39;
		public char driverName_40;
		public char driverName_41;
		public char driverName_42;
		public char driverName_43;
		public char driverName_44;
		public char driverName_45;
		public char driverName_46;
		public char driverName_47;
		public char driverName_48;
		public char driverName_49;
		public char driverName_50;
		public char driverName_51;
		public char driverName_52;
		public char driverName_53;
		public char driverName_54;
		public char driverName_55;
		public char driverName_56;
		public char driverName_57;
		public char driverName_58;
		public char driverName_59;
		public char driverName_60;
		public char driverName_61;
		public char driverName_62;
		public char driverName_63;
		public char driverName_64;
		public char driverName_65;
		public char driverName_66;
		public char driverName_67;
		public char driverName_68;
		public char driverName_69;
		public char driverName_70;
		public char driverName_71;
		public char driverName_72;
		public char driverName_73;
		public char driverName_74;
		public char driverName_75;
		public char driverName_76;
		public char driverName_77;
		public char driverName_78;
		public char driverName_79;
		public char driverName_80;
		public char driverName_81;
		public char driverName_82;
		public char driverName_83;
		public char driverName_84;
		public char driverName_85;
		public char driverName_86;
		public char driverName_87;
		public char driverName_88;
		public char driverName_89;
		public char driverName_90;
		public char driverName_91;
		public char driverName_92;
		public char driverName_93;
		public char driverName_94;
		public char driverName_95;
		public char driverName_96;
		public char driverName_97;
		public char driverName_98;
		public char driverName_99;
		public char driverName_100;
		public char driverName_101;
		public char driverName_102;
		public char driverName_103;
		public char driverName_104;
		public char driverName_105;
		public char driverName_106;
		public char driverName_107;
		public char driverName_108;
		public char driverName_109;
		public char driverName_110;
		public char driverName_111;
		public char driverName_112;
		public char driverName_113;
		public char driverName_114;
		public char driverName_115;
		public char driverName_116;
		public char driverName_117;
		public char driverName_118;
		public char driverName_119;
		public char driverName_120;
		public char driverName_121;
		public char driverName_122;
		public char driverName_123;
		public char driverName_124;
		public char driverName_125;
		public char driverName_126;
		public char driverName_127;
		public char driverName_128;
		public char driverName_129;
		public char driverName_130;
		public char driverName_131;
		public char driverName_132;
		public char driverName_133;
		public char driverName_134;
		public char driverName_135;
		public char driverName_136;
		public char driverName_137;
		public char driverName_138;
		public char driverName_139;
		public char driverName_140;
		public char driverName_141;
		public char driverName_142;
		public char driverName_143;
		public char driverName_144;
		public char driverName_145;
		public char driverName_146;
		public char driverName_147;
		public char driverName_148;
		public char driverName_149;
		public char driverName_150;
		public char driverName_151;
		public char driverName_152;
		public char driverName_153;
		public char driverName_154;
		public char driverName_155;
		public char driverName_156;
		public char driverName_157;
		public char driverName_158;
		public char driverName_159;
		public char driverName_160;
		public char driverName_161;
		public char driverName_162;
		public char driverName_163;
		public char driverName_164;
		public char driverName_165;
		public char driverName_166;
		public char driverName_167;
		public char driverName_168;
		public char driverName_169;
		public char driverName_170;
		public char driverName_171;
		public char driverName_172;
		public char driverName_173;
		public char driverName_174;
		public char driverName_175;
		public char driverName_176;
		public char driverName_177;
		public char driverName_178;
		public char driverName_179;
		public char driverName_180;
		public char driverName_181;
		public char driverName_182;
		public char driverName_183;
		public char driverName_184;
		public char driverName_185;
		public char driverName_186;
		public char driverName_187;
		public char driverName_188;
		public char driverName_189;
		public char driverName_190;
		public char driverName_191;
		public char driverName_192;
		public char driverName_193;
		public char driverName_194;
		public char driverName_195;
		public char driverName_196;
		public char driverName_197;
		public char driverName_198;
		public char driverName_199;
		public char driverName_200;
		public char driverName_201;
		public char driverName_202;
		public char driverName_203;
		public char driverName_204;
		public char driverName_205;
		public char driverName_206;
		public char driverName_207;
		public char driverName_208;
		public char driverName_209;
		public char driverName_210;
		public char driverName_211;
		public char driverName_212;
		public char driverName_213;
		public char driverName_214;
		public char driverName_215;
		public char driverName_216;
		public char driverName_217;
		public char driverName_218;
		public char driverName_219;
		public char driverName_220;
		public char driverName_221;
		public char driverName_222;
		public char driverName_223;
		public char driverName_224;
		public char driverName_225;
		public char driverName_226;
		public char driverName_227;
		public char driverName_228;
		public char driverName_229;
		public char driverName_230;
		public char driverName_231;
		public char driverName_232;
		public char driverName_233;
		public char driverName_234;
		public char driverName_235;
		public char driverName_236;
		public char driverName_237;
		public char driverName_238;
		public char driverName_239;
		public char driverName_240;
		public char driverName_241;
		public char driverName_242;
		public char driverName_243;
		public char driverName_244;
		public char driverName_245;
		public char driverName_246;
		public char driverName_247;
		public char driverName_248;
		public char driverName_249;
		public char driverName_250;
		public char driverName_251;
		public char driverName_252;
		public char driverName_253;
		public char driverName_254;
		public char driverName_255;
		public char driverInfo_0;
		public char driverInfo_1;
		public char driverInfo_2;
		public char driverInfo_3;
		public char driverInfo_4;
		public char driverInfo_5;
		public char driverInfo_6;
		public char driverInfo_7;
		public char driverInfo_8;
		public char driverInfo_9;
		public char driverInfo_10;
		public char driverInfo_11;
		public char driverInfo_12;
		public char driverInfo_13;
		public char driverInfo_14;
		public char driverInfo_15;
		public char driverInfo_16;
		public char driverInfo_17;
		public char driverInfo_18;
		public char driverInfo_19;
		public char driverInfo_20;
		public char driverInfo_21;
		public char driverInfo_22;
		public char driverInfo_23;
		public char driverInfo_24;
		public char driverInfo_25;
		public char driverInfo_26;
		public char driverInfo_27;
		public char driverInfo_28;
		public char driverInfo_29;
		public char driverInfo_30;
		public char driverInfo_31;
		public char driverInfo_32;
		public char driverInfo_33;
		public char driverInfo_34;
		public char driverInfo_35;
		public char driverInfo_36;
		public char driverInfo_37;
		public char driverInfo_38;
		public char driverInfo_39;
		public char driverInfo_40;
		public char driverInfo_41;
		public char driverInfo_42;
		public char driverInfo_43;
		public char driverInfo_44;
		public char driverInfo_45;
		public char driverInfo_46;
		public char driverInfo_47;
		public char driverInfo_48;
		public char driverInfo_49;
		public char driverInfo_50;
		public char driverInfo_51;
		public char driverInfo_52;
		public char driverInfo_53;
		public char driverInfo_54;
		public char driverInfo_55;
		public char driverInfo_56;
		public char driverInfo_57;
		public char driverInfo_58;
		public char driverInfo_59;
		public char driverInfo_60;
		public char driverInfo_61;
		public char driverInfo_62;
		public char driverInfo_63;
		public char driverInfo_64;
		public char driverInfo_65;
		public char driverInfo_66;
		public char driverInfo_67;
		public char driverInfo_68;
		public char driverInfo_69;
		public char driverInfo_70;
		public char driverInfo_71;
		public char driverInfo_72;
		public char driverInfo_73;
		public char driverInfo_74;
		public char driverInfo_75;
		public char driverInfo_76;
		public char driverInfo_77;
		public char driverInfo_78;
		public char driverInfo_79;
		public char driverInfo_80;
		public char driverInfo_81;
		public char driverInfo_82;
		public char driverInfo_83;
		public char driverInfo_84;
		public char driverInfo_85;
		public char driverInfo_86;
		public char driverInfo_87;
		public char driverInfo_88;
		public char driverInfo_89;
		public char driverInfo_90;
		public char driverInfo_91;
		public char driverInfo_92;
		public char driverInfo_93;
		public char driverInfo_94;
		public char driverInfo_95;
		public char driverInfo_96;
		public char driverInfo_97;
		public char driverInfo_98;
		public char driverInfo_99;
		public char driverInfo_100;
		public char driverInfo_101;
		public char driverInfo_102;
		public char driverInfo_103;
		public char driverInfo_104;
		public char driverInfo_105;
		public char driverInfo_106;
		public char driverInfo_107;
		public char driverInfo_108;
		public char driverInfo_109;
		public char driverInfo_110;
		public char driverInfo_111;
		public char driverInfo_112;
		public char driverInfo_113;
		public char driverInfo_114;
		public char driverInfo_115;
		public char driverInfo_116;
		public char driverInfo_117;
		public char driverInfo_118;
		public char driverInfo_119;
		public char driverInfo_120;
		public char driverInfo_121;
		public char driverInfo_122;
		public char driverInfo_123;
		public char driverInfo_124;
		public char driverInfo_125;
		public char driverInfo_126;
		public char driverInfo_127;
		public char driverInfo_128;
		public char driverInfo_129;
		public char driverInfo_130;
		public char driverInfo_131;
		public char driverInfo_132;
		public char driverInfo_133;
		public char driverInfo_134;
		public char driverInfo_135;
		public char driverInfo_136;
		public char driverInfo_137;
		public char driverInfo_138;
		public char driverInfo_139;
		public char driverInfo_140;
		public char driverInfo_141;
		public char driverInfo_142;
		public char driverInfo_143;
		public char driverInfo_144;
		public char driverInfo_145;
		public char driverInfo_146;
		public char driverInfo_147;
		public char driverInfo_148;
		public char driverInfo_149;
		public char driverInfo_150;
		public char driverInfo_151;
		public char driverInfo_152;
		public char driverInfo_153;
		public char driverInfo_154;
		public char driverInfo_155;
		public char driverInfo_156;
		public char driverInfo_157;
		public char driverInfo_158;
		public char driverInfo_159;
		public char driverInfo_160;
		public char driverInfo_161;
		public char driverInfo_162;
		public char driverInfo_163;
		public char driverInfo_164;
		public char driverInfo_165;
		public char driverInfo_166;
		public char driverInfo_167;
		public char driverInfo_168;
		public char driverInfo_169;
		public char driverInfo_170;
		public char driverInfo_171;
		public char driverInfo_172;
		public char driverInfo_173;
		public char driverInfo_174;
		public char driverInfo_175;
		public char driverInfo_176;
		public char driverInfo_177;
		public char driverInfo_178;
		public char driverInfo_179;
		public char driverInfo_180;
		public char driverInfo_181;
		public char driverInfo_182;
		public char driverInfo_183;
		public char driverInfo_184;
		public char driverInfo_185;
		public char driverInfo_186;
		public char driverInfo_187;
		public char driverInfo_188;
		public char driverInfo_189;
		public char driverInfo_190;
		public char driverInfo_191;
		public char driverInfo_192;
		public char driverInfo_193;
		public char driverInfo_194;
		public char driverInfo_195;
		public char driverInfo_196;
		public char driverInfo_197;
		public char driverInfo_198;
		public char driverInfo_199;
		public char driverInfo_200;
		public char driverInfo_201;
		public char driverInfo_202;
		public char driverInfo_203;
		public char driverInfo_204;
		public char driverInfo_205;
		public char driverInfo_206;
		public char driverInfo_207;
		public char driverInfo_208;
		public char driverInfo_209;
		public char driverInfo_210;
		public char driverInfo_211;
		public char driverInfo_212;
		public char driverInfo_213;
		public char driverInfo_214;
		public char driverInfo_215;
		public char driverInfo_216;
		public char driverInfo_217;
		public char driverInfo_218;
		public char driverInfo_219;
		public char driverInfo_220;
		public char driverInfo_221;
		public char driverInfo_222;
		public char driverInfo_223;
		public char driverInfo_224;
		public char driverInfo_225;
		public char driverInfo_226;
		public char driverInfo_227;
		public char driverInfo_228;
		public char driverInfo_229;
		public char driverInfo_230;
		public char driverInfo_231;
		public char driverInfo_232;
		public char driverInfo_233;
		public char driverInfo_234;
		public char driverInfo_235;
		public char driverInfo_236;
		public char driverInfo_237;
		public char driverInfo_238;
		public char driverInfo_239;
		public char driverInfo_240;
		public char driverInfo_241;
		public char driverInfo_242;
		public char driverInfo_243;
		public char driverInfo_244;
		public char driverInfo_245;
		public char driverInfo_246;
		public char driverInfo_247;
		public char driverInfo_248;
		public char driverInfo_249;
		public char driverInfo_250;
		public char driverInfo_251;
		public char driverInfo_252;
		public char driverInfo_253;
		public char driverInfo_254;
		public char driverInfo_255;
		public VkConformanceVersion conformanceVersion;
		public VkShaderFloatControlsIndependence denormBehaviorIndependence;
		public VkShaderFloatControlsIndependence roundingModeIndependence;
		public VkBool32 shaderSignedZeroInfNanPreserveFloat16;
		public VkBool32 shaderSignedZeroInfNanPreserveFloat32;
		public VkBool32 shaderSignedZeroInfNanPreserveFloat64;
		public VkBool32 shaderDenormPreserveFloat16;
		public VkBool32 shaderDenormPreserveFloat32;
		public VkBool32 shaderDenormPreserveFloat64;
		public VkBool32 shaderDenormFlushToZeroFloat16;
		public VkBool32 shaderDenormFlushToZeroFloat32;
		public VkBool32 shaderDenormFlushToZeroFloat64;
		public VkBool32 shaderRoundingModeRTEFloat16;
		public VkBool32 shaderRoundingModeRTEFloat32;
		public VkBool32 shaderRoundingModeRTEFloat64;
		public VkBool32 shaderRoundingModeRTZFloat16;
		public VkBool32 shaderRoundingModeRTZFloat32;
		public VkBool32 shaderRoundingModeRTZFloat64;
		public uint maxUpdateAfterBindDescriptorsInAllPools;
		public VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
		public VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
		public VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
		public VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
		public VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
		public VkBool32 robustBufferAccessUpdateAfterBind;
		public VkBool32 quadDivergentImplicitLod;
		public uint maxPerStageDescriptorUpdateAfterBindSamplers;
		public uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
		public uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
		public uint maxPerStageDescriptorUpdateAfterBindSampledImages;
		public uint maxPerStageDescriptorUpdateAfterBindStorageImages;
		public uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
		public uint maxPerStageUpdateAfterBindResources;
		public uint maxDescriptorSetUpdateAfterBindSamplers;
		public uint maxDescriptorSetUpdateAfterBindUniformBuffers;
		public uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
		public uint maxDescriptorSetUpdateAfterBindStorageBuffers;
		public uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
		public uint maxDescriptorSetUpdateAfterBindSampledImages;
		public uint maxDescriptorSetUpdateAfterBindStorageImages;
		public uint maxDescriptorSetUpdateAfterBindInputAttachments;
		public VkResolveModeFlags supportedDepthResolveModes;
		public VkResolveModeFlags supportedStencilResolveModes;
		public VkBool32 independentResolveNone;
		public VkBool32 independentResolve;
		public VkBool32 filterMinmaxSingleComponentFormats;
		public VkBool32 filterMinmaxImageComponentMapping;
		public ulong maxTimelineSemaphoreValueDifference;
		public VkSampleCountFlags framebufferIntegerColorSampleCounts;
	}

	public unsafe partial struct VkImageFormatListCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkImageFormatListCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint viewFormatCount;
		public VkFormat* pViewFormats;
	}

	public unsafe partial struct VkAttachmentDescription2
	{
		/// <summary>
		/// The size of the <see cref="VkAttachmentDescription2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 56;

		public VkStructureType sType;
		public void* pNext;
		public VkAttachmentDescriptionFlags flags;
		public VkFormat format;
		public VkSampleCountFlags samples;
		public VkAttachmentLoadOp loadOp;
		public VkAttachmentStoreOp storeOp;
		public VkAttachmentLoadOp stencilLoadOp;
		public VkAttachmentStoreOp stencilStoreOp;
		public VkImageLayout initialLayout;
		public VkImageLayout finalLayout;
	}

	public unsafe partial struct VkAttachmentReference2
	{
		/// <summary>
		/// The size of the <see cref="VkAttachmentReference2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint attachment;
		public VkImageLayout layout;
		public VkImageAspectFlags aspectMask;
	}

	public unsafe partial struct VkSubpassDescription2
	{
		/// <summary>
		/// The size of the <see cref="VkSubpassDescription2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 88;

		public VkStructureType sType;
		public void* pNext;
		public VkSubpassDescriptionFlags flags;
		public VkPipelineBindPoint pipelineBindPoint;
		public uint viewMask;
		public uint inputAttachmentCount;
		public VkAttachmentReference2* pInputAttachments;
		public uint colorAttachmentCount;
		public VkAttachmentReference2* pColorAttachments;
		public VkAttachmentReference2* pResolveAttachments;
		public VkAttachmentReference2* pDepthStencilAttachment;
		public uint preserveAttachmentCount;
		public uint* pPreserveAttachments;
	}

	public unsafe partial struct VkSubpassDependency2
	{
		/// <summary>
		/// The size of the <see cref="VkSubpassDependency2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public uint srcSubpass;
		public uint dstSubpass;
		public VkPipelineStageFlags srcStageMask;
		public VkPipelineStageFlags dstStageMask;
		public VkAccessFlags srcAccessMask;
		public VkAccessFlags dstAccessMask;
		public VkDependencyFlags dependencyFlags;
		public int viewOffset;
	}

	public unsafe partial struct VkRenderPassCreateInfo2
	{
		/// <summary>
		/// The size of the <see cref="VkRenderPassCreateInfo2"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 80;

		public VkStructureType sType;
		public void* pNext;
		public VkRenderPassCreateFlags flags;
		public uint attachmentCount;
		public VkAttachmentDescription2* pAttachments;
		public uint subpassCount;
		public VkSubpassDescription2* pSubpasses;
		public uint dependencyCount;
		public VkSubpassDependency2* pDependencies;
		public uint correlatedViewMaskCount;
		public uint* pCorrelatedViewMasks;
	}

	public unsafe partial struct VkSubpassBeginInfo
	{
		/// <summary>
		/// The size of the <see cref="VkSubpassBeginInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkSubpassContents contents;
	}

	public unsafe partial struct VkSubpassEndInfo
	{
		/// <summary>
		/// The size of the <see cref="VkSubpassEndInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public VkStructureType sType;
		public void* pNext;
	}

	public unsafe partial struct VkPhysicalDevice8BitStorageFeatures
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDevice8BitStorageFeatures"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 storageBuffer8BitAccess;
		public VkBool32 uniformAndStorageBuffer8BitAccess;
		public VkBool32 storagePushConstant8;
	}

	public unsafe partial struct VkPhysicalDeviceDriverProperties
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceDriverProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 536;

		public VkStructureType sType;
		public void* pNext;
		public VkDriverId driverID;
		public char driverName_0;
		public char driverName_1;
		public char driverName_2;
		public char driverName_3;
		public char driverName_4;
		public char driverName_5;
		public char driverName_6;
		public char driverName_7;
		public char driverName_8;
		public char driverName_9;
		public char driverName_10;
		public char driverName_11;
		public char driverName_12;
		public char driverName_13;
		public char driverName_14;
		public char driverName_15;
		public char driverName_16;
		public char driverName_17;
		public char driverName_18;
		public char driverName_19;
		public char driverName_20;
		public char driverName_21;
		public char driverName_22;
		public char driverName_23;
		public char driverName_24;
		public char driverName_25;
		public char driverName_26;
		public char driverName_27;
		public char driverName_28;
		public char driverName_29;
		public char driverName_30;
		public char driverName_31;
		public char driverName_32;
		public char driverName_33;
		public char driverName_34;
		public char driverName_35;
		public char driverName_36;
		public char driverName_37;
		public char driverName_38;
		public char driverName_39;
		public char driverName_40;
		public char driverName_41;
		public char driverName_42;
		public char driverName_43;
		public char driverName_44;
		public char driverName_45;
		public char driverName_46;
		public char driverName_47;
		public char driverName_48;
		public char driverName_49;
		public char driverName_50;
		public char driverName_51;
		public char driverName_52;
		public char driverName_53;
		public char driverName_54;
		public char driverName_55;
		public char driverName_56;
		public char driverName_57;
		public char driverName_58;
		public char driverName_59;
		public char driverName_60;
		public char driverName_61;
		public char driverName_62;
		public char driverName_63;
		public char driverName_64;
		public char driverName_65;
		public char driverName_66;
		public char driverName_67;
		public char driverName_68;
		public char driverName_69;
		public char driverName_70;
		public char driverName_71;
		public char driverName_72;
		public char driverName_73;
		public char driverName_74;
		public char driverName_75;
		public char driverName_76;
		public char driverName_77;
		public char driverName_78;
		public char driverName_79;
		public char driverName_80;
		public char driverName_81;
		public char driverName_82;
		public char driverName_83;
		public char driverName_84;
		public char driverName_85;
		public char driverName_86;
		public char driverName_87;
		public char driverName_88;
		public char driverName_89;
		public char driverName_90;
		public char driverName_91;
		public char driverName_92;
		public char driverName_93;
		public char driverName_94;
		public char driverName_95;
		public char driverName_96;
		public char driverName_97;
		public char driverName_98;
		public char driverName_99;
		public char driverName_100;
		public char driverName_101;
		public char driverName_102;
		public char driverName_103;
		public char driverName_104;
		public char driverName_105;
		public char driverName_106;
		public char driverName_107;
		public char driverName_108;
		public char driverName_109;
		public char driverName_110;
		public char driverName_111;
		public char driverName_112;
		public char driverName_113;
		public char driverName_114;
		public char driverName_115;
		public char driverName_116;
		public char driverName_117;
		public char driverName_118;
		public char driverName_119;
		public char driverName_120;
		public char driverName_121;
		public char driverName_122;
		public char driverName_123;
		public char driverName_124;
		public char driverName_125;
		public char driverName_126;
		public char driverName_127;
		public char driverName_128;
		public char driverName_129;
		public char driverName_130;
		public char driverName_131;
		public char driverName_132;
		public char driverName_133;
		public char driverName_134;
		public char driverName_135;
		public char driverName_136;
		public char driverName_137;
		public char driverName_138;
		public char driverName_139;
		public char driverName_140;
		public char driverName_141;
		public char driverName_142;
		public char driverName_143;
		public char driverName_144;
		public char driverName_145;
		public char driverName_146;
		public char driverName_147;
		public char driverName_148;
		public char driverName_149;
		public char driverName_150;
		public char driverName_151;
		public char driverName_152;
		public char driverName_153;
		public char driverName_154;
		public char driverName_155;
		public char driverName_156;
		public char driverName_157;
		public char driverName_158;
		public char driverName_159;
		public char driverName_160;
		public char driverName_161;
		public char driverName_162;
		public char driverName_163;
		public char driverName_164;
		public char driverName_165;
		public char driverName_166;
		public char driverName_167;
		public char driverName_168;
		public char driverName_169;
		public char driverName_170;
		public char driverName_171;
		public char driverName_172;
		public char driverName_173;
		public char driverName_174;
		public char driverName_175;
		public char driverName_176;
		public char driverName_177;
		public char driverName_178;
		public char driverName_179;
		public char driverName_180;
		public char driverName_181;
		public char driverName_182;
		public char driverName_183;
		public char driverName_184;
		public char driverName_185;
		public char driverName_186;
		public char driverName_187;
		public char driverName_188;
		public char driverName_189;
		public char driverName_190;
		public char driverName_191;
		public char driverName_192;
		public char driverName_193;
		public char driverName_194;
		public char driverName_195;
		public char driverName_196;
		public char driverName_197;
		public char driverName_198;
		public char driverName_199;
		public char driverName_200;
		public char driverName_201;
		public char driverName_202;
		public char driverName_203;
		public char driverName_204;
		public char driverName_205;
		public char driverName_206;
		public char driverName_207;
		public char driverName_208;
		public char driverName_209;
		public char driverName_210;
		public char driverName_211;
		public char driverName_212;
		public char driverName_213;
		public char driverName_214;
		public char driverName_215;
		public char driverName_216;
		public char driverName_217;
		public char driverName_218;
		public char driverName_219;
		public char driverName_220;
		public char driverName_221;
		public char driverName_222;
		public char driverName_223;
		public char driverName_224;
		public char driverName_225;
		public char driverName_226;
		public char driverName_227;
		public char driverName_228;
		public char driverName_229;
		public char driverName_230;
		public char driverName_231;
		public char driverName_232;
		public char driverName_233;
		public char driverName_234;
		public char driverName_235;
		public char driverName_236;
		public char driverName_237;
		public char driverName_238;
		public char driverName_239;
		public char driverName_240;
		public char driverName_241;
		public char driverName_242;
		public char driverName_243;
		public char driverName_244;
		public char driverName_245;
		public char driverName_246;
		public char driverName_247;
		public char driverName_248;
		public char driverName_249;
		public char driverName_250;
		public char driverName_251;
		public char driverName_252;
		public char driverName_253;
		public char driverName_254;
		public char driverName_255;
		public char driverInfo_0;
		public char driverInfo_1;
		public char driverInfo_2;
		public char driverInfo_3;
		public char driverInfo_4;
		public char driverInfo_5;
		public char driverInfo_6;
		public char driverInfo_7;
		public char driverInfo_8;
		public char driverInfo_9;
		public char driverInfo_10;
		public char driverInfo_11;
		public char driverInfo_12;
		public char driverInfo_13;
		public char driverInfo_14;
		public char driverInfo_15;
		public char driverInfo_16;
		public char driverInfo_17;
		public char driverInfo_18;
		public char driverInfo_19;
		public char driverInfo_20;
		public char driverInfo_21;
		public char driverInfo_22;
		public char driverInfo_23;
		public char driverInfo_24;
		public char driverInfo_25;
		public char driverInfo_26;
		public char driverInfo_27;
		public char driverInfo_28;
		public char driverInfo_29;
		public char driverInfo_30;
		public char driverInfo_31;
		public char driverInfo_32;
		public char driverInfo_33;
		public char driverInfo_34;
		public char driverInfo_35;
		public char driverInfo_36;
		public char driverInfo_37;
		public char driverInfo_38;
		public char driverInfo_39;
		public char driverInfo_40;
		public char driverInfo_41;
		public char driverInfo_42;
		public char driverInfo_43;
		public char driverInfo_44;
		public char driverInfo_45;
		public char driverInfo_46;
		public char driverInfo_47;
		public char driverInfo_48;
		public char driverInfo_49;
		public char driverInfo_50;
		public char driverInfo_51;
		public char driverInfo_52;
		public char driverInfo_53;
		public char driverInfo_54;
		public char driverInfo_55;
		public char driverInfo_56;
		public char driverInfo_57;
		public char driverInfo_58;
		public char driverInfo_59;
		public char driverInfo_60;
		public char driverInfo_61;
		public char driverInfo_62;
		public char driverInfo_63;
		public char driverInfo_64;
		public char driverInfo_65;
		public char driverInfo_66;
		public char driverInfo_67;
		public char driverInfo_68;
		public char driverInfo_69;
		public char driverInfo_70;
		public char driverInfo_71;
		public char driverInfo_72;
		public char driverInfo_73;
		public char driverInfo_74;
		public char driverInfo_75;
		public char driverInfo_76;
		public char driverInfo_77;
		public char driverInfo_78;
		public char driverInfo_79;
		public char driverInfo_80;
		public char driverInfo_81;
		public char driverInfo_82;
		public char driverInfo_83;
		public char driverInfo_84;
		public char driverInfo_85;
		public char driverInfo_86;
		public char driverInfo_87;
		public char driverInfo_88;
		public char driverInfo_89;
		public char driverInfo_90;
		public char driverInfo_91;
		public char driverInfo_92;
		public char driverInfo_93;
		public char driverInfo_94;
		public char driverInfo_95;
		public char driverInfo_96;
		public char driverInfo_97;
		public char driverInfo_98;
		public char driverInfo_99;
		public char driverInfo_100;
		public char driverInfo_101;
		public char driverInfo_102;
		public char driverInfo_103;
		public char driverInfo_104;
		public char driverInfo_105;
		public char driverInfo_106;
		public char driverInfo_107;
		public char driverInfo_108;
		public char driverInfo_109;
		public char driverInfo_110;
		public char driverInfo_111;
		public char driverInfo_112;
		public char driverInfo_113;
		public char driverInfo_114;
		public char driverInfo_115;
		public char driverInfo_116;
		public char driverInfo_117;
		public char driverInfo_118;
		public char driverInfo_119;
		public char driverInfo_120;
		public char driverInfo_121;
		public char driverInfo_122;
		public char driverInfo_123;
		public char driverInfo_124;
		public char driverInfo_125;
		public char driverInfo_126;
		public char driverInfo_127;
		public char driverInfo_128;
		public char driverInfo_129;
		public char driverInfo_130;
		public char driverInfo_131;
		public char driverInfo_132;
		public char driverInfo_133;
		public char driverInfo_134;
		public char driverInfo_135;
		public char driverInfo_136;
		public char driverInfo_137;
		public char driverInfo_138;
		public char driverInfo_139;
		public char driverInfo_140;
		public char driverInfo_141;
		public char driverInfo_142;
		public char driverInfo_143;
		public char driverInfo_144;
		public char driverInfo_145;
		public char driverInfo_146;
		public char driverInfo_147;
		public char driverInfo_148;
		public char driverInfo_149;
		public char driverInfo_150;
		public char driverInfo_151;
		public char driverInfo_152;
		public char driverInfo_153;
		public char driverInfo_154;
		public char driverInfo_155;
		public char driverInfo_156;
		public char driverInfo_157;
		public char driverInfo_158;
		public char driverInfo_159;
		public char driverInfo_160;
		public char driverInfo_161;
		public char driverInfo_162;
		public char driverInfo_163;
		public char driverInfo_164;
		public char driverInfo_165;
		public char driverInfo_166;
		public char driverInfo_167;
		public char driverInfo_168;
		public char driverInfo_169;
		public char driverInfo_170;
		public char driverInfo_171;
		public char driverInfo_172;
		public char driverInfo_173;
		public char driverInfo_174;
		public char driverInfo_175;
		public char driverInfo_176;
		public char driverInfo_177;
		public char driverInfo_178;
		public char driverInfo_179;
		public char driverInfo_180;
		public char driverInfo_181;
		public char driverInfo_182;
		public char driverInfo_183;
		public char driverInfo_184;
		public char driverInfo_185;
		public char driverInfo_186;
		public char driverInfo_187;
		public char driverInfo_188;
		public char driverInfo_189;
		public char driverInfo_190;
		public char driverInfo_191;
		public char driverInfo_192;
		public char driverInfo_193;
		public char driverInfo_194;
		public char driverInfo_195;
		public char driverInfo_196;
		public char driverInfo_197;
		public char driverInfo_198;
		public char driverInfo_199;
		public char driverInfo_200;
		public char driverInfo_201;
		public char driverInfo_202;
		public char driverInfo_203;
		public char driverInfo_204;
		public char driverInfo_205;
		public char driverInfo_206;
		public char driverInfo_207;
		public char driverInfo_208;
		public char driverInfo_209;
		public char driverInfo_210;
		public char driverInfo_211;
		public char driverInfo_212;
		public char driverInfo_213;
		public char driverInfo_214;
		public char driverInfo_215;
		public char driverInfo_216;
		public char driverInfo_217;
		public char driverInfo_218;
		public char driverInfo_219;
		public char driverInfo_220;
		public char driverInfo_221;
		public char driverInfo_222;
		public char driverInfo_223;
		public char driverInfo_224;
		public char driverInfo_225;
		public char driverInfo_226;
		public char driverInfo_227;
		public char driverInfo_228;
		public char driverInfo_229;
		public char driverInfo_230;
		public char driverInfo_231;
		public char driverInfo_232;
		public char driverInfo_233;
		public char driverInfo_234;
		public char driverInfo_235;
		public char driverInfo_236;
		public char driverInfo_237;
		public char driverInfo_238;
		public char driverInfo_239;
		public char driverInfo_240;
		public char driverInfo_241;
		public char driverInfo_242;
		public char driverInfo_243;
		public char driverInfo_244;
		public char driverInfo_245;
		public char driverInfo_246;
		public char driverInfo_247;
		public char driverInfo_248;
		public char driverInfo_249;
		public char driverInfo_250;
		public char driverInfo_251;
		public char driverInfo_252;
		public char driverInfo_253;
		public char driverInfo_254;
		public char driverInfo_255;
		public VkConformanceVersion conformanceVersion;
	}

	public unsafe partial struct VkPhysicalDeviceShaderAtomicInt64Features
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceShaderAtomicInt64Features"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderBufferInt64Atomics;
		public VkBool32 shaderSharedInt64Atomics;
	}

	public unsafe partial struct VkPhysicalDeviceShaderFloat16Int8Features
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceShaderFloat16Int8Features"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderFloat16;
		public VkBool32 shaderInt8;
	}

	public unsafe partial struct VkPhysicalDeviceFloatControlsProperties
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceFloatControlsProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 88;

		public VkStructureType sType;
		public void* pNext;
		public VkShaderFloatControlsIndependence denormBehaviorIndependence;
		public VkShaderFloatControlsIndependence roundingModeIndependence;
		public VkBool32 shaderSignedZeroInfNanPreserveFloat16;
		public VkBool32 shaderSignedZeroInfNanPreserveFloat32;
		public VkBool32 shaderSignedZeroInfNanPreserveFloat64;
		public VkBool32 shaderDenormPreserveFloat16;
		public VkBool32 shaderDenormPreserveFloat32;
		public VkBool32 shaderDenormPreserveFloat64;
		public VkBool32 shaderDenormFlushToZeroFloat16;
		public VkBool32 shaderDenormFlushToZeroFloat32;
		public VkBool32 shaderDenormFlushToZeroFloat64;
		public VkBool32 shaderRoundingModeRTEFloat16;
		public VkBool32 shaderRoundingModeRTEFloat32;
		public VkBool32 shaderRoundingModeRTEFloat64;
		public VkBool32 shaderRoundingModeRTZFloat16;
		public VkBool32 shaderRoundingModeRTZFloat32;
		public VkBool32 shaderRoundingModeRTZFloat64;
	}

	public unsafe partial struct VkDescriptorSetLayoutBindingFlagsCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkDescriptorSetLayoutBindingFlagsCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint bindingCount;
		public VkDescriptorBindingFlags* pBindingFlags;
	}

	public unsafe partial struct VkPhysicalDeviceDescriptorIndexingFeatures
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceDescriptorIndexingFeatures"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 96;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderInputAttachmentArrayDynamicIndexing;
		public VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
		public VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
		public VkBool32 shaderUniformBufferArrayNonUniformIndexing;
		public VkBool32 shaderSampledImageArrayNonUniformIndexing;
		public VkBool32 shaderStorageBufferArrayNonUniformIndexing;
		public VkBool32 shaderStorageImageArrayNonUniformIndexing;
		public VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
		public VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
		public VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
		public VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
		public VkBool32 descriptorBindingSampledImageUpdateAfterBind;
		public VkBool32 descriptorBindingStorageImageUpdateAfterBind;
		public VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
		public VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
		public VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
		public VkBool32 descriptorBindingUpdateUnusedWhilePending;
		public VkBool32 descriptorBindingPartiallyBound;
		public VkBool32 descriptorBindingVariableDescriptorCount;
		public VkBool32 runtimeDescriptorArray;
	}

	public unsafe partial struct VkPhysicalDeviceDescriptorIndexingProperties
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceDescriptorIndexingProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 112;

		public VkStructureType sType;
		public void* pNext;
		public uint maxUpdateAfterBindDescriptorsInAllPools;
		public VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
		public VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
		public VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
		public VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
		public VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
		public VkBool32 robustBufferAccessUpdateAfterBind;
		public VkBool32 quadDivergentImplicitLod;
		public uint maxPerStageDescriptorUpdateAfterBindSamplers;
		public uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
		public uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
		public uint maxPerStageDescriptorUpdateAfterBindSampledImages;
		public uint maxPerStageDescriptorUpdateAfterBindStorageImages;
		public uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
		public uint maxPerStageUpdateAfterBindResources;
		public uint maxDescriptorSetUpdateAfterBindSamplers;
		public uint maxDescriptorSetUpdateAfterBindUniformBuffers;
		public uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
		public uint maxDescriptorSetUpdateAfterBindStorageBuffers;
		public uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
		public uint maxDescriptorSetUpdateAfterBindSampledImages;
		public uint maxDescriptorSetUpdateAfterBindStorageImages;
		public uint maxDescriptorSetUpdateAfterBindInputAttachments;
	}

	public unsafe partial struct VkDescriptorSetVariableDescriptorCountAllocateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkDescriptorSetVariableDescriptorCountAllocateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint descriptorSetCount;
		public uint* pDescriptorCounts;
	}

	public unsafe partial struct VkDescriptorSetVariableDescriptorCountLayoutSupport
	{
		/// <summary>
		/// The size of the <see cref="VkDescriptorSetVariableDescriptorCountLayoutSupport"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public uint maxVariableDescriptorCount;
	}

	public unsafe partial struct VkSubpassDescriptionDepthStencilResolve
	{
		/// <summary>
		/// The size of the <see cref="VkSubpassDescriptionDepthStencilResolve"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkResolveModeFlags depthResolveMode;
		public VkResolveModeFlags stencilResolveMode;
		public VkAttachmentReference2* pDepthStencilResolveAttachment;
	}

	public unsafe partial struct VkPhysicalDeviceDepthStencilResolveProperties
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceDepthStencilResolveProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkResolveModeFlags supportedDepthResolveModes;
		public VkResolveModeFlags supportedStencilResolveModes;
		public VkBool32 independentResolveNone;
		public VkBool32 independentResolve;
	}

	public unsafe partial struct VkPhysicalDeviceScalarBlockLayoutFeatures
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceScalarBlockLayoutFeatures"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 scalarBlockLayout;
	}

	public unsafe partial struct VkImageStencilUsageCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkImageStencilUsageCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkImageUsageFlags stencilUsage;
	}

	public unsafe partial struct VkSamplerReductionModeCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkSamplerReductionModeCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkSamplerReductionMode reductionMode;
	}

	public unsafe partial struct VkPhysicalDeviceSamplerFilterMinmaxProperties
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceSamplerFilterMinmaxProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 filterMinmaxSingleComponentFormats;
		public VkBool32 filterMinmaxImageComponentMapping;
	}

	public unsafe partial struct VkPhysicalDeviceVulkanMemoryModelFeatures
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceVulkanMemoryModelFeatures"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 vulkanMemoryModel;
		public VkBool32 vulkanMemoryModelDeviceScope;
		public VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;
	}

	public unsafe partial struct VkPhysicalDeviceImagelessFramebufferFeatures
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceImagelessFramebufferFeatures"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 imagelessFramebuffer;
	}

	public unsafe partial struct VkFramebufferAttachmentImageInfo
	{
		/// <summary>
		/// The size of the <see cref="VkFramebufferAttachmentImageInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public VkImageCreateFlags flags;
		public VkImageUsageFlags usage;
		public uint width;
		public uint height;
		public uint layerCount;
		public uint viewFormatCount;
		public VkFormat* pViewFormats;
	}

	public unsafe partial struct VkFramebufferAttachmentsCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkFramebufferAttachmentsCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint attachmentImageInfoCount;
		public VkFramebufferAttachmentImageInfo* pAttachmentImageInfos;
	}

	public unsafe partial struct VkRenderPassAttachmentBeginInfo
	{
		/// <summary>
		/// The size of the <see cref="VkRenderPassAttachmentBeginInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint attachmentCount;
		public VkImageView* pAttachments;
	}

	public unsafe partial struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceUniformBufferStandardLayoutFeatures"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 uniformBufferStandardLayout;
	}

	public unsafe partial struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderSubgroupExtendedTypes;
	}

	public unsafe partial struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 separateDepthStencilLayouts;
	}

	public unsafe partial struct VkAttachmentReferenceStencilLayout
	{
		/// <summary>
		/// The size of the <see cref="VkAttachmentReferenceStencilLayout"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkImageLayout stencilLayout;
	}

	public unsafe partial struct VkAttachmentDescriptionStencilLayout
	{
		/// <summary>
		/// The size of the <see cref="VkAttachmentDescriptionStencilLayout"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkImageLayout stencilInitialLayout;
		public VkImageLayout stencilFinalLayout;
	}

	public unsafe partial struct VkPhysicalDeviceHostQueryResetFeatures
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceHostQueryResetFeatures"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 hostQueryReset;
	}

	public unsafe partial struct VkPhysicalDeviceTimelineSemaphoreFeatures
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceTimelineSemaphoreFeatures"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 timelineSemaphore;
	}

	public unsafe partial struct VkPhysicalDeviceTimelineSemaphoreProperties
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceTimelineSemaphoreProperties"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public ulong maxTimelineSemaphoreValueDifference;
	}

	public unsafe partial struct VkSemaphoreTypeCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkSemaphoreTypeCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkSemaphoreType semaphoreType;
		public ulong initialValue;
	}

	public unsafe partial struct VkTimelineSemaphoreSubmitInfo
	{
		/// <summary>
		/// The size of the <see cref="VkTimelineSemaphoreSubmitInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public uint waitSemaphoreValueCount;
		public ulong* pWaitSemaphoreValues;
		public uint signalSemaphoreValueCount;
		public ulong* pSignalSemaphoreValues;
	}

	public unsafe partial struct VkSemaphoreWaitInfo
	{
		/// <summary>
		/// The size of the <see cref="VkSemaphoreWaitInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkSemaphoreWaitFlags flags;
		public uint semaphoreCount;
		public VkSemaphore* pSemaphores;
		public ulong* pValues;
	}

	public unsafe partial struct VkSemaphoreSignalInfo
	{
		/// <summary>
		/// The size of the <see cref="VkSemaphoreSignalInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkSemaphore semaphore;
		public ulong value;
	}

	public unsafe partial struct VkPhysicalDeviceBufferDeviceAddressFeatures
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceBufferDeviceAddressFeatures"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 bufferDeviceAddress;
		public VkBool32 bufferDeviceAddressCaptureReplay;
		public VkBool32 bufferDeviceAddressMultiDevice;
	}

	public unsafe partial struct VkBufferDeviceAddressInfo
	{
		/// <summary>
		/// The size of the <see cref="VkBufferDeviceAddressInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBuffer buffer;
	}

	public unsafe partial struct VkBufferOpaqueCaptureAddressCreateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkBufferOpaqueCaptureAddressCreateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public ulong opaqueCaptureAddress;
	}

	public unsafe partial struct VkMemoryOpaqueCaptureAddressAllocateInfo
	{
		/// <summary>
		/// The size of the <see cref="VkMemoryOpaqueCaptureAddressAllocateInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public ulong opaqueCaptureAddress;
	}

	public unsafe partial struct VkDeviceMemoryOpaqueCaptureAddressInfo
	{
		/// <summary>
		/// The size of the <see cref="VkDeviceMemoryOpaqueCaptureAddressInfo"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkDeviceMemory memory;
	}

	public unsafe partial struct VkSurfaceCapabilitiesKHR
	{
		/// <summary>
		/// The size of the <see cref="VkSurfaceCapabilitiesKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 52;

		public uint minImageCount;
		public uint maxImageCount;
		public VkExtent2D currentExtent;
		public VkExtent2D minImageExtent;
		public VkExtent2D maxImageExtent;
		public uint maxImageArrayLayers;
		public VkSurfaceTransformFlagsKHR supportedTransforms;
		public VkSurfaceTransformFlagsKHR currentTransform;
		public VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
		public VkImageUsageFlags supportedUsageFlags;
	}

	public unsafe partial struct VkSurfaceFormatKHR
	{
		/// <summary>
		/// The size of the <see cref="VkSurfaceFormatKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 8;

		public VkFormat format;
		public VkColorSpaceKHR colorSpace;
	}

	public unsafe partial struct VkSwapchainCreateInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkSwapchainCreateInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 104;

		public VkStructureType sType;
		public void* pNext;
		public VkSwapchainCreateFlagsKHR flags;
		public VkSurfaceKHR surface;
		public uint minImageCount;
		public VkFormat imageFormat;
		public VkColorSpaceKHR imageColorSpace;
		public VkExtent2D imageExtent;
		public uint imageArrayLayers;
		public VkImageUsageFlags imageUsage;
		public VkSharingMode imageSharingMode;
		public uint queueFamilyIndexCount;
		public uint* pQueueFamilyIndices;
		public VkSurfaceTransformFlagsKHR preTransform;
		public VkCompositeAlphaFlagsKHR compositeAlpha;
		public VkPresentModeKHR presentMode;
		public VkBool32 clipped;
		public VkSwapchainKHR oldSwapchain;
	}

	public unsafe partial struct VkPresentInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkPresentInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public uint waitSemaphoreCount;
		public VkSemaphore* pWaitSemaphores;
		public uint swapchainCount;
		public VkSwapchainKHR* pSwapchains;
		public uint* pImageIndices;
		public VkResult* pResults;
	}

	public unsafe partial struct VkImageSwapchainCreateInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkImageSwapchainCreateInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkSwapchainKHR swapchain;
	}

	public unsafe partial struct VkBindImageMemorySwapchainInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkBindImageMemorySwapchainInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkSwapchainKHR swapchain;
		public uint imageIndex;
	}

	public unsafe partial struct VkAcquireNextImageInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkAcquireNextImageInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 56;

		public VkStructureType sType;
		public void* pNext;
		public VkSwapchainKHR swapchain;
		public ulong timeout;
		public VkSemaphore semaphore;
		public VkFence fence;
		public uint deviceMask;
	}

	public unsafe partial struct VkDeviceGroupPresentCapabilitiesKHR
	{
		/// <summary>
		/// The size of the <see cref="VkDeviceGroupPresentCapabilitiesKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 152;

		public VkStructureType sType;
		public void* pNext;
		public fixed uint presentMask[32];
		public VkDeviceGroupPresentModeFlagsKHR modes;
	}

	public unsafe partial struct VkDeviceGroupPresentInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkDeviceGroupPresentInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public uint swapchainCount;
		public uint* pDeviceMasks;
		public VkDeviceGroupPresentModeFlagsKHR mode;
	}

	public unsafe partial struct VkDeviceGroupSwapchainCreateInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkDeviceGroupSwapchainCreateInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkDeviceGroupPresentModeFlagsKHR modes;
	}

	public unsafe partial struct VkDisplayPropertiesKHR
	{
		/// <summary>
		/// The size of the <see cref="VkDisplayPropertiesKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkDisplayKHR display;
		public byte* displayName;
		public VkExtent2D physicalDimensions;
		public VkExtent2D physicalResolution;
		public VkSurfaceTransformFlagsKHR supportedTransforms;
		public VkBool32 planeReorderPossible;
		public VkBool32 persistentContent;
	}

	public unsafe partial struct VkDisplayModeParametersKHR
	{
		/// <summary>
		/// The size of the <see cref="VkDisplayModeParametersKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 12;

		public VkExtent2D visibleRegion;
		public uint refreshRate;
	}

	public unsafe partial struct VkDisplayModePropertiesKHR
	{
		/// <summary>
		/// The size of the <see cref="VkDisplayModePropertiesKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkDisplayModeKHR displayMode;
		public VkDisplayModeParametersKHR parameters;
	}

	public unsafe partial struct VkDisplayModeCreateInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkDisplayModeCreateInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkDisplayModeCreateFlagsKHR flags;
		public VkDisplayModeParametersKHR parameters;
	}

	public unsafe partial struct VkDisplayPlaneCapabilitiesKHR
	{
		/// <summary>
		/// The size of the <see cref="VkDisplayPlaneCapabilitiesKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 68;

		public VkDisplayPlaneAlphaFlagsKHR supportedAlpha;
		public VkOffset2D minSrcPosition;
		public VkOffset2D maxSrcPosition;
		public VkExtent2D minSrcExtent;
		public VkExtent2D maxSrcExtent;
		public VkOffset2D minDstPosition;
		public VkOffset2D maxDstPosition;
		public VkExtent2D minDstExtent;
		public VkExtent2D maxDstExtent;
	}

	public unsafe partial struct VkDisplayPlanePropertiesKHR
	{
		/// <summary>
		/// The size of the <see cref="VkDisplayPlanePropertiesKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public VkDisplayKHR currentDisplay;
		public uint currentStackIndex;
	}

	public unsafe partial struct VkDisplaySurfaceCreateInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkDisplaySurfaceCreateInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public VkDisplaySurfaceCreateFlagsKHR flags;
		public VkDisplayModeKHR displayMode;
		public uint planeIndex;
		public uint planeStackIndex;
		public VkSurfaceTransformFlagsKHR transform;
		public float globalAlpha;
		public VkDisplayPlaneAlphaFlagsKHR alphaMode;
		public VkExtent2D imageExtent;
	}

	public unsafe partial struct VkDisplayPresentInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkDisplayPresentInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 56;

		public VkStructureType sType;
		public void* pNext;
		public VkRect2D srcRect;
		public VkRect2D dstRect;
		public VkBool32 persistent;
	}

	public unsafe partial struct VkImportMemoryFdInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkImportMemoryFdInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryHandleTypeFlags handleType;
		public int fd;
	}

	public unsafe partial struct VkMemoryFdPropertiesKHR
	{
		/// <summary>
		/// The size of the <see cref="VkMemoryFdPropertiesKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public uint memoryTypeBits;
	}

	public unsafe partial struct VkMemoryGetFdInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkMemoryGetFdInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkDeviceMemory memory;
		public VkExternalMemoryHandleTypeFlags handleType;
	}

	public unsafe partial struct VkImportSemaphoreFdInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkImportSemaphoreFdInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkSemaphore semaphore;
		public VkSemaphoreImportFlags flags;
		public VkExternalSemaphoreHandleTypeFlags handleType;
		public int fd;
	}

	public unsafe partial struct VkSemaphoreGetFdInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkSemaphoreGetFdInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkSemaphore semaphore;
		public VkExternalSemaphoreHandleTypeFlags handleType;
	}

	public unsafe partial struct VkPhysicalDevicePushDescriptorPropertiesKHR
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDevicePushDescriptorPropertiesKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public uint maxPushDescriptors;
	}

	public unsafe partial struct VkRectLayerKHR
	{
		/// <summary>
		/// The size of the <see cref="VkRectLayerKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 20;

		public VkOffset2D offset;
		public VkExtent2D extent;
		public uint layer;
	}

	public unsafe partial struct VkPresentRegionKHR
	{
		/// <summary>
		/// The size of the <see cref="VkPresentRegionKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public uint rectangleCount;
		public VkRectLayerKHR* pRectangles;
	}

	public unsafe partial struct VkPresentRegionsKHR
	{
		/// <summary>
		/// The size of the <see cref="VkPresentRegionsKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint swapchainCount;
		public VkPresentRegionKHR* pRegions;
	}

	public unsafe partial struct VkSharedPresentSurfaceCapabilitiesKHR
	{
		/// <summary>
		/// The size of the <see cref="VkSharedPresentSurfaceCapabilitiesKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkImageUsageFlags sharedPresentSupportedUsageFlags;
	}

	public unsafe partial struct VkImportFenceFdInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkImportFenceFdInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkFence fence;
		public VkFenceImportFlags flags;
		public VkExternalFenceHandleTypeFlags handleType;
		public int fd;
	}

	public unsafe partial struct VkFenceGetFdInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkFenceGetFdInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkFence fence;
		public VkExternalFenceHandleTypeFlags handleType;
	}

	public unsafe partial struct VkPhysicalDevicePerformanceQueryFeaturesKHR
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDevicePerformanceQueryFeaturesKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 performanceCounterQueryPools;
		public VkBool32 performanceCounterMultipleQueryPools;
	}

	public unsafe partial struct VkPhysicalDevicePerformanceQueryPropertiesKHR
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDevicePerformanceQueryPropertiesKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 allowCommandBufferQueryCopies;
	}

	public unsafe partial struct VkPerformanceCounterKHR
	{
		/// <summary>
		/// The size of the <see cref="VkPerformanceCounterKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public VkPerformanceCounterUnitKHR unit;
		public VkPerformanceCounterScopeKHR scope;
		public VkPerformanceCounterStorageKHR storage;
		public fixed byte uuid[16];
	}

	public unsafe partial struct VkPerformanceCounterDescriptionKHR
	{
		/// <summary>
		/// The size of the <see cref="VkPerformanceCounterDescriptionKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 792;

		public VkStructureType sType;
		public void* pNext;
		public VkPerformanceCounterDescriptionFlagsKHR flags;
		public char name_0;
		public char name_1;
		public char name_2;
		public char name_3;
		public char name_4;
		public char name_5;
		public char name_6;
		public char name_7;
		public char name_8;
		public char name_9;
		public char name_10;
		public char name_11;
		public char name_12;
		public char name_13;
		public char name_14;
		public char name_15;
		public char name_16;
		public char name_17;
		public char name_18;
		public char name_19;
		public char name_20;
		public char name_21;
		public char name_22;
		public char name_23;
		public char name_24;
		public char name_25;
		public char name_26;
		public char name_27;
		public char name_28;
		public char name_29;
		public char name_30;
		public char name_31;
		public char name_32;
		public char name_33;
		public char name_34;
		public char name_35;
		public char name_36;
		public char name_37;
		public char name_38;
		public char name_39;
		public char name_40;
		public char name_41;
		public char name_42;
		public char name_43;
		public char name_44;
		public char name_45;
		public char name_46;
		public char name_47;
		public char name_48;
		public char name_49;
		public char name_50;
		public char name_51;
		public char name_52;
		public char name_53;
		public char name_54;
		public char name_55;
		public char name_56;
		public char name_57;
		public char name_58;
		public char name_59;
		public char name_60;
		public char name_61;
		public char name_62;
		public char name_63;
		public char name_64;
		public char name_65;
		public char name_66;
		public char name_67;
		public char name_68;
		public char name_69;
		public char name_70;
		public char name_71;
		public char name_72;
		public char name_73;
		public char name_74;
		public char name_75;
		public char name_76;
		public char name_77;
		public char name_78;
		public char name_79;
		public char name_80;
		public char name_81;
		public char name_82;
		public char name_83;
		public char name_84;
		public char name_85;
		public char name_86;
		public char name_87;
		public char name_88;
		public char name_89;
		public char name_90;
		public char name_91;
		public char name_92;
		public char name_93;
		public char name_94;
		public char name_95;
		public char name_96;
		public char name_97;
		public char name_98;
		public char name_99;
		public char name_100;
		public char name_101;
		public char name_102;
		public char name_103;
		public char name_104;
		public char name_105;
		public char name_106;
		public char name_107;
		public char name_108;
		public char name_109;
		public char name_110;
		public char name_111;
		public char name_112;
		public char name_113;
		public char name_114;
		public char name_115;
		public char name_116;
		public char name_117;
		public char name_118;
		public char name_119;
		public char name_120;
		public char name_121;
		public char name_122;
		public char name_123;
		public char name_124;
		public char name_125;
		public char name_126;
		public char name_127;
		public char name_128;
		public char name_129;
		public char name_130;
		public char name_131;
		public char name_132;
		public char name_133;
		public char name_134;
		public char name_135;
		public char name_136;
		public char name_137;
		public char name_138;
		public char name_139;
		public char name_140;
		public char name_141;
		public char name_142;
		public char name_143;
		public char name_144;
		public char name_145;
		public char name_146;
		public char name_147;
		public char name_148;
		public char name_149;
		public char name_150;
		public char name_151;
		public char name_152;
		public char name_153;
		public char name_154;
		public char name_155;
		public char name_156;
		public char name_157;
		public char name_158;
		public char name_159;
		public char name_160;
		public char name_161;
		public char name_162;
		public char name_163;
		public char name_164;
		public char name_165;
		public char name_166;
		public char name_167;
		public char name_168;
		public char name_169;
		public char name_170;
		public char name_171;
		public char name_172;
		public char name_173;
		public char name_174;
		public char name_175;
		public char name_176;
		public char name_177;
		public char name_178;
		public char name_179;
		public char name_180;
		public char name_181;
		public char name_182;
		public char name_183;
		public char name_184;
		public char name_185;
		public char name_186;
		public char name_187;
		public char name_188;
		public char name_189;
		public char name_190;
		public char name_191;
		public char name_192;
		public char name_193;
		public char name_194;
		public char name_195;
		public char name_196;
		public char name_197;
		public char name_198;
		public char name_199;
		public char name_200;
		public char name_201;
		public char name_202;
		public char name_203;
		public char name_204;
		public char name_205;
		public char name_206;
		public char name_207;
		public char name_208;
		public char name_209;
		public char name_210;
		public char name_211;
		public char name_212;
		public char name_213;
		public char name_214;
		public char name_215;
		public char name_216;
		public char name_217;
		public char name_218;
		public char name_219;
		public char name_220;
		public char name_221;
		public char name_222;
		public char name_223;
		public char name_224;
		public char name_225;
		public char name_226;
		public char name_227;
		public char name_228;
		public char name_229;
		public char name_230;
		public char name_231;
		public char name_232;
		public char name_233;
		public char name_234;
		public char name_235;
		public char name_236;
		public char name_237;
		public char name_238;
		public char name_239;
		public char name_240;
		public char name_241;
		public char name_242;
		public char name_243;
		public char name_244;
		public char name_245;
		public char name_246;
		public char name_247;
		public char name_248;
		public char name_249;
		public char name_250;
		public char name_251;
		public char name_252;
		public char name_253;
		public char name_254;
		public char name_255;
		public char category_0;
		public char category_1;
		public char category_2;
		public char category_3;
		public char category_4;
		public char category_5;
		public char category_6;
		public char category_7;
		public char category_8;
		public char category_9;
		public char category_10;
		public char category_11;
		public char category_12;
		public char category_13;
		public char category_14;
		public char category_15;
		public char category_16;
		public char category_17;
		public char category_18;
		public char category_19;
		public char category_20;
		public char category_21;
		public char category_22;
		public char category_23;
		public char category_24;
		public char category_25;
		public char category_26;
		public char category_27;
		public char category_28;
		public char category_29;
		public char category_30;
		public char category_31;
		public char category_32;
		public char category_33;
		public char category_34;
		public char category_35;
		public char category_36;
		public char category_37;
		public char category_38;
		public char category_39;
		public char category_40;
		public char category_41;
		public char category_42;
		public char category_43;
		public char category_44;
		public char category_45;
		public char category_46;
		public char category_47;
		public char category_48;
		public char category_49;
		public char category_50;
		public char category_51;
		public char category_52;
		public char category_53;
		public char category_54;
		public char category_55;
		public char category_56;
		public char category_57;
		public char category_58;
		public char category_59;
		public char category_60;
		public char category_61;
		public char category_62;
		public char category_63;
		public char category_64;
		public char category_65;
		public char category_66;
		public char category_67;
		public char category_68;
		public char category_69;
		public char category_70;
		public char category_71;
		public char category_72;
		public char category_73;
		public char category_74;
		public char category_75;
		public char category_76;
		public char category_77;
		public char category_78;
		public char category_79;
		public char category_80;
		public char category_81;
		public char category_82;
		public char category_83;
		public char category_84;
		public char category_85;
		public char category_86;
		public char category_87;
		public char category_88;
		public char category_89;
		public char category_90;
		public char category_91;
		public char category_92;
		public char category_93;
		public char category_94;
		public char category_95;
		public char category_96;
		public char category_97;
		public char category_98;
		public char category_99;
		public char category_100;
		public char category_101;
		public char category_102;
		public char category_103;
		public char category_104;
		public char category_105;
		public char category_106;
		public char category_107;
		public char category_108;
		public char category_109;
		public char category_110;
		public char category_111;
		public char category_112;
		public char category_113;
		public char category_114;
		public char category_115;
		public char category_116;
		public char category_117;
		public char category_118;
		public char category_119;
		public char category_120;
		public char category_121;
		public char category_122;
		public char category_123;
		public char category_124;
		public char category_125;
		public char category_126;
		public char category_127;
		public char category_128;
		public char category_129;
		public char category_130;
		public char category_131;
		public char category_132;
		public char category_133;
		public char category_134;
		public char category_135;
		public char category_136;
		public char category_137;
		public char category_138;
		public char category_139;
		public char category_140;
		public char category_141;
		public char category_142;
		public char category_143;
		public char category_144;
		public char category_145;
		public char category_146;
		public char category_147;
		public char category_148;
		public char category_149;
		public char category_150;
		public char category_151;
		public char category_152;
		public char category_153;
		public char category_154;
		public char category_155;
		public char category_156;
		public char category_157;
		public char category_158;
		public char category_159;
		public char category_160;
		public char category_161;
		public char category_162;
		public char category_163;
		public char category_164;
		public char category_165;
		public char category_166;
		public char category_167;
		public char category_168;
		public char category_169;
		public char category_170;
		public char category_171;
		public char category_172;
		public char category_173;
		public char category_174;
		public char category_175;
		public char category_176;
		public char category_177;
		public char category_178;
		public char category_179;
		public char category_180;
		public char category_181;
		public char category_182;
		public char category_183;
		public char category_184;
		public char category_185;
		public char category_186;
		public char category_187;
		public char category_188;
		public char category_189;
		public char category_190;
		public char category_191;
		public char category_192;
		public char category_193;
		public char category_194;
		public char category_195;
		public char category_196;
		public char category_197;
		public char category_198;
		public char category_199;
		public char category_200;
		public char category_201;
		public char category_202;
		public char category_203;
		public char category_204;
		public char category_205;
		public char category_206;
		public char category_207;
		public char category_208;
		public char category_209;
		public char category_210;
		public char category_211;
		public char category_212;
		public char category_213;
		public char category_214;
		public char category_215;
		public char category_216;
		public char category_217;
		public char category_218;
		public char category_219;
		public char category_220;
		public char category_221;
		public char category_222;
		public char category_223;
		public char category_224;
		public char category_225;
		public char category_226;
		public char category_227;
		public char category_228;
		public char category_229;
		public char category_230;
		public char category_231;
		public char category_232;
		public char category_233;
		public char category_234;
		public char category_235;
		public char category_236;
		public char category_237;
		public char category_238;
		public char category_239;
		public char category_240;
		public char category_241;
		public char category_242;
		public char category_243;
		public char category_244;
		public char category_245;
		public char category_246;
		public char category_247;
		public char category_248;
		public char category_249;
		public char category_250;
		public char category_251;
		public char category_252;
		public char category_253;
		public char category_254;
		public char category_255;
		public char description_0;
		public char description_1;
		public char description_2;
		public char description_3;
		public char description_4;
		public char description_5;
		public char description_6;
		public char description_7;
		public char description_8;
		public char description_9;
		public char description_10;
		public char description_11;
		public char description_12;
		public char description_13;
		public char description_14;
		public char description_15;
		public char description_16;
		public char description_17;
		public char description_18;
		public char description_19;
		public char description_20;
		public char description_21;
		public char description_22;
		public char description_23;
		public char description_24;
		public char description_25;
		public char description_26;
		public char description_27;
		public char description_28;
		public char description_29;
		public char description_30;
		public char description_31;
		public char description_32;
		public char description_33;
		public char description_34;
		public char description_35;
		public char description_36;
		public char description_37;
		public char description_38;
		public char description_39;
		public char description_40;
		public char description_41;
		public char description_42;
		public char description_43;
		public char description_44;
		public char description_45;
		public char description_46;
		public char description_47;
		public char description_48;
		public char description_49;
		public char description_50;
		public char description_51;
		public char description_52;
		public char description_53;
		public char description_54;
		public char description_55;
		public char description_56;
		public char description_57;
		public char description_58;
		public char description_59;
		public char description_60;
		public char description_61;
		public char description_62;
		public char description_63;
		public char description_64;
		public char description_65;
		public char description_66;
		public char description_67;
		public char description_68;
		public char description_69;
		public char description_70;
		public char description_71;
		public char description_72;
		public char description_73;
		public char description_74;
		public char description_75;
		public char description_76;
		public char description_77;
		public char description_78;
		public char description_79;
		public char description_80;
		public char description_81;
		public char description_82;
		public char description_83;
		public char description_84;
		public char description_85;
		public char description_86;
		public char description_87;
		public char description_88;
		public char description_89;
		public char description_90;
		public char description_91;
		public char description_92;
		public char description_93;
		public char description_94;
		public char description_95;
		public char description_96;
		public char description_97;
		public char description_98;
		public char description_99;
		public char description_100;
		public char description_101;
		public char description_102;
		public char description_103;
		public char description_104;
		public char description_105;
		public char description_106;
		public char description_107;
		public char description_108;
		public char description_109;
		public char description_110;
		public char description_111;
		public char description_112;
		public char description_113;
		public char description_114;
		public char description_115;
		public char description_116;
		public char description_117;
		public char description_118;
		public char description_119;
		public char description_120;
		public char description_121;
		public char description_122;
		public char description_123;
		public char description_124;
		public char description_125;
		public char description_126;
		public char description_127;
		public char description_128;
		public char description_129;
		public char description_130;
		public char description_131;
		public char description_132;
		public char description_133;
		public char description_134;
		public char description_135;
		public char description_136;
		public char description_137;
		public char description_138;
		public char description_139;
		public char description_140;
		public char description_141;
		public char description_142;
		public char description_143;
		public char description_144;
		public char description_145;
		public char description_146;
		public char description_147;
		public char description_148;
		public char description_149;
		public char description_150;
		public char description_151;
		public char description_152;
		public char description_153;
		public char description_154;
		public char description_155;
		public char description_156;
		public char description_157;
		public char description_158;
		public char description_159;
		public char description_160;
		public char description_161;
		public char description_162;
		public char description_163;
		public char description_164;
		public char description_165;
		public char description_166;
		public char description_167;
		public char description_168;
		public char description_169;
		public char description_170;
		public char description_171;
		public char description_172;
		public char description_173;
		public char description_174;
		public char description_175;
		public char description_176;
		public char description_177;
		public char description_178;
		public char description_179;
		public char description_180;
		public char description_181;
		public char description_182;
		public char description_183;
		public char description_184;
		public char description_185;
		public char description_186;
		public char description_187;
		public char description_188;
		public char description_189;
		public char description_190;
		public char description_191;
		public char description_192;
		public char description_193;
		public char description_194;
		public char description_195;
		public char description_196;
		public char description_197;
		public char description_198;
		public char description_199;
		public char description_200;
		public char description_201;
		public char description_202;
		public char description_203;
		public char description_204;
		public char description_205;
		public char description_206;
		public char description_207;
		public char description_208;
		public char description_209;
		public char description_210;
		public char description_211;
		public char description_212;
		public char description_213;
		public char description_214;
		public char description_215;
		public char description_216;
		public char description_217;
		public char description_218;
		public char description_219;
		public char description_220;
		public char description_221;
		public char description_222;
		public char description_223;
		public char description_224;
		public char description_225;
		public char description_226;
		public char description_227;
		public char description_228;
		public char description_229;
		public char description_230;
		public char description_231;
		public char description_232;
		public char description_233;
		public char description_234;
		public char description_235;
		public char description_236;
		public char description_237;
		public char description_238;
		public char description_239;
		public char description_240;
		public char description_241;
		public char description_242;
		public char description_243;
		public char description_244;
		public char description_245;
		public char description_246;
		public char description_247;
		public char description_248;
		public char description_249;
		public char description_250;
		public char description_251;
		public char description_252;
		public char description_253;
		public char description_254;
		public char description_255;
	}

	public unsafe partial struct VkQueryPoolPerformanceCreateInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkQueryPoolPerformanceCreateInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint queueFamilyIndex;
		public uint counterIndexCount;
		public uint* pCounterIndices;
	}

	public unsafe partial struct VkAcquireProfilingLockInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkAcquireProfilingLockInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkAcquireProfilingLockFlagsKHR flags;
		public ulong timeout;
	}

	public unsafe partial struct VkPerformanceQuerySubmitInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkPerformanceQuerySubmitInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public uint counterPassIndex;
	}

	public unsafe partial struct VkPhysicalDeviceSurfaceInfo2KHR
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceSurfaceInfo2KHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkSurfaceKHR surface;
	}

	public unsafe partial struct VkSurfaceCapabilities2KHR
	{
		/// <summary>
		/// The size of the <see cref="VkSurfaceCapabilities2KHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 72;

		public VkStructureType sType;
		public void* pNext;
		public VkSurfaceCapabilitiesKHR surfaceCapabilities;
	}

	public unsafe partial struct VkSurfaceFormat2KHR
	{
		/// <summary>
		/// The size of the <see cref="VkSurfaceFormat2KHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkSurfaceFormatKHR surfaceFormat;
	}

	public unsafe partial struct VkDisplayProperties2KHR
	{
		/// <summary>
		/// The size of the <see cref="VkDisplayProperties2KHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public VkDisplayPropertiesKHR displayProperties;
	}

	public unsafe partial struct VkDisplayPlaneProperties2KHR
	{
		/// <summary>
		/// The size of the <see cref="VkDisplayPlaneProperties2KHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkDisplayPlanePropertiesKHR displayPlaneProperties;
	}

	public unsafe partial struct VkDisplayModeProperties2KHR
	{
		/// <summary>
		/// The size of the <see cref="VkDisplayModeProperties2KHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkDisplayModePropertiesKHR displayModeProperties;
	}

	public unsafe partial struct VkDisplayPlaneInfo2KHR
	{
		/// <summary>
		/// The size of the <see cref="VkDisplayPlaneInfo2KHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkDisplayModeKHR mode;
		public uint planeIndex;
	}

	public unsafe partial struct VkDisplayPlaneCapabilities2KHR
	{
		/// <summary>
		/// The size of the <see cref="VkDisplayPlaneCapabilities2KHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 88;

		public VkStructureType sType;
		public void* pNext;
		public VkDisplayPlaneCapabilitiesKHR capabilities;
	}

	public unsafe partial struct VkPhysicalDeviceShaderClockFeaturesKHR
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceShaderClockFeaturesKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderSubgroupClock;
		public VkBool32 shaderDeviceClock;
	}

	public unsafe partial struct VkSurfaceProtectedCapabilitiesKHR
	{
		/// <summary>
		/// The size of the <see cref="VkSurfaceProtectedCapabilitiesKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 supportsProtected;
	}

	public unsafe partial struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 pipelineExecutableInfo;
	}

	public unsafe partial struct VkPipelineInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkPipeline pipeline;
	}

	public unsafe partial struct VkPipelineExecutablePropertiesKHR
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineExecutablePropertiesKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 536;

		public VkStructureType sType;
		public void* pNext;
		public VkShaderStageFlags stages;
		public char name_0;
		public char name_1;
		public char name_2;
		public char name_3;
		public char name_4;
		public char name_5;
		public char name_6;
		public char name_7;
		public char name_8;
		public char name_9;
		public char name_10;
		public char name_11;
		public char name_12;
		public char name_13;
		public char name_14;
		public char name_15;
		public char name_16;
		public char name_17;
		public char name_18;
		public char name_19;
		public char name_20;
		public char name_21;
		public char name_22;
		public char name_23;
		public char name_24;
		public char name_25;
		public char name_26;
		public char name_27;
		public char name_28;
		public char name_29;
		public char name_30;
		public char name_31;
		public char name_32;
		public char name_33;
		public char name_34;
		public char name_35;
		public char name_36;
		public char name_37;
		public char name_38;
		public char name_39;
		public char name_40;
		public char name_41;
		public char name_42;
		public char name_43;
		public char name_44;
		public char name_45;
		public char name_46;
		public char name_47;
		public char name_48;
		public char name_49;
		public char name_50;
		public char name_51;
		public char name_52;
		public char name_53;
		public char name_54;
		public char name_55;
		public char name_56;
		public char name_57;
		public char name_58;
		public char name_59;
		public char name_60;
		public char name_61;
		public char name_62;
		public char name_63;
		public char name_64;
		public char name_65;
		public char name_66;
		public char name_67;
		public char name_68;
		public char name_69;
		public char name_70;
		public char name_71;
		public char name_72;
		public char name_73;
		public char name_74;
		public char name_75;
		public char name_76;
		public char name_77;
		public char name_78;
		public char name_79;
		public char name_80;
		public char name_81;
		public char name_82;
		public char name_83;
		public char name_84;
		public char name_85;
		public char name_86;
		public char name_87;
		public char name_88;
		public char name_89;
		public char name_90;
		public char name_91;
		public char name_92;
		public char name_93;
		public char name_94;
		public char name_95;
		public char name_96;
		public char name_97;
		public char name_98;
		public char name_99;
		public char name_100;
		public char name_101;
		public char name_102;
		public char name_103;
		public char name_104;
		public char name_105;
		public char name_106;
		public char name_107;
		public char name_108;
		public char name_109;
		public char name_110;
		public char name_111;
		public char name_112;
		public char name_113;
		public char name_114;
		public char name_115;
		public char name_116;
		public char name_117;
		public char name_118;
		public char name_119;
		public char name_120;
		public char name_121;
		public char name_122;
		public char name_123;
		public char name_124;
		public char name_125;
		public char name_126;
		public char name_127;
		public char name_128;
		public char name_129;
		public char name_130;
		public char name_131;
		public char name_132;
		public char name_133;
		public char name_134;
		public char name_135;
		public char name_136;
		public char name_137;
		public char name_138;
		public char name_139;
		public char name_140;
		public char name_141;
		public char name_142;
		public char name_143;
		public char name_144;
		public char name_145;
		public char name_146;
		public char name_147;
		public char name_148;
		public char name_149;
		public char name_150;
		public char name_151;
		public char name_152;
		public char name_153;
		public char name_154;
		public char name_155;
		public char name_156;
		public char name_157;
		public char name_158;
		public char name_159;
		public char name_160;
		public char name_161;
		public char name_162;
		public char name_163;
		public char name_164;
		public char name_165;
		public char name_166;
		public char name_167;
		public char name_168;
		public char name_169;
		public char name_170;
		public char name_171;
		public char name_172;
		public char name_173;
		public char name_174;
		public char name_175;
		public char name_176;
		public char name_177;
		public char name_178;
		public char name_179;
		public char name_180;
		public char name_181;
		public char name_182;
		public char name_183;
		public char name_184;
		public char name_185;
		public char name_186;
		public char name_187;
		public char name_188;
		public char name_189;
		public char name_190;
		public char name_191;
		public char name_192;
		public char name_193;
		public char name_194;
		public char name_195;
		public char name_196;
		public char name_197;
		public char name_198;
		public char name_199;
		public char name_200;
		public char name_201;
		public char name_202;
		public char name_203;
		public char name_204;
		public char name_205;
		public char name_206;
		public char name_207;
		public char name_208;
		public char name_209;
		public char name_210;
		public char name_211;
		public char name_212;
		public char name_213;
		public char name_214;
		public char name_215;
		public char name_216;
		public char name_217;
		public char name_218;
		public char name_219;
		public char name_220;
		public char name_221;
		public char name_222;
		public char name_223;
		public char name_224;
		public char name_225;
		public char name_226;
		public char name_227;
		public char name_228;
		public char name_229;
		public char name_230;
		public char name_231;
		public char name_232;
		public char name_233;
		public char name_234;
		public char name_235;
		public char name_236;
		public char name_237;
		public char name_238;
		public char name_239;
		public char name_240;
		public char name_241;
		public char name_242;
		public char name_243;
		public char name_244;
		public char name_245;
		public char name_246;
		public char name_247;
		public char name_248;
		public char name_249;
		public char name_250;
		public char name_251;
		public char name_252;
		public char name_253;
		public char name_254;
		public char name_255;
		public char description_0;
		public char description_1;
		public char description_2;
		public char description_3;
		public char description_4;
		public char description_5;
		public char description_6;
		public char description_7;
		public char description_8;
		public char description_9;
		public char description_10;
		public char description_11;
		public char description_12;
		public char description_13;
		public char description_14;
		public char description_15;
		public char description_16;
		public char description_17;
		public char description_18;
		public char description_19;
		public char description_20;
		public char description_21;
		public char description_22;
		public char description_23;
		public char description_24;
		public char description_25;
		public char description_26;
		public char description_27;
		public char description_28;
		public char description_29;
		public char description_30;
		public char description_31;
		public char description_32;
		public char description_33;
		public char description_34;
		public char description_35;
		public char description_36;
		public char description_37;
		public char description_38;
		public char description_39;
		public char description_40;
		public char description_41;
		public char description_42;
		public char description_43;
		public char description_44;
		public char description_45;
		public char description_46;
		public char description_47;
		public char description_48;
		public char description_49;
		public char description_50;
		public char description_51;
		public char description_52;
		public char description_53;
		public char description_54;
		public char description_55;
		public char description_56;
		public char description_57;
		public char description_58;
		public char description_59;
		public char description_60;
		public char description_61;
		public char description_62;
		public char description_63;
		public char description_64;
		public char description_65;
		public char description_66;
		public char description_67;
		public char description_68;
		public char description_69;
		public char description_70;
		public char description_71;
		public char description_72;
		public char description_73;
		public char description_74;
		public char description_75;
		public char description_76;
		public char description_77;
		public char description_78;
		public char description_79;
		public char description_80;
		public char description_81;
		public char description_82;
		public char description_83;
		public char description_84;
		public char description_85;
		public char description_86;
		public char description_87;
		public char description_88;
		public char description_89;
		public char description_90;
		public char description_91;
		public char description_92;
		public char description_93;
		public char description_94;
		public char description_95;
		public char description_96;
		public char description_97;
		public char description_98;
		public char description_99;
		public char description_100;
		public char description_101;
		public char description_102;
		public char description_103;
		public char description_104;
		public char description_105;
		public char description_106;
		public char description_107;
		public char description_108;
		public char description_109;
		public char description_110;
		public char description_111;
		public char description_112;
		public char description_113;
		public char description_114;
		public char description_115;
		public char description_116;
		public char description_117;
		public char description_118;
		public char description_119;
		public char description_120;
		public char description_121;
		public char description_122;
		public char description_123;
		public char description_124;
		public char description_125;
		public char description_126;
		public char description_127;
		public char description_128;
		public char description_129;
		public char description_130;
		public char description_131;
		public char description_132;
		public char description_133;
		public char description_134;
		public char description_135;
		public char description_136;
		public char description_137;
		public char description_138;
		public char description_139;
		public char description_140;
		public char description_141;
		public char description_142;
		public char description_143;
		public char description_144;
		public char description_145;
		public char description_146;
		public char description_147;
		public char description_148;
		public char description_149;
		public char description_150;
		public char description_151;
		public char description_152;
		public char description_153;
		public char description_154;
		public char description_155;
		public char description_156;
		public char description_157;
		public char description_158;
		public char description_159;
		public char description_160;
		public char description_161;
		public char description_162;
		public char description_163;
		public char description_164;
		public char description_165;
		public char description_166;
		public char description_167;
		public char description_168;
		public char description_169;
		public char description_170;
		public char description_171;
		public char description_172;
		public char description_173;
		public char description_174;
		public char description_175;
		public char description_176;
		public char description_177;
		public char description_178;
		public char description_179;
		public char description_180;
		public char description_181;
		public char description_182;
		public char description_183;
		public char description_184;
		public char description_185;
		public char description_186;
		public char description_187;
		public char description_188;
		public char description_189;
		public char description_190;
		public char description_191;
		public char description_192;
		public char description_193;
		public char description_194;
		public char description_195;
		public char description_196;
		public char description_197;
		public char description_198;
		public char description_199;
		public char description_200;
		public char description_201;
		public char description_202;
		public char description_203;
		public char description_204;
		public char description_205;
		public char description_206;
		public char description_207;
		public char description_208;
		public char description_209;
		public char description_210;
		public char description_211;
		public char description_212;
		public char description_213;
		public char description_214;
		public char description_215;
		public char description_216;
		public char description_217;
		public char description_218;
		public char description_219;
		public char description_220;
		public char description_221;
		public char description_222;
		public char description_223;
		public char description_224;
		public char description_225;
		public char description_226;
		public char description_227;
		public char description_228;
		public char description_229;
		public char description_230;
		public char description_231;
		public char description_232;
		public char description_233;
		public char description_234;
		public char description_235;
		public char description_236;
		public char description_237;
		public char description_238;
		public char description_239;
		public char description_240;
		public char description_241;
		public char description_242;
		public char description_243;
		public char description_244;
		public char description_245;
		public char description_246;
		public char description_247;
		public char description_248;
		public char description_249;
		public char description_250;
		public char description_251;
		public char description_252;
		public char description_253;
		public char description_254;
		public char description_255;
		public uint subgroupSize;
	}

	public unsafe partial struct VkPipelineExecutableInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineExecutableInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkPipeline pipeline;
		public uint executableIndex;
	}

	public unsafe partial struct VkPipelineExecutableStatisticKHR
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineExecutableStatisticKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 544;

		public VkStructureType sType;
		public void* pNext;
		public char name_0;
		public char name_1;
		public char name_2;
		public char name_3;
		public char name_4;
		public char name_5;
		public char name_6;
		public char name_7;
		public char name_8;
		public char name_9;
		public char name_10;
		public char name_11;
		public char name_12;
		public char name_13;
		public char name_14;
		public char name_15;
		public char name_16;
		public char name_17;
		public char name_18;
		public char name_19;
		public char name_20;
		public char name_21;
		public char name_22;
		public char name_23;
		public char name_24;
		public char name_25;
		public char name_26;
		public char name_27;
		public char name_28;
		public char name_29;
		public char name_30;
		public char name_31;
		public char name_32;
		public char name_33;
		public char name_34;
		public char name_35;
		public char name_36;
		public char name_37;
		public char name_38;
		public char name_39;
		public char name_40;
		public char name_41;
		public char name_42;
		public char name_43;
		public char name_44;
		public char name_45;
		public char name_46;
		public char name_47;
		public char name_48;
		public char name_49;
		public char name_50;
		public char name_51;
		public char name_52;
		public char name_53;
		public char name_54;
		public char name_55;
		public char name_56;
		public char name_57;
		public char name_58;
		public char name_59;
		public char name_60;
		public char name_61;
		public char name_62;
		public char name_63;
		public char name_64;
		public char name_65;
		public char name_66;
		public char name_67;
		public char name_68;
		public char name_69;
		public char name_70;
		public char name_71;
		public char name_72;
		public char name_73;
		public char name_74;
		public char name_75;
		public char name_76;
		public char name_77;
		public char name_78;
		public char name_79;
		public char name_80;
		public char name_81;
		public char name_82;
		public char name_83;
		public char name_84;
		public char name_85;
		public char name_86;
		public char name_87;
		public char name_88;
		public char name_89;
		public char name_90;
		public char name_91;
		public char name_92;
		public char name_93;
		public char name_94;
		public char name_95;
		public char name_96;
		public char name_97;
		public char name_98;
		public char name_99;
		public char name_100;
		public char name_101;
		public char name_102;
		public char name_103;
		public char name_104;
		public char name_105;
		public char name_106;
		public char name_107;
		public char name_108;
		public char name_109;
		public char name_110;
		public char name_111;
		public char name_112;
		public char name_113;
		public char name_114;
		public char name_115;
		public char name_116;
		public char name_117;
		public char name_118;
		public char name_119;
		public char name_120;
		public char name_121;
		public char name_122;
		public char name_123;
		public char name_124;
		public char name_125;
		public char name_126;
		public char name_127;
		public char name_128;
		public char name_129;
		public char name_130;
		public char name_131;
		public char name_132;
		public char name_133;
		public char name_134;
		public char name_135;
		public char name_136;
		public char name_137;
		public char name_138;
		public char name_139;
		public char name_140;
		public char name_141;
		public char name_142;
		public char name_143;
		public char name_144;
		public char name_145;
		public char name_146;
		public char name_147;
		public char name_148;
		public char name_149;
		public char name_150;
		public char name_151;
		public char name_152;
		public char name_153;
		public char name_154;
		public char name_155;
		public char name_156;
		public char name_157;
		public char name_158;
		public char name_159;
		public char name_160;
		public char name_161;
		public char name_162;
		public char name_163;
		public char name_164;
		public char name_165;
		public char name_166;
		public char name_167;
		public char name_168;
		public char name_169;
		public char name_170;
		public char name_171;
		public char name_172;
		public char name_173;
		public char name_174;
		public char name_175;
		public char name_176;
		public char name_177;
		public char name_178;
		public char name_179;
		public char name_180;
		public char name_181;
		public char name_182;
		public char name_183;
		public char name_184;
		public char name_185;
		public char name_186;
		public char name_187;
		public char name_188;
		public char name_189;
		public char name_190;
		public char name_191;
		public char name_192;
		public char name_193;
		public char name_194;
		public char name_195;
		public char name_196;
		public char name_197;
		public char name_198;
		public char name_199;
		public char name_200;
		public char name_201;
		public char name_202;
		public char name_203;
		public char name_204;
		public char name_205;
		public char name_206;
		public char name_207;
		public char name_208;
		public char name_209;
		public char name_210;
		public char name_211;
		public char name_212;
		public char name_213;
		public char name_214;
		public char name_215;
		public char name_216;
		public char name_217;
		public char name_218;
		public char name_219;
		public char name_220;
		public char name_221;
		public char name_222;
		public char name_223;
		public char name_224;
		public char name_225;
		public char name_226;
		public char name_227;
		public char name_228;
		public char name_229;
		public char name_230;
		public char name_231;
		public char name_232;
		public char name_233;
		public char name_234;
		public char name_235;
		public char name_236;
		public char name_237;
		public char name_238;
		public char name_239;
		public char name_240;
		public char name_241;
		public char name_242;
		public char name_243;
		public char name_244;
		public char name_245;
		public char name_246;
		public char name_247;
		public char name_248;
		public char name_249;
		public char name_250;
		public char name_251;
		public char name_252;
		public char name_253;
		public char name_254;
		public char name_255;
		public char description_0;
		public char description_1;
		public char description_2;
		public char description_3;
		public char description_4;
		public char description_5;
		public char description_6;
		public char description_7;
		public char description_8;
		public char description_9;
		public char description_10;
		public char description_11;
		public char description_12;
		public char description_13;
		public char description_14;
		public char description_15;
		public char description_16;
		public char description_17;
		public char description_18;
		public char description_19;
		public char description_20;
		public char description_21;
		public char description_22;
		public char description_23;
		public char description_24;
		public char description_25;
		public char description_26;
		public char description_27;
		public char description_28;
		public char description_29;
		public char description_30;
		public char description_31;
		public char description_32;
		public char description_33;
		public char description_34;
		public char description_35;
		public char description_36;
		public char description_37;
		public char description_38;
		public char description_39;
		public char description_40;
		public char description_41;
		public char description_42;
		public char description_43;
		public char description_44;
		public char description_45;
		public char description_46;
		public char description_47;
		public char description_48;
		public char description_49;
		public char description_50;
		public char description_51;
		public char description_52;
		public char description_53;
		public char description_54;
		public char description_55;
		public char description_56;
		public char description_57;
		public char description_58;
		public char description_59;
		public char description_60;
		public char description_61;
		public char description_62;
		public char description_63;
		public char description_64;
		public char description_65;
		public char description_66;
		public char description_67;
		public char description_68;
		public char description_69;
		public char description_70;
		public char description_71;
		public char description_72;
		public char description_73;
		public char description_74;
		public char description_75;
		public char description_76;
		public char description_77;
		public char description_78;
		public char description_79;
		public char description_80;
		public char description_81;
		public char description_82;
		public char description_83;
		public char description_84;
		public char description_85;
		public char description_86;
		public char description_87;
		public char description_88;
		public char description_89;
		public char description_90;
		public char description_91;
		public char description_92;
		public char description_93;
		public char description_94;
		public char description_95;
		public char description_96;
		public char description_97;
		public char description_98;
		public char description_99;
		public char description_100;
		public char description_101;
		public char description_102;
		public char description_103;
		public char description_104;
		public char description_105;
		public char description_106;
		public char description_107;
		public char description_108;
		public char description_109;
		public char description_110;
		public char description_111;
		public char description_112;
		public char description_113;
		public char description_114;
		public char description_115;
		public char description_116;
		public char description_117;
		public char description_118;
		public char description_119;
		public char description_120;
		public char description_121;
		public char description_122;
		public char description_123;
		public char description_124;
		public char description_125;
		public char description_126;
		public char description_127;
		public char description_128;
		public char description_129;
		public char description_130;
		public char description_131;
		public char description_132;
		public char description_133;
		public char description_134;
		public char description_135;
		public char description_136;
		public char description_137;
		public char description_138;
		public char description_139;
		public char description_140;
		public char description_141;
		public char description_142;
		public char description_143;
		public char description_144;
		public char description_145;
		public char description_146;
		public char description_147;
		public char description_148;
		public char description_149;
		public char description_150;
		public char description_151;
		public char description_152;
		public char description_153;
		public char description_154;
		public char description_155;
		public char description_156;
		public char description_157;
		public char description_158;
		public char description_159;
		public char description_160;
		public char description_161;
		public char description_162;
		public char description_163;
		public char description_164;
		public char description_165;
		public char description_166;
		public char description_167;
		public char description_168;
		public char description_169;
		public char description_170;
		public char description_171;
		public char description_172;
		public char description_173;
		public char description_174;
		public char description_175;
		public char description_176;
		public char description_177;
		public char description_178;
		public char description_179;
		public char description_180;
		public char description_181;
		public char description_182;
		public char description_183;
		public char description_184;
		public char description_185;
		public char description_186;
		public char description_187;
		public char description_188;
		public char description_189;
		public char description_190;
		public char description_191;
		public char description_192;
		public char description_193;
		public char description_194;
		public char description_195;
		public char description_196;
		public char description_197;
		public char description_198;
		public char description_199;
		public char description_200;
		public char description_201;
		public char description_202;
		public char description_203;
		public char description_204;
		public char description_205;
		public char description_206;
		public char description_207;
		public char description_208;
		public char description_209;
		public char description_210;
		public char description_211;
		public char description_212;
		public char description_213;
		public char description_214;
		public char description_215;
		public char description_216;
		public char description_217;
		public char description_218;
		public char description_219;
		public char description_220;
		public char description_221;
		public char description_222;
		public char description_223;
		public char description_224;
		public char description_225;
		public char description_226;
		public char description_227;
		public char description_228;
		public char description_229;
		public char description_230;
		public char description_231;
		public char description_232;
		public char description_233;
		public char description_234;
		public char description_235;
		public char description_236;
		public char description_237;
		public char description_238;
		public char description_239;
		public char description_240;
		public char description_241;
		public char description_242;
		public char description_243;
		public char description_244;
		public char description_245;
		public char description_246;
		public char description_247;
		public char description_248;
		public char description_249;
		public char description_250;
		public char description_251;
		public char description_252;
		public char description_253;
		public char description_254;
		public char description_255;
		public VkPipelineExecutableStatisticFormatKHR format;
		public VkPipelineExecutableStatisticValueKHR value;
	}

	public unsafe partial struct VkPipelineExecutableInternalRepresentationKHR
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineExecutableInternalRepresentationKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 552;

		public VkStructureType sType;
		public void* pNext;
		public char name_0;
		public char name_1;
		public char name_2;
		public char name_3;
		public char name_4;
		public char name_5;
		public char name_6;
		public char name_7;
		public char name_8;
		public char name_9;
		public char name_10;
		public char name_11;
		public char name_12;
		public char name_13;
		public char name_14;
		public char name_15;
		public char name_16;
		public char name_17;
		public char name_18;
		public char name_19;
		public char name_20;
		public char name_21;
		public char name_22;
		public char name_23;
		public char name_24;
		public char name_25;
		public char name_26;
		public char name_27;
		public char name_28;
		public char name_29;
		public char name_30;
		public char name_31;
		public char name_32;
		public char name_33;
		public char name_34;
		public char name_35;
		public char name_36;
		public char name_37;
		public char name_38;
		public char name_39;
		public char name_40;
		public char name_41;
		public char name_42;
		public char name_43;
		public char name_44;
		public char name_45;
		public char name_46;
		public char name_47;
		public char name_48;
		public char name_49;
		public char name_50;
		public char name_51;
		public char name_52;
		public char name_53;
		public char name_54;
		public char name_55;
		public char name_56;
		public char name_57;
		public char name_58;
		public char name_59;
		public char name_60;
		public char name_61;
		public char name_62;
		public char name_63;
		public char name_64;
		public char name_65;
		public char name_66;
		public char name_67;
		public char name_68;
		public char name_69;
		public char name_70;
		public char name_71;
		public char name_72;
		public char name_73;
		public char name_74;
		public char name_75;
		public char name_76;
		public char name_77;
		public char name_78;
		public char name_79;
		public char name_80;
		public char name_81;
		public char name_82;
		public char name_83;
		public char name_84;
		public char name_85;
		public char name_86;
		public char name_87;
		public char name_88;
		public char name_89;
		public char name_90;
		public char name_91;
		public char name_92;
		public char name_93;
		public char name_94;
		public char name_95;
		public char name_96;
		public char name_97;
		public char name_98;
		public char name_99;
		public char name_100;
		public char name_101;
		public char name_102;
		public char name_103;
		public char name_104;
		public char name_105;
		public char name_106;
		public char name_107;
		public char name_108;
		public char name_109;
		public char name_110;
		public char name_111;
		public char name_112;
		public char name_113;
		public char name_114;
		public char name_115;
		public char name_116;
		public char name_117;
		public char name_118;
		public char name_119;
		public char name_120;
		public char name_121;
		public char name_122;
		public char name_123;
		public char name_124;
		public char name_125;
		public char name_126;
		public char name_127;
		public char name_128;
		public char name_129;
		public char name_130;
		public char name_131;
		public char name_132;
		public char name_133;
		public char name_134;
		public char name_135;
		public char name_136;
		public char name_137;
		public char name_138;
		public char name_139;
		public char name_140;
		public char name_141;
		public char name_142;
		public char name_143;
		public char name_144;
		public char name_145;
		public char name_146;
		public char name_147;
		public char name_148;
		public char name_149;
		public char name_150;
		public char name_151;
		public char name_152;
		public char name_153;
		public char name_154;
		public char name_155;
		public char name_156;
		public char name_157;
		public char name_158;
		public char name_159;
		public char name_160;
		public char name_161;
		public char name_162;
		public char name_163;
		public char name_164;
		public char name_165;
		public char name_166;
		public char name_167;
		public char name_168;
		public char name_169;
		public char name_170;
		public char name_171;
		public char name_172;
		public char name_173;
		public char name_174;
		public char name_175;
		public char name_176;
		public char name_177;
		public char name_178;
		public char name_179;
		public char name_180;
		public char name_181;
		public char name_182;
		public char name_183;
		public char name_184;
		public char name_185;
		public char name_186;
		public char name_187;
		public char name_188;
		public char name_189;
		public char name_190;
		public char name_191;
		public char name_192;
		public char name_193;
		public char name_194;
		public char name_195;
		public char name_196;
		public char name_197;
		public char name_198;
		public char name_199;
		public char name_200;
		public char name_201;
		public char name_202;
		public char name_203;
		public char name_204;
		public char name_205;
		public char name_206;
		public char name_207;
		public char name_208;
		public char name_209;
		public char name_210;
		public char name_211;
		public char name_212;
		public char name_213;
		public char name_214;
		public char name_215;
		public char name_216;
		public char name_217;
		public char name_218;
		public char name_219;
		public char name_220;
		public char name_221;
		public char name_222;
		public char name_223;
		public char name_224;
		public char name_225;
		public char name_226;
		public char name_227;
		public char name_228;
		public char name_229;
		public char name_230;
		public char name_231;
		public char name_232;
		public char name_233;
		public char name_234;
		public char name_235;
		public char name_236;
		public char name_237;
		public char name_238;
		public char name_239;
		public char name_240;
		public char name_241;
		public char name_242;
		public char name_243;
		public char name_244;
		public char name_245;
		public char name_246;
		public char name_247;
		public char name_248;
		public char name_249;
		public char name_250;
		public char name_251;
		public char name_252;
		public char name_253;
		public char name_254;
		public char name_255;
		public char description_0;
		public char description_1;
		public char description_2;
		public char description_3;
		public char description_4;
		public char description_5;
		public char description_6;
		public char description_7;
		public char description_8;
		public char description_9;
		public char description_10;
		public char description_11;
		public char description_12;
		public char description_13;
		public char description_14;
		public char description_15;
		public char description_16;
		public char description_17;
		public char description_18;
		public char description_19;
		public char description_20;
		public char description_21;
		public char description_22;
		public char description_23;
		public char description_24;
		public char description_25;
		public char description_26;
		public char description_27;
		public char description_28;
		public char description_29;
		public char description_30;
		public char description_31;
		public char description_32;
		public char description_33;
		public char description_34;
		public char description_35;
		public char description_36;
		public char description_37;
		public char description_38;
		public char description_39;
		public char description_40;
		public char description_41;
		public char description_42;
		public char description_43;
		public char description_44;
		public char description_45;
		public char description_46;
		public char description_47;
		public char description_48;
		public char description_49;
		public char description_50;
		public char description_51;
		public char description_52;
		public char description_53;
		public char description_54;
		public char description_55;
		public char description_56;
		public char description_57;
		public char description_58;
		public char description_59;
		public char description_60;
		public char description_61;
		public char description_62;
		public char description_63;
		public char description_64;
		public char description_65;
		public char description_66;
		public char description_67;
		public char description_68;
		public char description_69;
		public char description_70;
		public char description_71;
		public char description_72;
		public char description_73;
		public char description_74;
		public char description_75;
		public char description_76;
		public char description_77;
		public char description_78;
		public char description_79;
		public char description_80;
		public char description_81;
		public char description_82;
		public char description_83;
		public char description_84;
		public char description_85;
		public char description_86;
		public char description_87;
		public char description_88;
		public char description_89;
		public char description_90;
		public char description_91;
		public char description_92;
		public char description_93;
		public char description_94;
		public char description_95;
		public char description_96;
		public char description_97;
		public char description_98;
		public char description_99;
		public char description_100;
		public char description_101;
		public char description_102;
		public char description_103;
		public char description_104;
		public char description_105;
		public char description_106;
		public char description_107;
		public char description_108;
		public char description_109;
		public char description_110;
		public char description_111;
		public char description_112;
		public char description_113;
		public char description_114;
		public char description_115;
		public char description_116;
		public char description_117;
		public char description_118;
		public char description_119;
		public char description_120;
		public char description_121;
		public char description_122;
		public char description_123;
		public char description_124;
		public char description_125;
		public char description_126;
		public char description_127;
		public char description_128;
		public char description_129;
		public char description_130;
		public char description_131;
		public char description_132;
		public char description_133;
		public char description_134;
		public char description_135;
		public char description_136;
		public char description_137;
		public char description_138;
		public char description_139;
		public char description_140;
		public char description_141;
		public char description_142;
		public char description_143;
		public char description_144;
		public char description_145;
		public char description_146;
		public char description_147;
		public char description_148;
		public char description_149;
		public char description_150;
		public char description_151;
		public char description_152;
		public char description_153;
		public char description_154;
		public char description_155;
		public char description_156;
		public char description_157;
		public char description_158;
		public char description_159;
		public char description_160;
		public char description_161;
		public char description_162;
		public char description_163;
		public char description_164;
		public char description_165;
		public char description_166;
		public char description_167;
		public char description_168;
		public char description_169;
		public char description_170;
		public char description_171;
		public char description_172;
		public char description_173;
		public char description_174;
		public char description_175;
		public char description_176;
		public char description_177;
		public char description_178;
		public char description_179;
		public char description_180;
		public char description_181;
		public char description_182;
		public char description_183;
		public char description_184;
		public char description_185;
		public char description_186;
		public char description_187;
		public char description_188;
		public char description_189;
		public char description_190;
		public char description_191;
		public char description_192;
		public char description_193;
		public char description_194;
		public char description_195;
		public char description_196;
		public char description_197;
		public char description_198;
		public char description_199;
		public char description_200;
		public char description_201;
		public char description_202;
		public char description_203;
		public char description_204;
		public char description_205;
		public char description_206;
		public char description_207;
		public char description_208;
		public char description_209;
		public char description_210;
		public char description_211;
		public char description_212;
		public char description_213;
		public char description_214;
		public char description_215;
		public char description_216;
		public char description_217;
		public char description_218;
		public char description_219;
		public char description_220;
		public char description_221;
		public char description_222;
		public char description_223;
		public char description_224;
		public char description_225;
		public char description_226;
		public char description_227;
		public char description_228;
		public char description_229;
		public char description_230;
		public char description_231;
		public char description_232;
		public char description_233;
		public char description_234;
		public char description_235;
		public char description_236;
		public char description_237;
		public char description_238;
		public char description_239;
		public char description_240;
		public char description_241;
		public char description_242;
		public char description_243;
		public char description_244;
		public char description_245;
		public char description_246;
		public char description_247;
		public char description_248;
		public char description_249;
		public char description_250;
		public char description_251;
		public char description_252;
		public char description_253;
		public char description_254;
		public char description_255;
		public VkBool32 isText;
		public UIntPtr dataSize;
		public void* pData;
	}

	public unsafe partial struct VkDebugReportCallbackCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkDebugReportCallbackCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkDebugReportFlagsEXT flags;
		public IntPtr pfnCallback;
		public void* pUserData;
	}

	public unsafe partial struct VkPipelineRasterizationStateRasterizationOrderAMD
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineRasterizationStateRasterizationOrderAMD"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkRasterizationOrderAMD rasterizationOrder;
	}

	public unsafe partial struct VkDebugMarkerObjectNameInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkDebugMarkerObjectNameInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkDebugReportObjectTypeEXT objectType;
		public ulong @object;
		public byte* pObjectName;
	}

	public unsafe partial struct VkDebugMarkerObjectTagInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkDebugMarkerObjectTagInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 56;

		public VkStructureType sType;
		public void* pNext;
		public VkDebugReportObjectTypeEXT objectType;
		public ulong @object;
		public ulong tagName;
		public UIntPtr tagSize;
		public void* pTag;
	}

	public unsafe partial struct VkDebugMarkerMarkerInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkDebugMarkerMarkerInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public byte* pMarkerName;
		public float color_0;
		public float color_1;
		public float color_2;
		public float color_3;
	}

	public unsafe partial struct VkDedicatedAllocationImageCreateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkDedicatedAllocationImageCreateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 dedicatedAllocation;
	}

	public unsafe partial struct VkDedicatedAllocationBufferCreateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkDedicatedAllocationBufferCreateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 dedicatedAllocation;
	}

	public unsafe partial struct VkDedicatedAllocationMemoryAllocateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkDedicatedAllocationMemoryAllocateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkImage image;
		public VkBuffer buffer;
	}

	public unsafe partial struct VkPhysicalDeviceTransformFeedbackFeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceTransformFeedbackFeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 transformFeedback;
		public VkBool32 geometryStreams;
	}

	public unsafe partial struct VkPhysicalDeviceTransformFeedbackPropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceTransformFeedbackPropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public uint maxTransformFeedbackStreams;
		public uint maxTransformFeedbackBuffers;
		public ulong maxTransformFeedbackBufferSize;
		public uint maxTransformFeedbackStreamDataSize;
		public uint maxTransformFeedbackBufferDataSize;
		public uint maxTransformFeedbackBufferDataStride;
		public VkBool32 transformFeedbackQueries;
		public VkBool32 transformFeedbackStreamsLinesTriangles;
		public VkBool32 transformFeedbackRasterizationStreamSelect;
		public VkBool32 transformFeedbackDraw;
	}

	public unsafe partial struct VkPipelineRasterizationStateStreamCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineRasterizationStateStreamCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineRasterizationStateStreamCreateFlagsEXT flags;
		public uint rasterizationStream;
	}

	public unsafe partial struct VkImageViewHandleInfoNVX
	{
		/// <summary>
		/// The size of the <see cref="VkImageViewHandleInfoNVX"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkImageView imageView;
		public VkDescriptorType descriptorType;
		public VkSampler sampler;
	}

	public unsafe partial struct VkTextureLODGatherFormatPropertiesAMD
	{
		/// <summary>
		/// The size of the <see cref="VkTextureLODGatherFormatPropertiesAMD"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 supportsTextureGatherLODBiasAMD;
	}

	public unsafe partial struct VkShaderResourceUsageAMD
	{
		/// <summary>
		/// The size of the <see cref="VkShaderResourceUsageAMD"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public uint numUsedVgprs;
		public uint numUsedSgprs;
		public uint ldsSizePerLocalWorkGroup;
		public UIntPtr ldsUsageSizeInBytes;
		public UIntPtr scratchMemUsageInBytes;
	}

	public unsafe partial struct VkShaderStatisticsInfoAMD
	{
		/// <summary>
		/// The size of the <see cref="VkShaderStatisticsInfoAMD"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 72;

		public VkShaderStageFlags shaderStageMask;
		public VkShaderResourceUsageAMD resourceUsage;
		public uint numPhysicalVgprs;
		public uint numPhysicalSgprs;
		public uint numAvailableVgprs;
		public uint numAvailableSgprs;
		public fixed uint computeWorkGroupSize[3];
	}

	public unsafe partial struct VkPhysicalDeviceCornerSampledImageFeaturesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceCornerSampledImageFeaturesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 cornerSampledImage;
	}

	public unsafe partial struct VkExternalImageFormatPropertiesNV
	{
		/// <summary>
		/// The size of the <see cref="VkExternalImageFormatPropertiesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkImageFormatProperties imageFormatProperties;
		public VkExternalMemoryFeatureFlagsNV externalMemoryFeatures;
		public VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes;
		public VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes;
	}

	public unsafe partial struct VkExternalMemoryImageCreateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkExternalMemoryImageCreateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryHandleTypeFlagsNV handleTypes;
	}

	public unsafe partial struct VkExportMemoryAllocateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkExportMemoryAllocateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryHandleTypeFlagsNV handleTypes;
	}

	public unsafe partial struct VkValidationFlagsEXT
	{
		/// <summary>
		/// The size of the <see cref="VkValidationFlagsEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint disabledValidationCheckCount;
		public VkValidationCheckEXT* pDisabledValidationChecks;
	}

	public unsafe partial struct VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 textureCompressionASTC_HDR;
	}

	public unsafe partial struct VkImageViewASTCDecodeModeEXT
	{
		/// <summary>
		/// The size of the <see cref="VkImageViewASTCDecodeModeEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkFormat decodeMode;
	}

	public unsafe partial struct VkPhysicalDeviceASTCDecodeFeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceASTCDecodeFeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 decodeModeSharedExponent;
	}

	public unsafe partial struct VkConditionalRenderingBeginInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkConditionalRenderingBeginInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkBuffer buffer;
		public ulong offset;
		public VkConditionalRenderingFlagsEXT flags;
	}

	public unsafe partial struct VkPhysicalDeviceConditionalRenderingFeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceConditionalRenderingFeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 conditionalRendering;
		public VkBool32 inheritedConditionalRendering;
	}

	public unsafe partial struct VkCommandBufferInheritanceConditionalRenderingInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkCommandBufferInheritanceConditionalRenderingInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 conditionalRenderingEnable;
	}

	public unsafe partial struct VkViewportWScalingNV
	{
		/// <summary>
		/// The size of the <see cref="VkViewportWScalingNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 8;

		public float xcoeff;
		public float ycoeff;
	}

	public unsafe partial struct VkPipelineViewportWScalingStateCreateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineViewportWScalingStateCreateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 viewportWScalingEnable;
		public uint viewportCount;
		public VkViewportWScalingNV* pViewportWScalings;
	}

	public unsafe partial struct VkSurfaceCapabilities2EXT
	{
		/// <summary>
		/// The size of the <see cref="VkSurfaceCapabilities2EXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 72;

		public VkStructureType sType;
		public void* pNext;
		public uint minImageCount;
		public uint maxImageCount;
		public VkExtent2D currentExtent;
		public VkExtent2D minImageExtent;
		public VkExtent2D maxImageExtent;
		public uint maxImageArrayLayers;
		public VkSurfaceTransformFlagsKHR supportedTransforms;
		public VkSurfaceTransformFlagsKHR currentTransform;
		public VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
		public VkImageUsageFlags supportedUsageFlags;
		public VkSurfaceCounterFlagsEXT supportedSurfaceCounters;
	}

	public unsafe partial struct VkDisplayPowerInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkDisplayPowerInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkDisplayPowerStateEXT powerState;
	}

	public unsafe partial struct VkDeviceEventInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkDeviceEventInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkDeviceEventTypeEXT deviceEvent;
	}

	public unsafe partial struct VkDisplayEventInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkDisplayEventInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkDisplayEventTypeEXT displayEvent;
	}

	public unsafe partial struct VkSwapchainCounterCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkSwapchainCounterCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkSurfaceCounterFlagsEXT surfaceCounters;
	}

	public unsafe partial struct VkRefreshCycleDurationGOOGLE
	{
		/// <summary>
		/// The size of the <see cref="VkRefreshCycleDurationGOOGLE"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 8;

		public ulong refreshDuration;
	}

	public unsafe partial struct VkPastPresentationTimingGOOGLE
	{
		/// <summary>
		/// The size of the <see cref="VkPastPresentationTimingGOOGLE"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public uint presentID;
		public ulong desiredPresentTime;
		public ulong actualPresentTime;
		public ulong earliestPresentTime;
		public ulong presentMargin;
	}

	public unsafe partial struct VkPresentTimeGOOGLE
	{
		/// <summary>
		/// The size of the <see cref="VkPresentTimeGOOGLE"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public uint presentID;
		public ulong desiredPresentTime;
	}

	public unsafe partial struct VkPresentTimesInfoGOOGLE
	{
		/// <summary>
		/// The size of the <see cref="VkPresentTimesInfoGOOGLE"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint swapchainCount;
		public VkPresentTimeGOOGLE* pTimes;
	}

	public unsafe partial struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 perViewPositionAllComponents;
	}

	public unsafe partial struct VkViewportSwizzleNV
	{
		/// <summary>
		/// The size of the <see cref="VkViewportSwizzleNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public VkViewportCoordinateSwizzleNV x;
		public VkViewportCoordinateSwizzleNV y;
		public VkViewportCoordinateSwizzleNV z;
		public VkViewportCoordinateSwizzleNV w;
	}

	public unsafe partial struct VkPipelineViewportSwizzleStateCreateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineViewportSwizzleStateCreateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineViewportSwizzleStateCreateFlagsNV flags;
		public uint viewportCount;
		public VkViewportSwizzleNV* pViewportSwizzles;
	}

	public unsafe partial struct VkPhysicalDeviceDiscardRectanglePropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceDiscardRectanglePropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public uint maxDiscardRectangles;
	}

	public unsafe partial struct VkPipelineDiscardRectangleStateCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineDiscardRectangleStateCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineDiscardRectangleStateCreateFlagsEXT flags;
		public VkDiscardRectangleModeEXT discardRectangleMode;
		public uint discardRectangleCount;
		public VkRect2D* pDiscardRectangles;
	}

	public unsafe partial struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceConservativeRasterizationPropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 56;

		public VkStructureType sType;
		public void* pNext;
		public float primitiveOverestimationSize;
		public float maxExtraPrimitiveOverestimationSize;
		public float extraPrimitiveOverestimationSizeGranularity;
		public VkBool32 primitiveUnderestimation;
		public VkBool32 conservativePointAndLineRasterization;
		public VkBool32 degenerateTrianglesRasterized;
		public VkBool32 degenerateLinesRasterized;
		public VkBool32 fullyCoveredFragmentShaderInputVariable;
		public VkBool32 conservativeRasterizationPostDepthCoverage;
	}

	public unsafe partial struct VkPipelineRasterizationConservativeStateCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineRasterizationConservativeStateCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineRasterizationConservativeStateCreateFlagsEXT flags;
		public VkConservativeRasterizationModeEXT conservativeRasterizationMode;
		public float extraPrimitiveOverestimationSize;
	}

	public unsafe partial struct VkPhysicalDeviceDepthClipEnableFeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceDepthClipEnableFeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 depthClipEnable;
	}

	public unsafe partial struct VkPipelineRasterizationDepthClipStateCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineRasterizationDepthClipStateCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineRasterizationDepthClipStateCreateFlagsEXT flags;
		public VkBool32 depthClipEnable;
	}

	public unsafe partial struct VkXYColorEXT
	{
		/// <summary>
		/// The size of the <see cref="VkXYColorEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 8;

		public float x;
		public float y;
	}

	public unsafe partial struct VkHdrMetadataEXT
	{
		/// <summary>
		/// The size of the <see cref="VkHdrMetadataEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public VkXYColorEXT displayPrimaryRed;
		public VkXYColorEXT displayPrimaryGreen;
		public VkXYColorEXT displayPrimaryBlue;
		public VkXYColorEXT whitePoint;
		public float maxLuminance;
		public float minLuminance;
		public float maxContentLightLevel;
		public float maxFrameAverageLightLevel;
	}

	public unsafe partial struct VkDebugUtilsObjectNameInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkDebugUtilsObjectNameInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkObjectType objectType;
		public ulong objectHandle;
		public byte* pObjectName;
	}

	public unsafe partial struct VkDebugUtilsObjectTagInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkDebugUtilsObjectTagInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 56;

		public VkStructureType sType;
		public void* pNext;
		public VkObjectType objectType;
		public ulong objectHandle;
		public ulong tagName;
		public UIntPtr tagSize;
		public void* pTag;
	}

	public unsafe partial struct VkDebugUtilsLabelEXT
	{
		/// <summary>
		/// The size of the <see cref="VkDebugUtilsLabelEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public byte* pLabelName;
		public float color_0;
		public float color_1;
		public float color_2;
		public float color_3;
	}

	public unsafe partial struct VkDebugUtilsMessengerCallbackDataEXT
	{
		/// <summary>
		/// The size of the <see cref="VkDebugUtilsMessengerCallbackDataEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 96;

		public VkStructureType sType;
		public void* pNext;
		public VkDebugUtilsMessengerCallbackDataFlagsEXT flags;
		public byte* pMessageIdName;
		public int messageIdNumber;
		public byte* pMessage;
		public uint queueLabelCount;
		public VkDebugUtilsLabelEXT* pQueueLabels;
		public uint cmdBufLabelCount;
		public VkDebugUtilsLabelEXT* pCmdBufLabels;
		public uint objectCount;
		public VkDebugUtilsObjectNameInfoEXT* pObjects;
	}

	public unsafe partial struct VkDebugUtilsMessengerCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkDebugUtilsMessengerCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public VkDebugUtilsMessengerCreateFlagsEXT flags;
		public VkDebugUtilsMessageSeverityFlagsEXT messageSeverity;
		public VkDebugUtilsMessageTypeFlagsEXT messageType;
		public IntPtr pfnUserCallback;
		public void* pUserData;
	}

	public unsafe partial struct VkPhysicalDeviceInlineUniformBlockFeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceInlineUniformBlockFeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 inlineUniformBlock;
		public VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind;
	}

	public unsafe partial struct VkPhysicalDeviceInlineUniformBlockPropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceInlineUniformBlockPropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public uint maxInlineUniformBlockSize;
		public uint maxPerStageDescriptorInlineUniformBlocks;
		public uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
		public uint maxDescriptorSetInlineUniformBlocks;
		public uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
	}

	public unsafe partial struct VkWriteDescriptorSetInlineUniformBlockEXT
	{
		/// <summary>
		/// The size of the <see cref="VkWriteDescriptorSetInlineUniformBlockEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint dataSize;
		public void* pData;
	}

	public unsafe partial struct VkDescriptorPoolInlineUniformBlockCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkDescriptorPoolInlineUniformBlockCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public uint maxInlineUniformBlockBindings;
	}

	public unsafe partial struct VkSampleLocationEXT
	{
		/// <summary>
		/// The size of the <see cref="VkSampleLocationEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 8;

		public float x;
		public float y;
	}

	public unsafe partial struct VkSampleLocationsInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkSampleLocationsInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkSampleCountFlags sampleLocationsPerPixel;
		public VkExtent2D sampleLocationGridSize;
		public uint sampleLocationsCount;
		public VkSampleLocationEXT* pSampleLocations;
	}

	public unsafe partial struct VkAttachmentSampleLocationsEXT
	{
		/// <summary>
		/// The size of the <see cref="VkAttachmentSampleLocationsEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public uint attachmentIndex;
		public VkSampleLocationsInfoEXT sampleLocationsInfo;
	}

	public unsafe partial struct VkSubpassSampleLocationsEXT
	{
		/// <summary>
		/// The size of the <see cref="VkSubpassSampleLocationsEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public uint subpassIndex;
		public VkSampleLocationsInfoEXT sampleLocationsInfo;
	}

	public unsafe partial struct VkRenderPassSampleLocationsBeginInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkRenderPassSampleLocationsBeginInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public uint attachmentInitialSampleLocationsCount;
		public VkAttachmentSampleLocationsEXT* pAttachmentInitialSampleLocations;
		public uint postSubpassSampleLocationsCount;
		public VkSubpassSampleLocationsEXT* pPostSubpassSampleLocations;
	}

	public unsafe partial struct VkPipelineSampleLocationsStateCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineSampleLocationsStateCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 sampleLocationsEnable;
		public VkSampleLocationsInfoEXT sampleLocationsInfo;
	}

	public unsafe partial struct VkPhysicalDeviceSampleLocationsPropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceSampleLocationsPropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public VkSampleCountFlags sampleLocationSampleCounts;
		public VkExtent2D maxSampleLocationGridSize;
		public float sampleLocationCoordinateRange_0;
		public float sampleLocationCoordinateRange_1;
		public uint sampleLocationSubPixelBits;
		public VkBool32 variableSampleLocations;
	}

	public unsafe partial struct VkMultisamplePropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkMultisamplePropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkExtent2D maxSampleLocationGridSize;
	}

	public unsafe partial struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 advancedBlendCoherentOperations;
	}

	public unsafe partial struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public uint advancedBlendMaxColorAttachments;
		public VkBool32 advancedBlendIndependentBlend;
		public VkBool32 advancedBlendNonPremultipliedSrcColor;
		public VkBool32 advancedBlendNonPremultipliedDstColor;
		public VkBool32 advancedBlendCorrelatedOverlap;
		public VkBool32 advancedBlendAllOperations;
	}

	public unsafe partial struct VkPipelineColorBlendAdvancedStateCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineColorBlendAdvancedStateCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 srcPremultiplied;
		public VkBool32 dstPremultiplied;
		public VkBlendOverlapEXT blendOverlap;
	}

	public unsafe partial struct VkPipelineCoverageToColorStateCreateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineCoverageToColorStateCreateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCoverageToColorStateCreateFlagsNV flags;
		public VkBool32 coverageToColorEnable;
		public uint coverageToColorLocation;
	}

	public unsafe partial struct VkPipelineCoverageModulationStateCreateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineCoverageModulationStateCreateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCoverageModulationStateCreateFlagsNV flags;
		public VkCoverageModulationModeNV coverageModulationMode;
		public VkBool32 coverageModulationTableEnable;
		public uint coverageModulationTableCount;
		public float* pCoverageModulationTable;
	}

	public unsafe partial struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceShaderSMBuiltinsPropertiesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public uint shaderSMCount;
		public uint shaderWarpsPerSM;
	}

	public unsafe partial struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceShaderSMBuiltinsFeaturesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderSMBuiltins;
	}

	public unsafe partial struct VkDrmFormatModifierPropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkDrmFormatModifierPropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public ulong drmFormatModifier;
		public uint drmFormatModifierPlaneCount;
		public VkFormatFeatureFlags drmFormatModifierTilingFeatures;
	}

	public unsafe partial struct VkDrmFormatModifierPropertiesListEXT
	{
		/// <summary>
		/// The size of the <see cref="VkDrmFormatModifierPropertiesListEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint drmFormatModifierCount;
		public VkDrmFormatModifierPropertiesEXT* pDrmFormatModifierProperties;
	}

	public unsafe partial struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceImageDrmFormatModifierInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public ulong drmFormatModifier;
		public VkSharingMode sharingMode;
		public uint queueFamilyIndexCount;
		public uint* pQueueFamilyIndices;
	}

	public unsafe partial struct VkImageDrmFormatModifierListCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkImageDrmFormatModifierListCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint drmFormatModifierCount;
		public ulong* pDrmFormatModifiers;
	}

	public unsafe partial struct VkImageDrmFormatModifierExplicitCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkImageDrmFormatModifierExplicitCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public ulong drmFormatModifier;
		public uint drmFormatModifierPlaneCount;
		public VkSubresourceLayout* pPlaneLayouts;
	}

	public unsafe partial struct VkImageDrmFormatModifierPropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkImageDrmFormatModifierPropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public ulong drmFormatModifier;
	}

	public unsafe partial struct VkValidationCacheCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkValidationCacheCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkValidationCacheCreateFlagsEXT flags;
		public UIntPtr initialDataSize;
		public void* pInitialData;
	}

	public unsafe partial struct VkShaderModuleValidationCacheCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkShaderModuleValidationCacheCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkValidationCacheEXT validationCache;
	}

	public unsafe partial struct VkShadingRatePaletteNV
	{
		/// <summary>
		/// The size of the <see cref="VkShadingRatePaletteNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public uint shadingRatePaletteEntryCount;
		public VkShadingRatePaletteEntryNV* pShadingRatePaletteEntries;
	}

	public unsafe partial struct VkPipelineViewportShadingRateImageStateCreateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineViewportShadingRateImageStateCreateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shadingRateImageEnable;
		public uint viewportCount;
		public VkShadingRatePaletteNV* pShadingRatePalettes;
	}

	public unsafe partial struct VkPhysicalDeviceShadingRateImageFeaturesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceShadingRateImageFeaturesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shadingRateImage;
		public VkBool32 shadingRateCoarseSampleOrder;
	}

	public unsafe partial struct VkPhysicalDeviceShadingRateImagePropertiesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceShadingRateImagePropertiesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkExtent2D shadingRateTexelSize;
		public uint shadingRatePaletteSize;
		public uint shadingRateMaxCoarseSamples;
	}

	public unsafe partial struct VkCoarseSampleLocationNV
	{
		/// <summary>
		/// The size of the <see cref="VkCoarseSampleLocationNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 12;

		public uint pixelX;
		public uint pixelY;
		public uint sample;
	}

	public unsafe partial struct VkCoarseSampleOrderCustomNV
	{
		/// <summary>
		/// The size of the <see cref="VkCoarseSampleOrderCustomNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkShadingRatePaletteEntryNV shadingRate;
		public uint sampleCount;
		public uint sampleLocationCount;
		public VkCoarseSampleLocationNV* pSampleLocations;
	}

	public unsafe partial struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineViewportCoarseSampleOrderStateCreateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkCoarseSampleOrderTypeNV sampleOrderType;
		public uint customSampleOrderCount;
		public VkCoarseSampleOrderCustomNV* pCustomSampleOrders;
	}

	public unsafe partial struct VkRayTracingShaderGroupCreateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkRayTracingShaderGroupCreateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkRayTracingShaderGroupTypeKHR type;
		public uint generalShader;
		public uint closestHitShader;
		public uint anyHitShader;
		public uint intersectionShader;
	}

	public unsafe partial struct VkRayTracingPipelineCreateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkRayTracingPipelineCreateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 80;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCreateFlags flags;
		public uint stageCount;
		public VkPipelineShaderStageCreateInfo* pStages;
		public uint groupCount;
		public VkRayTracingShaderGroupCreateInfoNV* pGroups;
		public uint maxRecursionDepth;
		public VkPipelineLayout layout;
		public VkPipeline basePipelineHandle;
		public int basePipelineIndex;
	}

	public unsafe partial struct VkGeometryTrianglesNV
	{
		/// <summary>
		/// The size of the <see cref="VkGeometryTrianglesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 96;

		public VkStructureType sType;
		public void* pNext;
		public VkBuffer vertexData;
		public ulong vertexOffset;
		public uint vertexCount;
		public ulong vertexStride;
		public VkFormat vertexFormat;
		public VkBuffer indexData;
		public ulong indexOffset;
		public uint indexCount;
		public VkIndexType indexType;
		public VkBuffer transformData;
		public ulong transformOffset;
	}

	public unsafe partial struct VkGeometryAABBNV
	{
		/// <summary>
		/// The size of the <see cref="VkGeometryAABBNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkBuffer aabbData;
		public uint numAABBs;
		public uint stride;
		public ulong offset;
	}

	public unsafe partial struct VkGeometryDataNV
	{
		/// <summary>
		/// The size of the <see cref="VkGeometryDataNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 136;

		public VkGeometryTrianglesNV triangles;
		public VkGeometryAABBNV aabbs;
	}

	public unsafe partial struct VkGeometryNV
	{
		/// <summary>
		/// The size of the <see cref="VkGeometryNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 168;

		public VkStructureType sType;
		public void* pNext;
		public VkGeometryTypeKHR geometryType;
		public VkGeometryDataNV geometry;
		public VkGeometryFlagsKHR flags;
	}

	public unsafe partial struct VkAccelerationStructureInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkAccelerationStructureInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkAccelerationStructureTypeKHR type;
		public VkBuildAccelerationStructureFlagsNV flags;
		public uint instanceCount;
		public uint geometryCount;
		public VkGeometryNV* pGeometries;
	}

	public unsafe partial struct VkAccelerationStructureCreateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkAccelerationStructureCreateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public ulong compactedSize;
		public VkAccelerationStructureInfoNV info;
	}

	public unsafe partial struct VkBindAccelerationStructureMemoryInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkBindAccelerationStructureMemoryInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 56;

		public VkStructureType sType;
		public void* pNext;
		public VkAccelerationStructureKHR accelerationStructure;
		public VkDeviceMemory memory;
		public ulong memoryOffset;
		public uint deviceIndexCount;
		public uint* pDeviceIndices;
	}

	public unsafe partial struct VkWriteDescriptorSetAccelerationStructureKHR
	{
		/// <summary>
		/// The size of the <see cref="VkWriteDescriptorSetAccelerationStructureKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint accelerationStructureCount;
		public VkAccelerationStructureKHR* pAccelerationStructures;
	}

	public unsafe partial struct VkAccelerationStructureMemoryRequirementsInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkAccelerationStructureMemoryRequirementsInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkAccelerationStructureMemoryRequirementsTypeKHR type;
		public VkAccelerationStructureKHR accelerationStructure;
	}

	public unsafe partial struct VkPhysicalDeviceRayTracingPropertiesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceRayTracingPropertiesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkStructureType sType;
		public void* pNext;
		public uint shaderGroupHandleSize;
		public uint maxRecursionDepth;
		public uint maxShaderGroupStride;
		public uint shaderGroupBaseAlignment;
		public ulong maxGeometryCount;
		public ulong maxInstanceCount;
		public ulong maxTriangleCount;
		public uint maxDescriptorSetAccelerationStructures;
	}

	public unsafe partial struct VkTransformMatrixKHR
	{
		/// <summary>
		/// The size of the <see cref="VkTransformMatrixKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public float matrix_0;
		public float matrix_1;
		public float matrix_2;
	}

	public unsafe partial struct VkAabbPositionsKHR
	{
		/// <summary>
		/// The size of the <see cref="VkAabbPositionsKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public float minX;
		public float minY;
		public float minZ;
		public float maxX;
		public float maxY;
		public float maxZ;
	}

	public unsafe partial struct VkAccelerationStructureInstanceKHR
	{
		/// <summary>
		/// The size of the <see cref="VkAccelerationStructureInstanceKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 64;

		public VkTransformMatrixKHR transform;
		public uint instanceCustomIndex;
		public uint mask;
		public uint instanceShaderBindingTableRecordOffset;
		public VkGeometryInstanceFlagsKHR flags;
		public ulong accelerationStructureReference;
	}

	public unsafe partial struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 representativeFragmentTest;
	}

	public unsafe partial struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineRepresentativeFragmentTestStateCreateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 representativeFragmentTestEnable;
	}

	public unsafe partial struct VkPhysicalDeviceImageViewImageFormatInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceImageViewImageFormatInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkImageViewType imageViewType;
	}

	public unsafe partial struct VkFilterCubicImageViewImageFormatPropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkFilterCubicImageViewImageFormatPropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 filterCubic;
		public VkBool32 filterCubicMinmax;
	}

	public unsafe partial struct VkDeviceQueueGlobalPriorityCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkDeviceQueueGlobalPriorityCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkQueueGlobalPriorityEXT globalPriority;
	}

	public unsafe partial struct VkImportMemoryHostPointerInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkImportMemoryHostPointerInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryHandleTypeFlags handleType;
		public void* pHostPointer;
	}

	public unsafe partial struct VkMemoryHostPointerPropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkMemoryHostPointerPropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public uint memoryTypeBits;
	}

	public unsafe partial struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceExternalMemoryHostPropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public ulong minImportedHostPointerAlignment;
	}

	public unsafe partial struct VkPipelineCompilerControlCreateInfoAMD
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineCompilerControlCreateInfoAMD"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCompilerControlFlagsAMD compilerControlFlags;
	}

	public unsafe partial struct VkCalibratedTimestampInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkCalibratedTimestampInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkTimeDomainEXT timeDomain;
	}

	public unsafe partial struct VkPhysicalDeviceShaderCorePropertiesAMD
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceShaderCorePropertiesAMD"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 72;

		public VkStructureType sType;
		public void* pNext;
		public uint shaderEngineCount;
		public uint shaderArraysPerEngineCount;
		public uint computeUnitsPerShaderArray;
		public uint simdPerComputeUnit;
		public uint wavefrontsPerSimd;
		public uint wavefrontSize;
		public uint sgprsPerSimd;
		public uint minSgprAllocation;
		public uint maxSgprAllocation;
		public uint sgprAllocationGranularity;
		public uint vgprsPerSimd;
		public uint minVgprAllocation;
		public uint maxVgprAllocation;
		public uint vgprAllocationGranularity;
	}

	public unsafe partial struct VkDeviceMemoryOverallocationCreateInfoAMD
	{
		/// <summary>
		/// The size of the <see cref="VkDeviceMemoryOverallocationCreateInfoAMD"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkMemoryOverallocationBehaviorAMD overallocationBehavior;
	}

	public unsafe partial struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public uint maxVertexAttribDivisor;
	}

	public unsafe partial struct VkVertexInputBindingDivisorDescriptionEXT
	{
		/// <summary>
		/// The size of the <see cref="VkVertexInputBindingDivisorDescriptionEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 8;

		public uint binding;
		public uint divisor;
	}

	public unsafe partial struct VkPipelineVertexInputDivisorStateCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineVertexInputDivisorStateCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint vertexBindingDivisorCount;
		public VkVertexInputBindingDivisorDescriptionEXT* pVertexBindingDivisors;
	}

	public unsafe partial struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 vertexAttributeInstanceRateDivisor;
		public VkBool32 vertexAttributeInstanceRateZeroDivisor;
	}

	public unsafe partial struct VkPipelineCreationFeedbackEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineCreationFeedbackEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public VkPipelineCreationFeedbackFlagsEXT flags;
		public ulong duration;
	}

	public unsafe partial struct VkPipelineCreationFeedbackCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineCreationFeedbackCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCreationFeedbackEXT* pPipelineCreationFeedback;
		public uint pipelineStageCreationFeedbackCount;
		public VkPipelineCreationFeedbackEXT* pPipelineStageCreationFeedbacks;
	}

	public unsafe partial struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceComputeShaderDerivativesFeaturesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 computeDerivativeGroupQuads;
		public VkBool32 computeDerivativeGroupLinear;
	}

	public unsafe partial struct VkPhysicalDeviceMeshShaderFeaturesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceMeshShaderFeaturesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 taskShader;
		public VkBool32 meshShader;
	}

	public unsafe partial struct VkPhysicalDeviceMeshShaderPropertiesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceMeshShaderPropertiesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 88;

		public VkStructureType sType;
		public void* pNext;
		public uint maxDrawMeshTasksCount;
		public uint maxTaskWorkGroupInvocations;
		public fixed uint maxTaskWorkGroupSize[3];
		public uint maxTaskTotalMemorySize;
		public uint maxTaskOutputCount;
		public uint maxMeshWorkGroupInvocations;
		public fixed uint maxMeshWorkGroupSize[3];
		public uint maxMeshTotalMemorySize;
		public uint maxMeshOutputVertices;
		public uint maxMeshOutputPrimitives;
		public uint maxMeshMultiviewViewCount;
		public uint meshOutputPerVertexGranularity;
		public uint meshOutputPerPrimitiveGranularity;
	}

	public unsafe partial struct VkDrawMeshTasksIndirectCommandNV
	{
		/// <summary>
		/// The size of the <see cref="VkDrawMeshTasksIndirectCommandNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 8;

		public uint taskCount;
		public uint firstTask;
	}

	public unsafe partial struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 fragmentShaderBarycentric;
	}

	public unsafe partial struct VkPhysicalDeviceShaderImageFootprintFeaturesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceShaderImageFootprintFeaturesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 imageFootprint;
	}

	public unsafe partial struct VkPipelineViewportExclusiveScissorStateCreateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineViewportExclusiveScissorStateCreateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint exclusiveScissorCount;
		public VkRect2D* pExclusiveScissors;
	}

	public unsafe partial struct VkPhysicalDeviceExclusiveScissorFeaturesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceExclusiveScissorFeaturesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 exclusiveScissor;
	}

	public unsafe partial struct VkQueueFamilyCheckpointPropertiesNV
	{
		/// <summary>
		/// The size of the <see cref="VkQueueFamilyCheckpointPropertiesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineStageFlags checkpointExecutionStageMask;
	}

	public unsafe partial struct VkCheckpointDataNV
	{
		/// <summary>
		/// The size of the <see cref="VkCheckpointDataNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineStageFlags stage;
		public void* pCheckpointMarker;
	}

	public unsafe partial struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderIntegerFunctions2;
	}

	public unsafe partial struct VkPerformanceValueINTEL
	{
		/// <summary>
		/// The size of the <see cref="VkPerformanceValueINTEL"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public VkPerformanceValueTypeINTEL type;
		public VkPerformanceValueDataINTEL data;
	}

	public unsafe partial struct VkInitializePerformanceApiInfoINTEL
	{
		/// <summary>
		/// The size of the <see cref="VkInitializePerformanceApiInfoINTEL"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public void* pUserData;
	}

	public unsafe partial struct VkQueryPoolPerformanceQueryCreateInfoINTEL
	{
		/// <summary>
		/// The size of the <see cref="VkQueryPoolPerformanceQueryCreateInfoINTEL"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkQueryPoolSamplingModeINTEL performanceCountersSampling;
	}

	public unsafe partial struct VkPerformanceMarkerInfoINTEL
	{
		/// <summary>
		/// The size of the <see cref="VkPerformanceMarkerInfoINTEL"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public ulong marker;
	}

	public unsafe partial struct VkPerformanceStreamMarkerInfoINTEL
	{
		/// <summary>
		/// The size of the <see cref="VkPerformanceStreamMarkerInfoINTEL"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public uint marker;
	}

	public unsafe partial struct VkPerformanceOverrideInfoINTEL
	{
		/// <summary>
		/// The size of the <see cref="VkPerformanceOverrideInfoINTEL"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkPerformanceOverrideTypeINTEL type;
		public VkBool32 enable;
		public ulong parameter;
	}

	public unsafe partial struct VkPerformanceConfigurationAcquireInfoINTEL
	{
		/// <summary>
		/// The size of the <see cref="VkPerformanceConfigurationAcquireInfoINTEL"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkPerformanceConfigurationTypeINTEL type;
	}

	public unsafe partial struct VkPhysicalDevicePCIBusInfoPropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDevicePCIBusInfoPropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint pciDomain;
		public uint pciBus;
		public uint pciDevice;
		public uint pciFunction;
	}

	public unsafe partial struct VkDisplayNativeHdrSurfaceCapabilitiesAMD
	{
		/// <summary>
		/// The size of the <see cref="VkDisplayNativeHdrSurfaceCapabilitiesAMD"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 localDimmingSupport;
	}

	public unsafe partial struct VkSwapchainDisplayNativeHdrCreateInfoAMD
	{
		/// <summary>
		/// The size of the <see cref="VkSwapchainDisplayNativeHdrCreateInfoAMD"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 localDimmingEnable;
	}

	public unsafe partial struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceFragmentDensityMapFeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 fragmentDensityMap;
		public VkBool32 fragmentDensityMapDynamic;
		public VkBool32 fragmentDensityMapNonSubsampledImages;
	}

	public unsafe partial struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceFragmentDensityMapPropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkExtent2D minFragmentDensityTexelSize;
		public VkExtent2D maxFragmentDensityTexelSize;
		public VkBool32 fragmentDensityInvocations;
	}

	public unsafe partial struct VkRenderPassFragmentDensityMapCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkRenderPassFragmentDensityMapCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkAttachmentReference fragmentDensityMapAttachment;
	}

	public unsafe partial struct VkPhysicalDeviceSubgroupSizeControlFeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceSubgroupSizeControlFeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 subgroupSizeControl;
		public VkBool32 computeFullSubgroups;
	}

	public unsafe partial struct VkPhysicalDeviceSubgroupSizeControlPropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceSubgroupSizeControlPropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public uint minSubgroupSize;
		public uint maxSubgroupSize;
		public uint maxComputeWorkgroupSubgroups;
		public VkShaderStageFlags requiredSubgroupSizeStages;
	}

	public unsafe partial struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public uint requiredSubgroupSize;
	}

	public unsafe partial struct VkPhysicalDeviceShaderCoreProperties2AMD
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceShaderCoreProperties2AMD"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkShaderCorePropertiesFlagsAMD shaderCoreFeatures;
		public uint activeComputeUnitCount;
	}

	public unsafe partial struct VkPhysicalDeviceCoherentMemoryFeaturesAMD
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceCoherentMemoryFeaturesAMD"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 deviceCoherentMemory;
	}

	public unsafe partial struct VkPhysicalDeviceMemoryBudgetPropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceMemoryBudgetPropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 272;

		public VkStructureType sType;
		public void* pNext;
		public ulong heapBudget_0;
		public ulong heapBudget_1;
		public ulong heapBudget_2;
		public ulong heapBudget_3;
		public ulong heapBudget_4;
		public ulong heapBudget_5;
		public ulong heapBudget_6;
		public ulong heapBudget_7;
		public ulong heapBudget_8;
		public ulong heapBudget_9;
		public ulong heapBudget_10;
		public ulong heapBudget_11;
		public ulong heapBudget_12;
		public ulong heapBudget_13;
		public ulong heapBudget_14;
		public ulong heapBudget_15;
		public ulong heapUsage_0;
		public ulong heapUsage_1;
		public ulong heapUsage_2;
		public ulong heapUsage_3;
		public ulong heapUsage_4;
		public ulong heapUsage_5;
		public ulong heapUsage_6;
		public ulong heapUsage_7;
		public ulong heapUsage_8;
		public ulong heapUsage_9;
		public ulong heapUsage_10;
		public ulong heapUsage_11;
		public ulong heapUsage_12;
		public ulong heapUsage_13;
		public ulong heapUsage_14;
		public ulong heapUsage_15;
	}

	public unsafe partial struct VkPhysicalDeviceMemoryPriorityFeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceMemoryPriorityFeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 memoryPriority;
	}

	public unsafe partial struct VkMemoryPriorityAllocateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkMemoryPriorityAllocateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public float priority;
	}

	public unsafe partial struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 dedicatedAllocationImageAliasing;
	}

	public unsafe partial struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceBufferDeviceAddressFeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 bufferDeviceAddress;
		public VkBool32 bufferDeviceAddressCaptureReplay;
		public VkBool32 bufferDeviceAddressMultiDevice;
	}

	public unsafe partial struct VkBufferDeviceAddressCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkBufferDeviceAddressCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public IntPtr deviceAddress;
	}

	public unsafe partial struct VkPhysicalDeviceToolPropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceToolPropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 1048;

		public VkStructureType sType;
		public void* pNext;
		public char name_0;
		public char name_1;
		public char name_2;
		public char name_3;
		public char name_4;
		public char name_5;
		public char name_6;
		public char name_7;
		public char name_8;
		public char name_9;
		public char name_10;
		public char name_11;
		public char name_12;
		public char name_13;
		public char name_14;
		public char name_15;
		public char name_16;
		public char name_17;
		public char name_18;
		public char name_19;
		public char name_20;
		public char name_21;
		public char name_22;
		public char name_23;
		public char name_24;
		public char name_25;
		public char name_26;
		public char name_27;
		public char name_28;
		public char name_29;
		public char name_30;
		public char name_31;
		public char name_32;
		public char name_33;
		public char name_34;
		public char name_35;
		public char name_36;
		public char name_37;
		public char name_38;
		public char name_39;
		public char name_40;
		public char name_41;
		public char name_42;
		public char name_43;
		public char name_44;
		public char name_45;
		public char name_46;
		public char name_47;
		public char name_48;
		public char name_49;
		public char name_50;
		public char name_51;
		public char name_52;
		public char name_53;
		public char name_54;
		public char name_55;
		public char name_56;
		public char name_57;
		public char name_58;
		public char name_59;
		public char name_60;
		public char name_61;
		public char name_62;
		public char name_63;
		public char name_64;
		public char name_65;
		public char name_66;
		public char name_67;
		public char name_68;
		public char name_69;
		public char name_70;
		public char name_71;
		public char name_72;
		public char name_73;
		public char name_74;
		public char name_75;
		public char name_76;
		public char name_77;
		public char name_78;
		public char name_79;
		public char name_80;
		public char name_81;
		public char name_82;
		public char name_83;
		public char name_84;
		public char name_85;
		public char name_86;
		public char name_87;
		public char name_88;
		public char name_89;
		public char name_90;
		public char name_91;
		public char name_92;
		public char name_93;
		public char name_94;
		public char name_95;
		public char name_96;
		public char name_97;
		public char name_98;
		public char name_99;
		public char name_100;
		public char name_101;
		public char name_102;
		public char name_103;
		public char name_104;
		public char name_105;
		public char name_106;
		public char name_107;
		public char name_108;
		public char name_109;
		public char name_110;
		public char name_111;
		public char name_112;
		public char name_113;
		public char name_114;
		public char name_115;
		public char name_116;
		public char name_117;
		public char name_118;
		public char name_119;
		public char name_120;
		public char name_121;
		public char name_122;
		public char name_123;
		public char name_124;
		public char name_125;
		public char name_126;
		public char name_127;
		public char name_128;
		public char name_129;
		public char name_130;
		public char name_131;
		public char name_132;
		public char name_133;
		public char name_134;
		public char name_135;
		public char name_136;
		public char name_137;
		public char name_138;
		public char name_139;
		public char name_140;
		public char name_141;
		public char name_142;
		public char name_143;
		public char name_144;
		public char name_145;
		public char name_146;
		public char name_147;
		public char name_148;
		public char name_149;
		public char name_150;
		public char name_151;
		public char name_152;
		public char name_153;
		public char name_154;
		public char name_155;
		public char name_156;
		public char name_157;
		public char name_158;
		public char name_159;
		public char name_160;
		public char name_161;
		public char name_162;
		public char name_163;
		public char name_164;
		public char name_165;
		public char name_166;
		public char name_167;
		public char name_168;
		public char name_169;
		public char name_170;
		public char name_171;
		public char name_172;
		public char name_173;
		public char name_174;
		public char name_175;
		public char name_176;
		public char name_177;
		public char name_178;
		public char name_179;
		public char name_180;
		public char name_181;
		public char name_182;
		public char name_183;
		public char name_184;
		public char name_185;
		public char name_186;
		public char name_187;
		public char name_188;
		public char name_189;
		public char name_190;
		public char name_191;
		public char name_192;
		public char name_193;
		public char name_194;
		public char name_195;
		public char name_196;
		public char name_197;
		public char name_198;
		public char name_199;
		public char name_200;
		public char name_201;
		public char name_202;
		public char name_203;
		public char name_204;
		public char name_205;
		public char name_206;
		public char name_207;
		public char name_208;
		public char name_209;
		public char name_210;
		public char name_211;
		public char name_212;
		public char name_213;
		public char name_214;
		public char name_215;
		public char name_216;
		public char name_217;
		public char name_218;
		public char name_219;
		public char name_220;
		public char name_221;
		public char name_222;
		public char name_223;
		public char name_224;
		public char name_225;
		public char name_226;
		public char name_227;
		public char name_228;
		public char name_229;
		public char name_230;
		public char name_231;
		public char name_232;
		public char name_233;
		public char name_234;
		public char name_235;
		public char name_236;
		public char name_237;
		public char name_238;
		public char name_239;
		public char name_240;
		public char name_241;
		public char name_242;
		public char name_243;
		public char name_244;
		public char name_245;
		public char name_246;
		public char name_247;
		public char name_248;
		public char name_249;
		public char name_250;
		public char name_251;
		public char name_252;
		public char name_253;
		public char name_254;
		public char name_255;
		public char version_0;
		public char version_1;
		public char version_2;
		public char version_3;
		public char version_4;
		public char version_5;
		public char version_6;
		public char version_7;
		public char version_8;
		public char version_9;
		public char version_10;
		public char version_11;
		public char version_12;
		public char version_13;
		public char version_14;
		public char version_15;
		public char version_16;
		public char version_17;
		public char version_18;
		public char version_19;
		public char version_20;
		public char version_21;
		public char version_22;
		public char version_23;
		public char version_24;
		public char version_25;
		public char version_26;
		public char version_27;
		public char version_28;
		public char version_29;
		public char version_30;
		public char version_31;
		public char version_32;
		public char version_33;
		public char version_34;
		public char version_35;
		public char version_36;
		public char version_37;
		public char version_38;
		public char version_39;
		public char version_40;
		public char version_41;
		public char version_42;
		public char version_43;
		public char version_44;
		public char version_45;
		public char version_46;
		public char version_47;
		public char version_48;
		public char version_49;
		public char version_50;
		public char version_51;
		public char version_52;
		public char version_53;
		public char version_54;
		public char version_55;
		public char version_56;
		public char version_57;
		public char version_58;
		public char version_59;
		public char version_60;
		public char version_61;
		public char version_62;
		public char version_63;
		public char version_64;
		public char version_65;
		public char version_66;
		public char version_67;
		public char version_68;
		public char version_69;
		public char version_70;
		public char version_71;
		public char version_72;
		public char version_73;
		public char version_74;
		public char version_75;
		public char version_76;
		public char version_77;
		public char version_78;
		public char version_79;
		public char version_80;
		public char version_81;
		public char version_82;
		public char version_83;
		public char version_84;
		public char version_85;
		public char version_86;
		public char version_87;
		public char version_88;
		public char version_89;
		public char version_90;
		public char version_91;
		public char version_92;
		public char version_93;
		public char version_94;
		public char version_95;
		public char version_96;
		public char version_97;
		public char version_98;
		public char version_99;
		public char version_100;
		public char version_101;
		public char version_102;
		public char version_103;
		public char version_104;
		public char version_105;
		public char version_106;
		public char version_107;
		public char version_108;
		public char version_109;
		public char version_110;
		public char version_111;
		public char version_112;
		public char version_113;
		public char version_114;
		public char version_115;
		public char version_116;
		public char version_117;
		public char version_118;
		public char version_119;
		public char version_120;
		public char version_121;
		public char version_122;
		public char version_123;
		public char version_124;
		public char version_125;
		public char version_126;
		public char version_127;
		public char version_128;
		public char version_129;
		public char version_130;
		public char version_131;
		public char version_132;
		public char version_133;
		public char version_134;
		public char version_135;
		public char version_136;
		public char version_137;
		public char version_138;
		public char version_139;
		public char version_140;
		public char version_141;
		public char version_142;
		public char version_143;
		public char version_144;
		public char version_145;
		public char version_146;
		public char version_147;
		public char version_148;
		public char version_149;
		public char version_150;
		public char version_151;
		public char version_152;
		public char version_153;
		public char version_154;
		public char version_155;
		public char version_156;
		public char version_157;
		public char version_158;
		public char version_159;
		public char version_160;
		public char version_161;
		public char version_162;
		public char version_163;
		public char version_164;
		public char version_165;
		public char version_166;
		public char version_167;
		public char version_168;
		public char version_169;
		public char version_170;
		public char version_171;
		public char version_172;
		public char version_173;
		public char version_174;
		public char version_175;
		public char version_176;
		public char version_177;
		public char version_178;
		public char version_179;
		public char version_180;
		public char version_181;
		public char version_182;
		public char version_183;
		public char version_184;
		public char version_185;
		public char version_186;
		public char version_187;
		public char version_188;
		public char version_189;
		public char version_190;
		public char version_191;
		public char version_192;
		public char version_193;
		public char version_194;
		public char version_195;
		public char version_196;
		public char version_197;
		public char version_198;
		public char version_199;
		public char version_200;
		public char version_201;
		public char version_202;
		public char version_203;
		public char version_204;
		public char version_205;
		public char version_206;
		public char version_207;
		public char version_208;
		public char version_209;
		public char version_210;
		public char version_211;
		public char version_212;
		public char version_213;
		public char version_214;
		public char version_215;
		public char version_216;
		public char version_217;
		public char version_218;
		public char version_219;
		public char version_220;
		public char version_221;
		public char version_222;
		public char version_223;
		public char version_224;
		public char version_225;
		public char version_226;
		public char version_227;
		public char version_228;
		public char version_229;
		public char version_230;
		public char version_231;
		public char version_232;
		public char version_233;
		public char version_234;
		public char version_235;
		public char version_236;
		public char version_237;
		public char version_238;
		public char version_239;
		public char version_240;
		public char version_241;
		public char version_242;
		public char version_243;
		public char version_244;
		public char version_245;
		public char version_246;
		public char version_247;
		public char version_248;
		public char version_249;
		public char version_250;
		public char version_251;
		public char version_252;
		public char version_253;
		public char version_254;
		public char version_255;
		public VkToolPurposeFlagsEXT purposes;
		public char description_0;
		public char description_1;
		public char description_2;
		public char description_3;
		public char description_4;
		public char description_5;
		public char description_6;
		public char description_7;
		public char description_8;
		public char description_9;
		public char description_10;
		public char description_11;
		public char description_12;
		public char description_13;
		public char description_14;
		public char description_15;
		public char description_16;
		public char description_17;
		public char description_18;
		public char description_19;
		public char description_20;
		public char description_21;
		public char description_22;
		public char description_23;
		public char description_24;
		public char description_25;
		public char description_26;
		public char description_27;
		public char description_28;
		public char description_29;
		public char description_30;
		public char description_31;
		public char description_32;
		public char description_33;
		public char description_34;
		public char description_35;
		public char description_36;
		public char description_37;
		public char description_38;
		public char description_39;
		public char description_40;
		public char description_41;
		public char description_42;
		public char description_43;
		public char description_44;
		public char description_45;
		public char description_46;
		public char description_47;
		public char description_48;
		public char description_49;
		public char description_50;
		public char description_51;
		public char description_52;
		public char description_53;
		public char description_54;
		public char description_55;
		public char description_56;
		public char description_57;
		public char description_58;
		public char description_59;
		public char description_60;
		public char description_61;
		public char description_62;
		public char description_63;
		public char description_64;
		public char description_65;
		public char description_66;
		public char description_67;
		public char description_68;
		public char description_69;
		public char description_70;
		public char description_71;
		public char description_72;
		public char description_73;
		public char description_74;
		public char description_75;
		public char description_76;
		public char description_77;
		public char description_78;
		public char description_79;
		public char description_80;
		public char description_81;
		public char description_82;
		public char description_83;
		public char description_84;
		public char description_85;
		public char description_86;
		public char description_87;
		public char description_88;
		public char description_89;
		public char description_90;
		public char description_91;
		public char description_92;
		public char description_93;
		public char description_94;
		public char description_95;
		public char description_96;
		public char description_97;
		public char description_98;
		public char description_99;
		public char description_100;
		public char description_101;
		public char description_102;
		public char description_103;
		public char description_104;
		public char description_105;
		public char description_106;
		public char description_107;
		public char description_108;
		public char description_109;
		public char description_110;
		public char description_111;
		public char description_112;
		public char description_113;
		public char description_114;
		public char description_115;
		public char description_116;
		public char description_117;
		public char description_118;
		public char description_119;
		public char description_120;
		public char description_121;
		public char description_122;
		public char description_123;
		public char description_124;
		public char description_125;
		public char description_126;
		public char description_127;
		public char description_128;
		public char description_129;
		public char description_130;
		public char description_131;
		public char description_132;
		public char description_133;
		public char description_134;
		public char description_135;
		public char description_136;
		public char description_137;
		public char description_138;
		public char description_139;
		public char description_140;
		public char description_141;
		public char description_142;
		public char description_143;
		public char description_144;
		public char description_145;
		public char description_146;
		public char description_147;
		public char description_148;
		public char description_149;
		public char description_150;
		public char description_151;
		public char description_152;
		public char description_153;
		public char description_154;
		public char description_155;
		public char description_156;
		public char description_157;
		public char description_158;
		public char description_159;
		public char description_160;
		public char description_161;
		public char description_162;
		public char description_163;
		public char description_164;
		public char description_165;
		public char description_166;
		public char description_167;
		public char description_168;
		public char description_169;
		public char description_170;
		public char description_171;
		public char description_172;
		public char description_173;
		public char description_174;
		public char description_175;
		public char description_176;
		public char description_177;
		public char description_178;
		public char description_179;
		public char description_180;
		public char description_181;
		public char description_182;
		public char description_183;
		public char description_184;
		public char description_185;
		public char description_186;
		public char description_187;
		public char description_188;
		public char description_189;
		public char description_190;
		public char description_191;
		public char description_192;
		public char description_193;
		public char description_194;
		public char description_195;
		public char description_196;
		public char description_197;
		public char description_198;
		public char description_199;
		public char description_200;
		public char description_201;
		public char description_202;
		public char description_203;
		public char description_204;
		public char description_205;
		public char description_206;
		public char description_207;
		public char description_208;
		public char description_209;
		public char description_210;
		public char description_211;
		public char description_212;
		public char description_213;
		public char description_214;
		public char description_215;
		public char description_216;
		public char description_217;
		public char description_218;
		public char description_219;
		public char description_220;
		public char description_221;
		public char description_222;
		public char description_223;
		public char description_224;
		public char description_225;
		public char description_226;
		public char description_227;
		public char description_228;
		public char description_229;
		public char description_230;
		public char description_231;
		public char description_232;
		public char description_233;
		public char description_234;
		public char description_235;
		public char description_236;
		public char description_237;
		public char description_238;
		public char description_239;
		public char description_240;
		public char description_241;
		public char description_242;
		public char description_243;
		public char description_244;
		public char description_245;
		public char description_246;
		public char description_247;
		public char description_248;
		public char description_249;
		public char description_250;
		public char description_251;
		public char description_252;
		public char description_253;
		public char description_254;
		public char description_255;
		public char layer_0;
		public char layer_1;
		public char layer_2;
		public char layer_3;
		public char layer_4;
		public char layer_5;
		public char layer_6;
		public char layer_7;
		public char layer_8;
		public char layer_9;
		public char layer_10;
		public char layer_11;
		public char layer_12;
		public char layer_13;
		public char layer_14;
		public char layer_15;
		public char layer_16;
		public char layer_17;
		public char layer_18;
		public char layer_19;
		public char layer_20;
		public char layer_21;
		public char layer_22;
		public char layer_23;
		public char layer_24;
		public char layer_25;
		public char layer_26;
		public char layer_27;
		public char layer_28;
		public char layer_29;
		public char layer_30;
		public char layer_31;
		public char layer_32;
		public char layer_33;
		public char layer_34;
		public char layer_35;
		public char layer_36;
		public char layer_37;
		public char layer_38;
		public char layer_39;
		public char layer_40;
		public char layer_41;
		public char layer_42;
		public char layer_43;
		public char layer_44;
		public char layer_45;
		public char layer_46;
		public char layer_47;
		public char layer_48;
		public char layer_49;
		public char layer_50;
		public char layer_51;
		public char layer_52;
		public char layer_53;
		public char layer_54;
		public char layer_55;
		public char layer_56;
		public char layer_57;
		public char layer_58;
		public char layer_59;
		public char layer_60;
		public char layer_61;
		public char layer_62;
		public char layer_63;
		public char layer_64;
		public char layer_65;
		public char layer_66;
		public char layer_67;
		public char layer_68;
		public char layer_69;
		public char layer_70;
		public char layer_71;
		public char layer_72;
		public char layer_73;
		public char layer_74;
		public char layer_75;
		public char layer_76;
		public char layer_77;
		public char layer_78;
		public char layer_79;
		public char layer_80;
		public char layer_81;
		public char layer_82;
		public char layer_83;
		public char layer_84;
		public char layer_85;
		public char layer_86;
		public char layer_87;
		public char layer_88;
		public char layer_89;
		public char layer_90;
		public char layer_91;
		public char layer_92;
		public char layer_93;
		public char layer_94;
		public char layer_95;
		public char layer_96;
		public char layer_97;
		public char layer_98;
		public char layer_99;
		public char layer_100;
		public char layer_101;
		public char layer_102;
		public char layer_103;
		public char layer_104;
		public char layer_105;
		public char layer_106;
		public char layer_107;
		public char layer_108;
		public char layer_109;
		public char layer_110;
		public char layer_111;
		public char layer_112;
		public char layer_113;
		public char layer_114;
		public char layer_115;
		public char layer_116;
		public char layer_117;
		public char layer_118;
		public char layer_119;
		public char layer_120;
		public char layer_121;
		public char layer_122;
		public char layer_123;
		public char layer_124;
		public char layer_125;
		public char layer_126;
		public char layer_127;
		public char layer_128;
		public char layer_129;
		public char layer_130;
		public char layer_131;
		public char layer_132;
		public char layer_133;
		public char layer_134;
		public char layer_135;
		public char layer_136;
		public char layer_137;
		public char layer_138;
		public char layer_139;
		public char layer_140;
		public char layer_141;
		public char layer_142;
		public char layer_143;
		public char layer_144;
		public char layer_145;
		public char layer_146;
		public char layer_147;
		public char layer_148;
		public char layer_149;
		public char layer_150;
		public char layer_151;
		public char layer_152;
		public char layer_153;
		public char layer_154;
		public char layer_155;
		public char layer_156;
		public char layer_157;
		public char layer_158;
		public char layer_159;
		public char layer_160;
		public char layer_161;
		public char layer_162;
		public char layer_163;
		public char layer_164;
		public char layer_165;
		public char layer_166;
		public char layer_167;
		public char layer_168;
		public char layer_169;
		public char layer_170;
		public char layer_171;
		public char layer_172;
		public char layer_173;
		public char layer_174;
		public char layer_175;
		public char layer_176;
		public char layer_177;
		public char layer_178;
		public char layer_179;
		public char layer_180;
		public char layer_181;
		public char layer_182;
		public char layer_183;
		public char layer_184;
		public char layer_185;
		public char layer_186;
		public char layer_187;
		public char layer_188;
		public char layer_189;
		public char layer_190;
		public char layer_191;
		public char layer_192;
		public char layer_193;
		public char layer_194;
		public char layer_195;
		public char layer_196;
		public char layer_197;
		public char layer_198;
		public char layer_199;
		public char layer_200;
		public char layer_201;
		public char layer_202;
		public char layer_203;
		public char layer_204;
		public char layer_205;
		public char layer_206;
		public char layer_207;
		public char layer_208;
		public char layer_209;
		public char layer_210;
		public char layer_211;
		public char layer_212;
		public char layer_213;
		public char layer_214;
		public char layer_215;
		public char layer_216;
		public char layer_217;
		public char layer_218;
		public char layer_219;
		public char layer_220;
		public char layer_221;
		public char layer_222;
		public char layer_223;
		public char layer_224;
		public char layer_225;
		public char layer_226;
		public char layer_227;
		public char layer_228;
		public char layer_229;
		public char layer_230;
		public char layer_231;
		public char layer_232;
		public char layer_233;
		public char layer_234;
		public char layer_235;
		public char layer_236;
		public char layer_237;
		public char layer_238;
		public char layer_239;
		public char layer_240;
		public char layer_241;
		public char layer_242;
		public char layer_243;
		public char layer_244;
		public char layer_245;
		public char layer_246;
		public char layer_247;
		public char layer_248;
		public char layer_249;
		public char layer_250;
		public char layer_251;
		public char layer_252;
		public char layer_253;
		public char layer_254;
		public char layer_255;
	}

	public unsafe partial struct VkValidationFeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkValidationFeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public uint enabledValidationFeatureCount;
		public VkValidationFeatureEnableEXT* pEnabledValidationFeatures;
		public uint disabledValidationFeatureCount;
		public VkValidationFeatureDisableEXT* pDisabledValidationFeatures;
	}

	public unsafe partial struct VkCooperativeMatrixPropertiesNV
	{
		/// <summary>
		/// The size of the <see cref="VkCooperativeMatrixPropertiesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public uint MSize;
		public uint NSize;
		public uint KSize;
		public VkComponentTypeNV AType;
		public VkComponentTypeNV BType;
		public VkComponentTypeNV CType;
		public VkComponentTypeNV DType;
		public VkScopeNV scope;
	}

	public unsafe partial struct VkPhysicalDeviceCooperativeMatrixFeaturesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceCooperativeMatrixFeaturesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 cooperativeMatrix;
		public VkBool32 cooperativeMatrixRobustBufferAccess;
	}

	public unsafe partial struct VkPhysicalDeviceCooperativeMatrixPropertiesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceCooperativeMatrixPropertiesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkShaderStageFlags cooperativeMatrixSupportedStages;
	}

	public unsafe partial struct VkPhysicalDeviceCoverageReductionModeFeaturesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceCoverageReductionModeFeaturesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 coverageReductionMode;
	}

	public unsafe partial struct VkPipelineCoverageReductionStateCreateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineCoverageReductionStateCreateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCoverageReductionStateCreateFlagsNV flags;
		public VkCoverageReductionModeNV coverageReductionMode;
	}

	public unsafe partial struct VkFramebufferMixedSamplesCombinationNV
	{
		/// <summary>
		/// The size of the <see cref="VkFramebufferMixedSamplesCombinationNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkCoverageReductionModeNV coverageReductionMode;
		public VkSampleCountFlags rasterizationSamples;
		public VkSampleCountFlags depthStencilSamples;
		public VkSampleCountFlags colorSamples;
	}

	public unsafe partial struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 fragmentShaderSampleInterlock;
		public VkBool32 fragmentShaderPixelInterlock;
		public VkBool32 fragmentShaderShadingRateInterlock;
	}

	public unsafe partial struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceYcbcrImageArraysFeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 ycbcrImageArrays;
	}

	public unsafe partial struct VkHeadlessSurfaceCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkHeadlessSurfaceCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkHeadlessSurfaceCreateFlagsEXT flags;
	}

	public unsafe partial struct VkPhysicalDeviceLineRasterizationFeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceLineRasterizationFeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 rectangularLines;
		public VkBool32 bresenhamLines;
		public VkBool32 smoothLines;
		public VkBool32 stippledRectangularLines;
		public VkBool32 stippledBresenhamLines;
		public VkBool32 stippledSmoothLines;
	}

	public unsafe partial struct VkPhysicalDeviceLineRasterizationPropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceLineRasterizationPropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public uint lineSubPixelPrecisionBits;
	}

	public unsafe partial struct VkPipelineRasterizationLineStateCreateInfoEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPipelineRasterizationLineStateCreateInfoEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkLineRasterizationModeEXT lineRasterizationMode;
		public VkBool32 stippledLineEnable;
		public uint lineStippleFactor;
		public ushort lineStipplePattern;
	}

	public unsafe partial struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceIndexTypeUint8FeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 indexTypeUint8;
	}

	public unsafe partial struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderDemoteToHelperInvocation;
	}

	public unsafe partial struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 56;

		public VkStructureType sType;
		public void* pNext;
		public uint maxGraphicsShaderGroupCount;
		public uint maxIndirectSequenceCount;
		public uint maxIndirectCommandsTokenCount;
		public uint maxIndirectCommandsStreamCount;
		public uint maxIndirectCommandsTokenOffset;
		public uint maxIndirectCommandsStreamStride;
		public uint minSequencesCountBufferOffsetAlignment;
		public uint minSequencesIndexBufferOffsetAlignment;
		public uint minIndirectCommandsBufferOffsetAlignment;
	}

	public unsafe partial struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 deviceGeneratedCommands;
	}

	public unsafe partial struct VkGraphicsShaderGroupCreateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkGraphicsShaderGroupCreateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public uint stageCount;
		public VkPipelineShaderStageCreateInfo* pStages;
		public VkPipelineVertexInputStateCreateInfo* pVertexInputState;
		public VkPipelineTessellationStateCreateInfo* pTessellationState;
	}

	public unsafe partial struct VkGraphicsPipelineShaderGroupsCreateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkGraphicsPipelineShaderGroupsCreateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public uint groupCount;
		public VkGraphicsShaderGroupCreateInfoNV* pGroups;
		public uint pipelineCount;
		public VkPipeline* pPipelines;
	}

	public unsafe partial struct VkBindShaderGroupIndirectCommandNV
	{
		/// <summary>
		/// The size of the <see cref="VkBindShaderGroupIndirectCommandNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 4;

		public uint groupIndex;
	}

	public unsafe partial struct VkBindIndexBufferIndirectCommandNV
	{
		/// <summary>
		/// The size of the <see cref="VkBindIndexBufferIndirectCommandNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public IntPtr bufferAddress;
		public uint size;
		public VkIndexType indexType;
	}

	public unsafe partial struct VkBindVertexBufferIndirectCommandNV
	{
		/// <summary>
		/// The size of the <see cref="VkBindVertexBufferIndirectCommandNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public IntPtr bufferAddress;
		public uint size;
		public uint stride;
	}

	public unsafe partial struct VkSetStateFlagsIndirectCommandNV
	{
		/// <summary>
		/// The size of the <see cref="VkSetStateFlagsIndirectCommandNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 4;

		public uint data;
	}

	public unsafe partial struct VkIndirectCommandsStreamNV
	{
		/// <summary>
		/// The size of the <see cref="VkIndirectCommandsStreamNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 16;

		public VkBuffer buffer;
		public ulong offset;
	}

	public unsafe partial struct VkIndirectCommandsLayoutTokenNV
	{
		/// <summary>
		/// The size of the <see cref="VkIndirectCommandsLayoutTokenNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 88;

		public VkStructureType sType;
		public void* pNext;
		public VkIndirectCommandsTokenTypeNV tokenType;
		public uint stream;
		public uint offset;
		public uint vertexBindingUnit;
		public VkBool32 vertexDynamicStride;
		public VkPipelineLayout pushconstantPipelineLayout;
		public VkShaderStageFlags pushconstantShaderStageFlags;
		public uint pushconstantOffset;
		public uint pushconstantSize;
		public VkIndirectStateFlagsNV indirectStateFlags;
		public uint indexTypeCount;
		public VkIndexType* pIndexTypes;
		public uint* pIndexTypeValues;
	}

	public unsafe partial struct VkIndirectCommandsLayoutCreateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkIndirectCommandsLayoutCreateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 56;

		public VkStructureType sType;
		public void* pNext;
		public VkIndirectCommandsLayoutUsageFlagsNV flags;
		public VkPipelineBindPoint pipelineBindPoint;
		public uint tokenCount;
		public VkIndirectCommandsLayoutTokenNV* pTokens;
		public uint streamCount;
		public uint* pStreamStrides;
	}

	public unsafe partial struct VkGeneratedCommandsInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkGeneratedCommandsInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 120;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineBindPoint pipelineBindPoint;
		public VkPipeline pipeline;
		public VkIndirectCommandsLayoutNV indirectCommandsLayout;
		public uint streamCount;
		public VkIndirectCommandsStreamNV* pStreams;
		public uint sequencesCount;
		public VkBuffer preprocessBuffer;
		public ulong preprocessOffset;
		public ulong preprocessSize;
		public VkBuffer sequencesCountBuffer;
		public ulong sequencesCountOffset;
		public VkBuffer sequencesIndexBuffer;
		public ulong sequencesIndexOffset;
	}

	public unsafe partial struct VkGeneratedCommandsMemoryRequirementsInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkGeneratedCommandsMemoryRequirementsInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public VkPipelineBindPoint pipelineBindPoint;
		public VkPipeline pipeline;
		public VkIndirectCommandsLayoutNV indirectCommandsLayout;
		public uint maxSequencesCount;
	}

	public unsafe partial struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 texelBufferAlignment;
	}

	public unsafe partial struct VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 48;

		public VkStructureType sType;
		public void* pNext;
		public ulong storageTexelBufferOffsetAlignmentBytes;
		public VkBool32 storageTexelBufferOffsetSingleTexelAlignment;
		public ulong uniformTexelBufferOffsetAlignmentBytes;
		public VkBool32 uniformTexelBufferOffsetSingleTexelAlignment;
	}

	public unsafe partial struct VkRenderPassTransformBeginInfoQCOM
	{
		/// <summary>
		/// The size of the <see cref="VkRenderPassTransformBeginInfoQCOM"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkSurfaceTransformFlagsKHR transform;
	}

	public unsafe partial struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM
	{
		/// <summary>
		/// The size of the <see cref="VkCommandBufferInheritanceRenderPassTransformInfoQCOM"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 40;

		public VkStructureType sType;
		public void* pNext;
		public VkSurfaceTransformFlagsKHR transform;
		public VkRect2D renderArea;
	}

	public unsafe partial struct VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 pipelineCreationCacheControl;
	}

	public unsafe partial struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV
	{
		/// <summary>
		/// The size of the <see cref="VkPhysicalDeviceDiagnosticsConfigFeaturesNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkBool32 diagnosticsConfig;
	}

	public unsafe partial struct VkDeviceDiagnosticsConfigCreateInfoNV
	{
		/// <summary>
		/// The size of the <see cref="VkDeviceDiagnosticsConfigCreateInfoNV"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkDeviceDiagnosticsConfigFlagsNV flags;
	}

	public unsafe partial struct VkAndroidSurfaceCreateInfoKHR
	{
		/// <summary>
		/// The size of the <see cref="VkAndroidSurfaceCreateInfoKHR"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public VkAndroidSurfaceCreateFlagsKHR flags;
		public IntPtr* window;
	}

	public unsafe partial struct VkAndroidHardwareBufferUsageANDROID
	{
		/// <summary>
		/// The size of the <see cref="VkAndroidHardwareBufferUsageANDROID"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public ulong androidHardwareBufferUsage;
	}

	public unsafe partial struct VkAndroidHardwareBufferPropertiesANDROID
	{
		/// <summary>
		/// The size of the <see cref="VkAndroidHardwareBufferPropertiesANDROID"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 32;

		public VkStructureType sType;
		public void* pNext;
		public ulong allocationSize;
		public uint memoryTypeBits;
	}

	public unsafe partial struct VkAndroidHardwareBufferFormatPropertiesANDROID
	{
		/// <summary>
		/// The size of the <see cref="VkAndroidHardwareBufferFormatPropertiesANDROID"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 72;

		public VkStructureType sType;
		public void* pNext;
		public VkFormat format;
		public ulong externalFormat;
		public VkFormatFeatureFlags formatFeatures;
		public VkComponentMapping samplerYcbcrConversionComponents;
		public VkSamplerYcbcrModelConversion suggestedYcbcrModel;
		public VkSamplerYcbcrRange suggestedYcbcrRange;
		public VkChromaLocation suggestedXChromaOffset;
		public VkChromaLocation suggestedYChromaOffset;
	}

	public unsafe partial struct VkImportAndroidHardwareBufferInfoANDROID
	{
		/// <summary>
		/// The size of the <see cref="VkImportAndroidHardwareBufferInfoANDROID"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public IntPtr* buffer;
	}

	public unsafe partial struct VkMemoryGetAndroidHardwareBufferInfoANDROID
	{
		/// <summary>
		/// The size of the <see cref="VkMemoryGetAndroidHardwareBufferInfoANDROID"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public VkDeviceMemory memory;
	}

	public unsafe partial struct VkExternalFormatANDROID
	{
		/// <summary>
		/// The size of the <see cref="VkExternalFormatANDROID"/> type, in bytes.
		/// </summary>
		public static readonly int SizeInBytes = 24;

		public VkStructureType sType;
		public void* pNext;
		public ulong externalFormat;
	}

}
