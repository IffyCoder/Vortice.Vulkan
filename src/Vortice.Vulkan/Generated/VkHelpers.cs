// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using Vortice.Mathematics;

namespace Vortice.Vulkan
{
	unsafe partial class Vulkan
	{
		public static ReadOnlySpan<VkPhysicalDevice> vkEnumeratePhysicalDevices(VkInstance instance)
		{
			uint physicalDeviceCount = 0;
			vkEnumeratePhysicalDevices(instance, &physicalDeviceCount, null).CheckResult();

			ReadOnlySpan<VkPhysicalDevice> physicalDevices = new VkPhysicalDevice[physicalDeviceCount];
			fixed (VkPhysicalDevice* physicalDevicesPtr = physicalDevices)
			{
				vkEnumeratePhysicalDevices(instance, &physicalDeviceCount, physicalDevicesPtr).CheckResult();
			}
			return physicalDevices;
		}

		public static ReadOnlySpan<VkQueueFamilyProperties> vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice)
		{
			uint queueFamilyPropertyCount = 0;
			vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, &queueFamilyPropertyCount, null);

			ReadOnlySpan<VkQueueFamilyProperties> queueFamilyProperties = new VkQueueFamilyProperties[queueFamilyPropertyCount];
			fixed (VkQueueFamilyProperties* queueFamilyPropertiesPtr = queueFamilyProperties)
			{
				vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, &queueFamilyPropertyCount, queueFamilyPropertiesPtr);
			}
			return queueFamilyProperties;
		}

		public static ReadOnlySpan<VkLayerProperties> vkEnumerateInstanceLayerProperties()
		{
			uint propertyCount = 0;
			vkEnumerateInstanceLayerProperties(&propertyCount, null).CheckResult();

			ReadOnlySpan<VkLayerProperties> properties = new VkLayerProperties[propertyCount];
			fixed (VkLayerProperties* propertiesPtr = properties)
			{
				vkEnumerateInstanceLayerProperties(&propertyCount, propertiesPtr).CheckResult();
			}
			return properties;
		}

		public static ReadOnlySpan<VkLayerProperties> vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice)
		{
			uint propertyCount = 0;
			vkEnumerateDeviceLayerProperties(physicalDevice, &propertyCount, null).CheckResult();

			ReadOnlySpan<VkLayerProperties> properties = new VkLayerProperties[propertyCount];
			fixed (VkLayerProperties* propertiesPtr = properties)
			{
				vkEnumerateDeviceLayerProperties(physicalDevice, &propertyCount, propertiesPtr).CheckResult();
			}
			return properties;
		}

		public static VkResult vkQueueSubmit(VkQueue queue, VkSubmitInfo submit, VkFence fence)
		{
			return vkQueueSubmit(queue, 1, &submit, fence);
		}

		public static VkResult vkQueueSubmit(VkQueue queue, ReadOnlySpan<VkSubmitInfo> submits, VkFence fence)
		{
			fixed (VkSubmitInfo* submitsPtr = submits)
			{
				return vkQueueSubmit(queue, (uint)submits.Length, submitsPtr, fence);
			}
		}

		public static ReadOnlySpan<VkSurfaceFormatKHR> vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface)
		{
			uint surfaceFormatCount = 0;
			vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, &surfaceFormatCount, null).CheckResult();

			ReadOnlySpan<VkSurfaceFormatKHR> surfaceFormats = new VkSurfaceFormatKHR[surfaceFormatCount];
			fixed (VkSurfaceFormatKHR* surfaceFormatsPtr = surfaceFormats)
			{
				vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, &surfaceFormatCount, surfaceFormatsPtr).CheckResult();
			}
			return surfaceFormats;
		}

	}
}
